<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>games101-week11</title>
    <link href="/posts/57d171dc/"/>
    <url>/posts/57d171dc/</url>
    
    <content type="html"><![CDATA[<h1 id="animation">Animation</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020095953.png" /></p><h2 id="historical-points-in-animation">Historical Points inAnimation</h2><p>壁画-&gt;圆盘-&gt;电影</p><h2 id="keyframe-animation">Keyframe Animation</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020100711.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020100849.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020100941.png" /></p><h2 id="physical-simulation">Physical Simulation</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020101113.png" /></p><h2 id="mass-spring-system-example-of-modeling-a-dynamic-system">MassSpring System: Example of Modeling a Dynamic System</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020101553.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020101816.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020101919.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020101939.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020102102.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020102450.png" /></p><p>如何逐步添加东西使得质量弹簧系统模拟布的情况</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020102713.png" /></p><h2 id="particle-systems">Particle Systems</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020103124.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020103315.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020103427.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020103621.png" /></p><h2 id="forward-kinematics">Forward Kinematics</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020103831.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104116.png" /></p><h2 id="inverse-kinematics">Inverse Kinematics</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104155.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104222.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104315.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104340.png" /></p><h2 id="rigging">Rigging</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104426.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104758.png" /></p><h2 id="motion-capture">Motion Capture</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020104852.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020105007.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020105124.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020105227.png" /></p><h2 id="single-particle-simulation">Single Particle Simulation</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020105855.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110053.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110124.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110143.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110352.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110506.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110640.png" /></p><h2 id="combating-instability">Combating Instability</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110809.png" /></p><h3 id="midpoint-method">Midpoint Method</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020110836.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020111042.png" /></p><h3 id="adaptive-step-size">Adaptive Step Size</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020111135.png" /></p><h3 id="implicit-euler-method">Implicit Euler Method</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020111515.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020111615.png" /></p><h3 id="runge-kutta-families">Runge-Kutta Families</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020111837.png" /></p><h3 id="position-based-verlet-integration">Position-Based / VerletIntegration</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020112131.png" /></p><h2 id="rigid-body-simulation">Rigid body simulation</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020112305.png" /></p><h2 id="fluid-simulation">Fluid simulation</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020112822.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020113259.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231020113425.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week10</title>
    <link href="/posts/20d6414a/"/>
    <url>/posts/20d6414a/</url>
    
    <content type="html"><![CDATA[<h1 id="cameras-lenses-and-light-fields">Cameras, Lenses and LightFields</h1><h2 id="cameras">Cameras</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019162902.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019163207.png" /></p><h3 id="field-of-view-fov">Field of View (FOV)</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019163733.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019164059.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019164245.png" /></p><h3 id="exposure">Exposure</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019164534.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019164713.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019165057.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019165252.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019165538.png" /></p><h3 id="fast-and-slow-photography">Fast and Slow Photography</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019170536.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019170644.png" /></p><h2 id="lenses">Lenses</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019170804.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019170839.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019171202.png" /></p><h3 id="defocus-blur">Defocus Blur</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019172259.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019172710.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019172734.png" /></p><h3 id="ray-tracing-ideal-thin-lenses">Ray Tracing Ideal ThinLenses</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019173355.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019173520.png" /></p><h3 id="depth-of-field">Depth of Field</h3><p>景深：成像清晰的一段范围（纵向）</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019173824.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019173910.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019174208.png" /></p><h2 id="light-fields">Light Fields</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175439.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175456.png" /></p><h3 id="the-plenoptic-function">The Plenoptic Function</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175704.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175729.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175745.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175807.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175828.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019175946.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019180115.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019180340.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019180404.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019180510.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019180706.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019181151.png" /></p><h3 id="light-field-camera">Light Field Camera</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019181321.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019181502.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019181703.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019181913.png" /></p><h1 id="color-and-perception">Color and Perception</h1><h2 id="physical-basis-of-color">Physical Basis of Color</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182434.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182344.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182420.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182449.png" /></p><h2 id="biological-basis-of-color">Biological Basis of Color</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182557.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182731.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182906.png" /></p><h2 id="tristimulus-theory-of-color">Tristimulus Theory of Color</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019182925.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183035.png" /></p><h2 id="metamerism">Metamerism</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183119.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183141.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183202.png" /></p><h2 id="color-reproduction-matching">Color Reproduction / Matching</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183226.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183432.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183534.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183635.png" /></p><h2 id="color-spaces">Color Spaces</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183908.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019183929.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184056.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184342.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184357.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184418.png" /></p><h2 id="perceptually-organized-color-spaces">Perceptually OrganizedColor Spaces</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184604.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184629.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184654.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019184822.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019185008.png" /></p><p>Everything is Relative</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019185057.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019185115.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019185134.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week9</title>
    <link href="/posts/b8750151/"/>
    <url>/posts/b8750151/</url>
    
    <content type="html"><![CDATA[<h1 id="materials-and-appearances">Materials and Appearances</h1><h2 id="material-brdf">Material == BRDF</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018162315.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018162613.png" /></p><h2 id="material">Material</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018163021.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018163044.png" /></p><h2 id="specular-reflection">Specular Reflection</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018163335.png" /></p><h2 id="specular-refraction">Specular Refraction</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018163856.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018164050.png" /></p><p>水底看水面视角是 一个锥形</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018164424.png" /></p><h2 id="fresnel-reflection">Fresnel Reflection</h2><p>计算 多少能量被反射</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018165026.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018165130.png" /></p><h2 id="microfacet-material">Microfacet Material</h2><p>远处看，看见是平面的</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018165853.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018170033.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018170125.png" /></p><h2 id="isotropic-anisotropic-materials-brdfs">Isotropic / AnisotropicMaterials (BRDFs)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018170754.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018170927.png" /></p><h2 id="anisotropic-brdfs">Anisotropic BRDFs</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018171040.png" /></p><h2 id="properties-of-brdfs">Properties of BRDFs</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018171534.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018171606.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018171735.png" /></p><h2 id="measuring-brdfs">Measuring BRDFs</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231018172131.png" /></p><h1 id="advanced-light-transport">Advanced Light Transport</h1><h2 id="unbiased-light-transport-methods">Unbiased light transportmethods</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019101330.png" /></p><h3 id="bidirectional-path-tracing-bdpt">Bidirectional Path Tracing(BDPT)</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019101455.png" /></p><h3 id="metropolis-light-transport-mlt">Metropolis Light Transport(MLT)</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019102804.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019103224.png" /></p><h2 id="biased-light-transport-methods">Biased light transportmethods</h2><h3 id="photon-mapping">Photon Mapping</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019103355.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019103756.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019103928.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019104148.png" /></p><h3 id="vertex-connection-and-merging">Vertex Connection andMerging</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019104503.png" /></p><h2 id="instant-radiosity-vpl-many-light-methods">Instant radiosity (VPL/ many light methods)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019104747.png" /></p><h1 id="advanced-appearance-modeling">Advanced Appearance Modeling</h1><h2 id="non-surface-models">Non-surface models</h2><h3 id="participating-media-fog-cloud">Participating Media: Fog,Cloud</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105338.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105424.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105503.png" /></p><h3 id="hair-appearance">Hair Appearance</h3><h4 id="kajiya-kay-model">Kajiya-Kay Model</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105813.png" /></p><h4 id="marschner-model">Marschner Model</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105856.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019105940.png" /></p><h4 id="double-cylinder-model">Double Cylinder Model</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019110854.png" /></p><h3 id="granular-material">Granular Material</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019110928.png" /></p><h2 id="surface-models">Surface models</h2><h3 id="subsurface-scattering">Subsurface Scattering</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019154637.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019154733.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019154918.png" /></p><h3 id="cloth">Cloth</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019155431.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019155626.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019155713.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019155835.png" /></p><h3 id="detailed-appearance-motivation">Detailed Appearance:Motivation</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019160117.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019160140.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019160515.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019160539.png" /></p><h2 id="procedural-appearance">Procedural appearance</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019161021.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019161104.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019161131.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20231019161209.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week8</title>
    <link href="/posts/cf7231c7/"/>
    <url>/posts/cf7231c7/</url>
    
    <content type="html"><![CDATA[<h1 id="radiometry-cont">Radiometry cont</h1><h2 id="irradiance">Irradiance</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918102029.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918102232.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918102450.png" /></p><h2 id="radiance">Radiance</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918102746.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918102827.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918103525.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918103212.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918103714.png" /></p><h1 id="light-transport">Light transport</h1><h2id="bidirectional-reflectance-distribution-function-brdf">BidirectionalReflectance Distribution Function (BRDF)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023918103955.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919124406.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919124719.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919124944.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919125159.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919125850.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919125916.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919125932.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919130000.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919130158.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919130900.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919131017.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919131311.png" /></p><h1 id="monte-carlo-integration">Monte Carlo Integration</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919153749.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919154120.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919154228.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919154351.png" /></p><h1 id="path-tracing">Path Tracing</h1><h2 id="motivation-whitted-style-ray-tracing">Motivation: Whitted-StyleRay Tracing</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919154925.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919154955.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919155239.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919155604.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919155958.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919160041.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919160231.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919160531.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919160729.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919161025.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919161235.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919161533.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919161646.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162135.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162225.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162417.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162535.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162626.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162806.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919162930.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163041.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163144.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163333.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163749.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163828.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919163949.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919164145.png" /></p><h1 id="ray-tracing-previous-vs.-modern-concepts">Ray tracing: Previousvs. Modern Concepts</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023919164619.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week7</title>
    <link href="/posts/5fcd2c56/"/>
    <url>/posts/5fcd2c56/</url>
    
    <content type="html"><![CDATA[<h1 id="ray-tracing-1whitted-style-ray-tracing">Ray Tracing1（Whitted-Style Ray Tracing）</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915105746.png" /></p><h2 id="basic-ray-tracing-algorithm">Basic Ray-Tracing Algorithm</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915110328.png" /></p><p>光路可逆</p><h3 id="ray-casting">Ray Casting</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915110739.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915111057.png" /></p><h2 id="recursive-whitted-style-ray-tracing">Recursive (Whitted-Style)Ray Tracing</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915111524.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915111543.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915111633.png" /></p><h3 id="ray-surface-intersection">Ray-Surface Intersection</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915112133.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915112314.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915112536.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915112702.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915112758.png" /></p><p>暴力求解不可取</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915113101.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915113142.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915113354.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915113536.png" /></p><h2 id="accelerating-ray-surface-intersection">Accelerating Ray-SurfaceIntersection</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915114038.png" /></p><h3 id="bounding-volumes">Bounding Volumes</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915114143.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915114408.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915114632.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915115021.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915115438.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915115653.png" /></p><h1 id="ray-tracing-2acceleration-radiometry">Ray Tracing2（Acceleration &amp; Radiometry）</h1><h2 id="uniform-spatial-partitions-grids">Uniform Spatial Partitions(Grids)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915142716.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915142812.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915143138.png" /></p><h2 id="spatial-partitions">Spatial Partitions</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915143530.png" /></p><h3 id="kd-tree">KD-Tree</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915143909.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915144015.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915144352.png" /></p><h2 id="object-partitions-bounding-volume-hierarchy-bvh">ObjectPartitions &amp; Bounding Volume Hierarchy (BVH)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915144956.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915145131.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915150310.png" /></p><h3 id="bvh-traversal">BVH Traversal</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915150352.png" /></p><h2 id="basic-radiometry">Basic radiometry</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915151517.png" /></p><h3 id="radiant-energy-and-flux-power">Radiant Energy and Flux(Power)</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915151655.png" /></p><h3 id="radiant-intensity-irradiance-radiance">Radiant Intensity,irradiance, radiance</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915152205.png" /></p><h4 id="radiant-intensity">Radiant Intensity</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915152357.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915152610.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915152751.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915153116.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023915153157.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week6</title>
    <link href="/posts/28ca1cc0/"/>
    <url>/posts/28ca1cc0/</url>
    
    <content type="html"><![CDATA[<h1 id="curves">Curves</h1><h2 id="bézier-curves">Bézier Curves</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912103435.png" /></p><h3 id="de-casteljau-algorithm">de Casteljau Algorithm</h3><p>像是一个枚举所有点的一个算法</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912104008.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912104152.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912104452.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912105105.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912105120.png" /></p><h3 id="properties-of-bézier-curves">Properties of Bézier Curves</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912105952.png" /></p><h3 id="piecewise-bézier-curves">Piecewise Bézier Curves</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912110729.png" /></p><p>c0 连续是前一段的终点等于后一段的起点</p><p>c1 连续是两个控制点共线且离公共点距离一样</p><h2 id="other-types-of-splines">Other types of splines</h2><h3 id="spline">Spline</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912111248.png" /></p><h3 id="b-splines">B-splines</h3><ul><li>Short for basis splines</li><li>Require more information than Bezier curves</li><li>Satisfy all important properties that Bézier curves have (i.e.superset)</li></ul><p>More Difficult</p><h1 id="surfaces">Surfaces</h1><h2 id="bezier-surfaces">Bezier surfaces</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912111606.png" /></p><p>像编织的方式一样得到的贝塞尔曲面</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912111840.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912111931.png" /></p><h2 id="mesh-operations-geometry-processing">Mesh Operations: GeometryProcessing</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912112052.png" /></p><h2 id="loop-subdivision">Loop Subdivision</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913101530.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913101608.png" /></p><h3 id="update">Update</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913102503.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913102540.png" /></p><h2 id="catmull-clark-subdivision-general-mesh">Catmull-ClarkSubdivision (General Mesh)</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913103223.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913103731.png" /></p><h2 id="mesh-simplification">Mesh Simplification</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913104539.png" /></p><h3 id="collapsing-an-edge">Collapsing An Edge</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913105221.png" /></p><h3 id="quadric-error-metrics">Quadric Error Metrics</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913105252.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913105946.png" /></p><h1 id="shadow-mapping">Shadow Mapping</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913110711.png" /></p><h2 id="pass-1-render-from-light">Pass 1: Render from Light</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913110901.png" /></p><h2 id="pass-2a-render-from-eye">Pass 2A: Render from Eye</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913111056.png" /></p><h2 id="pass-2b-project-to-light">Pass 2B: Project to light</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913111212.png" /></p><h2 id="visualizing-shadow-mapping">Visualizing Shadow Mapping</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913111526.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913111543.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913111613.png" /></p><h2 id="problems-with-shadow-maps">Problems with shadow maps</h2><p>• Hard shadows (point lights only)</p><p>• Quality depends on shadow map resolution (general problem withimage-based techniques)</p><p>• Involves equality comparison of floating point depth values meansissues of scale, bias, tolerance</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023913112240.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week5</title>
    <link href="/posts/b1c34d7a/"/>
    <url>/posts/b1c34d7a/</url>
    
    <content type="html"><![CDATA[<h1 id="shading">Shading</h1><h2 id="barycentric-coordinates">Barycentric Coordinates</h2><p>为了在三角形内部进行插值</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395165715.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395170247.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395170638.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395171630.png" /></p><h2 id="simple-texture-mapping">Simple Texture Mapping</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395172510.png" /></p><h2 id="texture-magnification">Texture Magnification</h2><p>采样后的图片很大，但是纹理很小。多个 pixel 用一个 texel</p><h3 id="bilinear-interpolation">Bilinear Interpolation</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395173513.png" /></p><h3 id="texture-is-too-large">Texture is too large</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395174744.png" /></p><p>超采样可以解决，但是耗时</p><p>实际上有个算法 Range Query，给一个纹理然后快速给出一个区域的平均</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395180636.png" /></p><p>得到纹理之后就计算出下面的</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395182142.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395182323.png" /></p><p>要保证查到的值连续，又需要插值（三线性插值）</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395183036.png" /></p><h2 id="anisotropic-filtering">Anisotropic Filtering</h2><p>Mipmap 只能处理正方形的，就会出现问题</p><p>Mipmap 只能生成对角线上的图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395183804.png" /></p><p>Anisotropic Filtering正方形映射到矩形，但是处理不规则的还是存在问题</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395183714.png" /></p><p>针对不规则的形状</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395184116.png" /></p><h2 id="环境光">环境光</h2><p>纹理 = 内存 + 范围查询</p><p>环境光作为纹理存储，但是对球来说会发生扭曲（想象地球仪）</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910103049.png" /></p><h2 id="textures-can-affect-shading">Textures can affect shading!</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910103352.png" /></p><h2 id="bump-mapping">Bump Mapping</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910103559.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910103708.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910104106.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910104521.png" /></p><h1 id="geometry">Geometry</h1><h2 id="implicit-representations-of-geometry">"Implicit" Representationsof Geometry</h2><p>不描述点，而描述点满足的表达式</p><h2 id="explicit-representations-of-geometry">"Explicit" Representationsof Geometry</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910110600.png" /></p><p>映射，把点画出来就找到了</p><h2 id="implicit-表示实例">Implicit 表示实例</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910111151.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910111133.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910111331.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910111540.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023910111910.png" /></p><h2 id="explicit-表示实例">Explicit 表示实例</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912102352.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912102854.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023912102934.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week4</title>
    <link href="/posts/c6c47dec/"/>
    <url>/posts/c6c47dec/</url>
    
    <content type="html"><![CDATA[<h1 id="shading">Shading</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831110855.png" /></p><p>考虑光在传播过程中的能量损失，物体接收到的能量以及物体在物理学上吸收的光（具体表现为颜色的展示）</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831111149.png" /></p><p>该图为漫反射系数的变化导致生成图像的不同</p><h1 id="highlight">Highlight</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391101200.png" /></p><p>加 p 这个指数是为了使得高光产生时的角度值很小，符合现实场景</p><h1 id="ambient-term">Ambient Term</h1><p>环境光，这里暴力认为是一个常数</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391104437.png" /></p><h1 id="blinn-phong-reflection-model">Blinn-Phong Reflection Model</h1><p>Phong ReflectionModel计算高光是通过反射角和视角之间的夹角，这样的计算量很大。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391104710.png" /></p><h1 id="shading-frequencies">Shading Frequencies</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391105140.png" /></p><p>着色应用在面-&gt;三角形顶点-&gt;像素</p><h1 id="shading-type">Shading Type</h1><h2 id="flat-shading">Flat shading</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391105413.png" /></p><h2 id="gouraud-shading">Gouraud shading</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391105441.png" /></p><h2 id="phong-shading">Phong shading</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202391105626.png" /></p><h1 id="shading-frequency-and-shading-type">Shading Frequency AndShading Type</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395101839.png" /></p><h1 id="求法线">求法线</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395102221.png" /></p><p>多个三角形共用一个顶点的时候，求多个三角形法线的平均，就是这个顶点的法线</p><h1 id="graphics-pipeline">Graphics Pipeline</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395155941.png" /></p><h1 id="texture-mapping">Texture Mapping</h1><p>Different Colors at Different Places?</p><p>2D 的图贴到 3D 模型上面</p><h2 id="texture-coordinate">Texture coordinate</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202395164519.png" /></p><p>u,v 约定俗成大小是在 0~1 之间</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week3</title>
    <link href="/posts/58a0e84f/"/>
    <url>/posts/58a0e84f/</url>
    
    <content type="html"><![CDATA[<h1 id="rasterization-1-triangles">Rasterization 1 (Triangles)</h1><p>怎么在屏幕上画三角形？？？</p><p>对每一个像素点判断是否在三角形内，(用像素点的中心点坐标代替这个像素点)</p><p>在像素点内就着色，不在就不着色</p><h2 id="三角形坐标系和屏幕坐标系对应">三角形坐标系和屏幕坐标系对应</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831105950.png" /></p><h2 id="ssaa">SSAA</h2><p>把一个像素点划成多个像素点，每一个像素点有自己的颜色。那么一大个像素点的颜色就是小像素点的混合颜色</p><h2 id="msaa">MSAA</h2><p>把一个像素点划成多个像素点，那么一大个像素点的颜色就是三角形经过了多少个小像素点，然后按照比例着色</p><h1 id="visibility-occlusion">Visibility / occlusion</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831110637.png" /></p><p>Z-Buffer算法就是为每个像素点维持一个表示深度的矩阵，如果深度浅也就是离摄像机近的，就覆盖掉之前的像素</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week2</title>
    <link href="/posts/2fa7d8d9/"/>
    <url>/posts/2fa7d8d9/</url>
    
    <content type="html"><![CDATA[<h1 id="d-transformations">2D transformations</h1><p>下面的三种变换，旋转，缩放和错切都叫做线性变换</p><p>更有意思的是，这些都可以通过特殊的矩阵实现</p><h2 id="rotation">rotation</h2><p>旋转矩阵的推导有两个方法</p><p>方法一是转成极坐标</p><p>方法二是考虑坐标系基的变换</p><p>原始坐标系的基</p><p><span class="math display">\[i = \begin{pmatrix}cos0\\sin0\end{pmatrix}j = \begin{pmatrix}cos{\frac{\pi}{2}}\\sin{\frac{\pi}{2}}\end{pmatrix}\]</span></p><p>旋转 <span class="math inline">\(\theta\)</span> 度后就有新的</p><p><span class="math display">\[i = \begin{pmatrix}cos{\theta}\\sin{\theta}\end{pmatrix}j = \begin{pmatrix}cos{(\frac{\pi}{2}+{\theta})}\\sin{(\frac{\pi}{2}+{\theta})}\end{pmatrix}=\begin{pmatrix}-sin{\theta}\\cos{\theta}\end{pmatrix}\]</span></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831100857.png" /></p><h2 id="scale">scale</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831100735.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831100753.png" /></p><h2 id="shear">shear</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831100825.png" /></p><h1 id="homogeneous-coordinates">Homogeneous coordinates</h1><p>怎么没有移动矩阵？</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102213.png" /></p><p>这个根本就不是线性变换，而且还不优雅！</p><p>这时候就需要加上齐次坐标了</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102306.png" /></p><p>这样得到的就是优美的矩阵乘法</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102327.png" /></p><h1 id="拓展到-3d">拓展到 3D</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102452.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102501.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102524.png" /></p><h1 id="view-camera-transformation">View / Camera Transformation</h1><p>就像转动相机一样，把视角固定在一个位置</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831102943.png" /></p><p>第一步先移动到视角的位置上</p><p>第二步调整视角</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831103012.png" /></p><h1 id="orthographic-projection">Orthographic Projection</h1><p>正交投影，不考虑物体的远近</p><p>先移动到原点位置，然后进行缩放</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831103246.png" /></p><p>上面需要的参数就是通过摄像机的可视范围进行一个推导</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831105357.png" /></p><h1 id="perspective-projection">Perspective Projection</h1><p>远小近大，所以我们要先有一个压缩的操作</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831103553.png" /></p><p>这个压缩的操作用矩阵怎么表达呢？</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831104057.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831104133.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831104145.png" /></p><p>推导过程就是利用相似三角形然后外加一些特殊点来确定 A B 的值</p><h2 id="mvp">MVP</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831104730.png" /></p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>games101-week1</title>
    <link href="/posts/b6ae8963/"/>
    <url>/posts/b6ae8963/</url>
    
    <content type="html"><![CDATA[<h1 id="pdf-来源">PDF 来源</h1><p><ahref="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html</a></p><h1 id="学习任务">学习任务</h1><h2 id="rasterization">Rasterization</h2><p>光栅化，我的理解就是把 3D 模型的转为 2D 图像的过程</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831095454.png" /></p><h2 id="curves-and-meshes">Curves and Meshes</h2><p>如何在计算机中画出几何的模型</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831095515.png" /></p><h2 id="ray-tracing">Ray Tracing</h2><p>光线追踪。考虑光线与模型的交互以及光线反射产生的结果</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831095538.png" /></p><h2 id="animation-simulation">Animation / Simulation</h2><p>用作动画或者物理模拟</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023831095815.png" /></p><h1 id="cg-和-cv区别">CG 和 CV区别</h1><p>CG 靠的是还原显示，CV靠的是依据现实然后去猜</p><h1 id="一些线性代数的知识">一些线性代数的知识</h1><p>向量，点积，叉积，矩阵</p>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LabDesign_BSConv</title>
    <link href="/posts/e98970ad/"/>
    <url>/posts/e98970ad/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>提出利用秩来判断核间的相关性，减少网络结构中卷积核的数量，进而减少网络的计算量，从而达到轻量化网络的目的。</p><h1 id="一实验设计">一、实验设计</h1><p>验证通过处理核间相关性能否提升网络质量？</p><h2 id="预训练模型">1. 预训练模型</h2><p>针对一个小型的项目,例如对用于手写字体的识别的卷积网络进行训练。提取出网络中已经训练好的卷积核。</p><h2 id="算法处理">2. 算法处理</h2><p>通过算法(秩或降维)判断卷积核之间的相关性，然后对卷积核进行取舍</p><h2 id="搭建新网络">3. 搭建新网络</h2><p>利用筛选出的卷积核结合 GhostNet 的结构对之前的小型项目进行测试</p><h2 id="问题">4. 问题</h2><p>这样就只针对于某个特有任务进行了一个预处理的步骤，但这样就不能作为通用网络适用于其他情况</p><h1 id="二bsconv">二、BSConv</h1><h2 id="核心思想">1. 核心思想</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023525171933.png" /></p><p>之前的 GhostNet 考虑的是核间的相似性, BSConv考虑的是核内的相似性。</p><p>在常规卷积中, 每个卷积层对输入张量 <span class="math inline">\(U \inR^{M \times Y \times X}\)</span> 进行变化得到输出张量 <spanclass="math inline">\(V \in R^{N \times Y \times X}\)</span>，相应的卷积核 <span class="math inline">\(F^{(1)}\)</span> ... <spanclass="math inline">\(F^{(N)}\)</span>, 每个卷积核的尺寸为 <spanclass="math inline">\(M \times K \timesK\)</span>。相应的公式可以描述为</p><p><span class="math display">\[V_{n,:,:} = U * F^{(n)}, n \in \{1, ... , N\}\]</span></p><p>对 BSConv 而言, 它的卷积核是下面这样</p><p><span class="math display">\[F_{m,:,:}^{(n)} = w_{n,m} \cdot B^{(n)}, m \in \{1, ... , M\}, n \in\{1, ... , N\}\]</span></p><p>其中权重 <span class="math inline">\(w_{n,m}\)</span>就是需要通过学习来获取的了</p><h2 id="实际处理">2. 实际处理</h2><p>在训练的过程中，其实光用上述式子处理是会出现问题的。例如反向传播时，权重应该怎么变化？（利用权重推导出卷积核进行卷积核更新，这个就和初始卷积核的操作大同小异，只是多了一个权重作为中间变量）</p><p><span class="math display">\[V_{n,:,:} = U * F^{(n)} = \sum_{m=1}^{M}(U_{m,:,:} * F_{m,:,:}^{(n)})\]</span></p><p><span class="math display">\[V_{n,:,:} = \sum_{m=1}^{M}(U_{m,:,:} * (w_{n,m} \cdot B^{(n)}) )\]</span></p><p><span class="math display">\[V_{n,:,:} = (\sum_{m=1}^{M}(U_{m,:,:} \cdot w_{n,m}) * B^{(n)})\]</span></p><p><span class="math display">\[V_{n,:,:}^{&#39;} = U * \tilde{w}_n\]</span></p><p><span class="math display">\[V_{n,:,:} = V_{n,:,:}^{&#39;} * B^{n}\]</span></p><p>通俗一点就是, 这个转换在单通道卷积层 <spanclass="math inline">\(B^{(n)}\)</span>前面再添加了一个卷积层用于获得所需要的权重.</p><p>？？？？思考</p><p>能否像这样通过转化实现在训练的过程中对核间相关性的处理？？？？</p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BSConv</tag>
      
      <tag>Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How-to-generate-kernel</title>
    <link href="/posts/d813eb74/"/>
    <url>/posts/d813eb74/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>在常规卷积的过程中找到相关性低的一部分卷积核，利用这部分卷积核结合深度可分离卷积搭建起新的网络框架。</p><h1 id="一协方差判断卷积核相关性">一、协方差判断卷积核相关性</h1><p>协方差是对应两样本并评估之间的相关程度的, 样本协方差的定义为</p><p><span class="math display">\[Cov(X,Y) = \frac{1}{n-1} \sum^{n}_{i=1}(x_i - \bar{x})(y_i - \bar{y})\]</span></p><p>其中 X,Y 表示两个不同的样本空间。</p><h2 id="问题一-不同的样本空间">问题一: 不同的样本空间？</h2><p>从统计和概率学的角度出发，协方差是判断两个维度的随机变量的相关性。比如身高和体重之间的关系或者地区居住人口和地区人均收入之间的关系。其中身高和体重是不同的样本空间，地区居住人口和地区人均收入是不同的样本空间。</p><p>不同的卷积核只能算做是同一个样本空间的不同样本。</p><h2 id="问题二计算方式">问题二：计算方式？</h2><p>协方差有正负之分，表示正相关和负相关。数值的大小表示 "相关的程度",这里就有一个"悖论"。</p><p>当协方差越大的时候,表示两变量之间相关性越大。对卷积核而言，当协方差更小时就应该保留这两个卷积核，但是遇见下列情况的卷积核时，会出现一些问题。</p><p>卷积核 A</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023525163517.png" /></p><p>卷积核 B</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023525163517.png" /></p><p>卷积核 C</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023525163626.png" /></p><p>经过计算，应该保留的是卷积核 A 和 卷积核 B。但是 A B两个卷积核是相同的。</p><h2 id="想法">想法</h2><p>对卷积核降维,使其从二维矩阵降为一维向量。然后利用余弦公式进行判断，若两向量正交则表示线性无关，可以进行保留。</p><h1 id="二整体流程">二、整体流程</h1><p>要通过算法来选择常规卷积的卷积核，是需要使用常规卷积训练后进行选择，还是动态地在训练过程中利用算法进行处理？</p><h1 id="三bsconv-核内相似性">三、BSConv-核内相似性</h1><p>之前的 GhostNet 考虑的是核间的相似性, BSConv考虑的是核内的相似性。</p><p>在常规卷积中, 每个卷积层对输入张量 <span class="math inline">\(U \inR^{M \times Y \times X}\)</span> 进行变化得到输出张量 <spanclass="math inline">\(V \in R^{N \times Y \times X}\)</span>，相应的卷积核 <span class="math inline">\(F^{(1)}\)</span> ... <spanclass="math inline">\(F^{(N)}\)</span>, 每个卷积核的尺寸为 <spanclass="math inline">\(M \times K \timesK\)</span>。相应的公式可以描述为</p><p><span class="math display">\[V_{n,:,:} = U * F^{(N)}, n \in \{1, ... , N\}\]</span></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023525171933.png" /></p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Conv Kernel</tag>
      
      <tag>PCA</tag>
      
      <tag>BSConv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Group_conv_and_DW</title>
    <link href="/posts/f5513a30/"/>
    <url>/posts/f5513a30/</url>
    
    <content type="html"><![CDATA[<h1 id="一常规卷积操作">一、常规卷积操作</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510211346.png" /></p><p>在图中，输入的特征图大小为 H * W * 4 卷积核个数为 2个，每个卷积核的大小为 K * K * 4 输出的特征图大小为 H' * W' * 2</p><h1 id="二分组卷积">二、分组卷积</h1><p>！！！！ 常规卷积就是组数为 1 的分组卷积</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510212117.png" /></p><p>将输入的特征图分为两组，每组的大小为 H * W * 2那么每组中就只需要一个卷积核，且这个卷积核的大小为 K * K * 2但是输出的特征图大小依旧是 H' * W' * 2</p><p>这样就达到了减少计算量的目的</p><p>缺点和解决方案：对于需要考虑所有输入特征图信息的情况，分组卷积会降低模型的性能，对于这个问题，常常在两个分组卷积之间加入Channel_Shuffle模块打乱通道顺序，从而实现不同分组间的信息交换。</p><p>总体上来看如下图所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510210044.png" /></p><h1 id="三深度可分离卷积">三、深度可分离卷积</h1><p>常规的卷积过程</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510213110.png" /></p><p>对于一张5×5像素、三通道彩色输入图片（shape为5×5×3）。经过3×3卷积核的卷积层（假设输出通道数为4，则卷积核shape为3×3×3×4），最终输出4个特征图</p><p>此时，卷积层共4个卷积核，每个卷积核有3个通道，每个通道的大小为3×3。因此卷积层的参数数量可以用如下公式来计算：N_std = 4 × 3 × 3 × 3 = 108</p><p>深度可分离卷积有两个过程，第一步是逐通道卷积</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510213635.png" /></p><p>卷积层的参数数量：N_depthwise = 3 × 3 × 3 = 27</p><p>第二步是逐点卷积</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023510213755.png" /></p><p>其中的卷积核大小为 1 * 1 * 3 * 4</p><p>N_pointwise = 1 × 1 × 3 × 4 = 12</p><p>那么总参数只有 N_depthwise + N_pointwise = 39</p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Group Conv</tag>
      
      <tag>DW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GhostNet</title>
    <link href="/posts/68488c49/"/>
    <url>/posts/68488c49/</url>
    
    <content type="html"><![CDATA[<h1 id="一轻量化网络结构">一、轻量化网络结构</h1><p>目的就是减少网络的计算量</p><h2 id="分组卷积">1. 分组卷积</h2><p>将输入特征图按通道均分为 g 组，然后对每一组进行常规卷积</p><p>由于分组后，每组输入特征图的通道数为 <spanclass="math inline">\(\frac{C_{in}}{g}\)</span>，所以每个卷积核的通道数也降低到 <spanclass="math inline">\(\frac{C_{in}}{g}\)</span></p><p>由于每组内进行的是常规卷积，所以每组至少需要一个卷积核，即分组卷积输出通道数至少为g，如果每组有 n 个卷积核，则输出 <span class="math inline">\(C_{out} = n\times g, n \ge 1\)</span>, 所以输出通道数是分组数的整数倍</p><p>综上所述，分组卷积中要求输入和输出通道数均能整除分组数 g</p><p>分组卷积的运算量和参数量的减少，归根结底是一个卷积核本身通道数减少为原来的g 分之一</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023418115013.png" /></p><h2 id="深度可分离卷积">2. 深度可分离卷积</h2><p>一种极致的分组卷积：当分组数等于输入通道数，且等于输出通道数，即<span class="math inline">\(g=C_{in}=C_{out}\)</span>时，我们把分组卷积称为深度可分离卷积,此时每个输出特征图仅仅与一个输入特征图相关，输入和输出一一对应。</p><p>由于深度可分离卷积每个输出通道仅由输入的一个通道得来，缺乏了输入通道之间的信息交换，所以通常在后面加一个1x1卷积来实现通道间的信息交换。</p><h1 id="二ghostnet">二、GhostNet</h1><h2 id="动机">1. 动机</h2><p>卷积的目的就是生成多个特征图，要减少卷积操作的运算量，在之前的网络结构中使用了分组卷积和深度可分离卷积的方法，这些是使用新的运算操作来替换掉传统的卷积操作。</p><p>GhostNet这篇文件核心就是观察到通过传统卷积方式得到的特征图之间存在相似。那么能不能通过一种特殊的方式直接利用一个特征图生成另一个与之相似的特征图。</p><h2 id="ghost-module">2. Ghost Module</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023418101105.png" /></p><p>结合上图，传统卷积是 Input 经过 (a) 中卷积层得到通道数为 n 的Output。</p><p>在 Ghost Module 中，Input 先经过传统卷积得到通道数为 m的特征图，但是最终需要的 Output 是 n 的通道数，Ghost Module 就需要把 m个通道扩展到 n 个通道。</p><p>论文中提到对每个固有特征图进行一系列的线性变换生成 s个特征图。那么就有等式</p><p><span class="math display">\[n = m \times s\]</span></p><p>如何实现扩充操作如下列式子所示：</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023418101853.png" /></p><p><span class="math inline">\(y^{&#39;}_{i}\)</span>表示由传统卷积得到的第 <span class="math inline">\(i\)</span>个通道的特征图</p><p><span class="math inline">\(y_{ij}\)</span> 表示由第 <spanclass="math inline">\(i\)</span> 个通道得到的第 <spanclass="math inline">\(j\)</span> 个特征图</p><p><span class="math inline">\(\Phi_{i,j}\)</span>表示线性变换，是指将第 <span class="math inline">\(i\)</span>个通道的特征图，经过线性变换得到第 <spanclass="math inline">\(j\)</span> 个特征图</p><p>？？？疑问 ？？？</p><ul><li><p>怎么选择 <span class="math inline">\(y^{&#39;}_{i}\)</span> ,也就是怎么得到模块中所需要的通过传统卷积产生的特征图？</p></li><li><p>线性变换的具体操作是什么？</p></li></ul><p>在代码中可以看见下面部分</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2023418111319.png" /></p><p>传统卷积得到的特征图和线性变换得到的特征图各占一半</p><p>那么通过代码可以看见所谓的线性变换就是进行了深度可分离卷积</p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>轻量化网络结构</tag>
      
      <tag>GhostNet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KPN</title>
    <link href="/posts/a8518af0/"/>
    <url>/posts/a8518af0/</url>
    
    <content type="html"><![CDATA[<h1 id="一研究背景">一、研究背景</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202335152515.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202335152336.png" /></p><p>相比起基于 FCN网络的文本边缘检测网络，KPN网络可以更好地处理文本之间的间隔。</p><h1 id="二方法流程">二、方法流程</h1><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337154131.png" /></p><h2 id="特征提取">1. 特征提取</h2><p>FCN 和 FPN</p><p><ahref="https://blog.csdn.net/Geeksongs/article/details/107573166">FCN(全卷积神经网络)介绍</a></p><p><ahref="https://blog.csdn.net/Geeksongs/article/details/107573166">FPN(特征金字塔神经网络)介绍</a></p><p>特征提取网络有两个输入：图片和位置信息</p><p>位置信息怎么来的？</p><p>对图片中每一个像素点进行处理，从而生成两个通道的特征图。</p><p>每个像素点具有关于 x 轴和 y 轴的位置信息，每个像素点的 x轴生成一个通道，y轴生成一个通道。位置大小范围转换为 <spanclass="math inline">\([-1,1]\)</span>, 即在坐标原点处的像素点关于 x轴的值为 -1。</p><p>具体计算方法如下图所示。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337141119.png" /></p><p>其中 <span class="math inline">\(w, h\)</span>表示输出特征图的宽度和高度，<span class="math inline">\(i\)</span>表示第 <span class="math inline">\(i\)</span> 个像素点。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337142004.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337142234.png" /></p><h2 id="核建议">2. 核建议</h2><p>预测中心图获取文本的连通分量,获取连通分量是因为对于一个文本实例存在冗余点</p><p>分量得分点最高的像素作为关键点？？？</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337144632.png" /></p><p>关键点对应位置的特征图为预测核</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337145036.png" /></p><h2 id="实例无关特征图">3. 实例无关特征图</h2><p>嵌入特征图与预测核进行卷积得到实例无关特征图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337150815.png" /></p><p>其中 <span class="math inline">\(O\)</span>表示输出的实例无关特征图，每个通道对应一个文本的预测(<spanclass="math inline">\(p_i\)</span>)</p><p><span class="math inline">\(K\)</span> 表示得到的卷积核</p><p><span class="math inline">\(E\)</span> 表示预测中心图(<spanclass="math inline">\(F_s\)</span>) 和 嵌入特征图(<spanclass="math inline">\(F_p\)</span>) 的卷积结果</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337151133.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337145510.png" /></p><h2 id="轮廓生成">4. 轮廓生成</h2><p>通过预先设定的阈值对预测出的实例无关特征图进行二值化处理，得到待检测文本的轮廓</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337150608.png" /></p><h2 id="其余部分内容">5. 其余部分内容</h2><p>对于在找到的每一个预测中心图中找到的点，实际上对应的是一个文本实例。所以由此得到的核建议之间应该尽量保持正交关系，这样就可以在一定程度上避免不同文本实例之间的干扰。</p><p>由此可以得到一个函数</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337152103.png" /></p><p><span class="math inline">\(K\)</span> 表示得到的卷积核，<spanclass="math inline">\(k_i\)</span>表示由预测中心图中的一个点得到的核建议。</p><p>对此提出了一个损失函数 <spanclass="math inline">\(L_{OLL}\)</span></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337152407.png" /></p><p>其中 <span class="math inline">\(I\)</span> 表示单位矩阵</p><p><span class="math inline">\(L_{dice}\)</span>表示骰子损失</p><p><spanclass="math inline">\(L_{BCE}\)</span>表示二进制交叉熵损失。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337152746.png" /></p><h1 id="三不足">三、不足</h1><p>对场景文本复杂和小文本的环境下存在漏检的情况.</p><p>红色表示实际情况，绿色表示 KPN 检测结果</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337153111.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202337153216.png" /></p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
      <tag>文本边缘检测</tag>
      
      <tag>KPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unprojecting_text_with_ellipses算法分析</title>
    <link href="/posts/534c861e/"/>
    <url>/posts/534c861e/</url>
    
    <content type="html"><![CDATA[<p>原文链接 <ahref="https://mzucker.github.io/2016/10/11/unprojecting-text-with-ellipses.html">https://mzucker.github.io/2016/10/11/unprojecting-text-with-ellipses.html</a></p><h1 id="一单应性">一、单应性</h1><h2 id="图片实例">1. 图片实例</h2><p>将普通 2D 文本图片转换成类似 3D 文本图片的映射过程叫做单应性。</p><p>借用原文中星球大战的图片, 这就是转换之后的图片.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222170801.png" /></p><h2 id="数学表达式">2. 数学表达式</h2><p>对每个像素点而言, 在 2D 到 3D 转换过程中满足下列式子</p><p><span class="math display">\[x&#39; = \frac{ax+by+c}{gx+hy+1}, y&#39;=\frac{dx+ey+f}{gx+hy+1}\]</span></p><p><span class="math inline">\(x,y\)</span> 表示转换前的像素坐标</p><p><span class="math inline">\(x&#39;,y&#39;\)</span>表示转换后的像素坐标</p><p>有未知参数 <span class="math inline">\(a,b,c,d,e,f,g,h\)</span></p><p>这些参数控制着图片是如何转换的, 其中就有</p><p><span class="math inline">\(a\)</span> 控制图片左右拉伸, <spanclass="math inline">\(e\)</span> 控制图片上下拉伸</p><p><span class="math inline">\(b,d\)</span> 控制图片左右倾斜,类似于矩阵变为平行四边形的过程</p><p><span class="math inline">\(c\)</span> 控制图片左右移动, <spanclass="math inline">\(f\)</span> 控制图片上下移动</p><p><span class="math inline">\(g\)</span> 控制图片左右透视失真, <spanclass="math inline">\(h\)</span> 控制图片透视失真</p><p>上面列出的星球大战字幕图片就是由单由参数 <spanclass="math inline">\(h\)</span> 控制转换所得</p><h1 id="二算法思路">二、算法思路</h1><h2 id="算法流程">1. 算法流程</h2><p>我们可以找到一个完美的算法求出式子中的所有参数,然后就能将图片还原,但是这是理想状态. 所以原文提出了一个很棒的思路.</p><p>我们现在拍摄了一张照片, 然后对它进行三步骤的处理.</p><p>步骤一 : 解决透视失真的问题</p><p>步骤二 : 解决图片旋转的问题</p><p>步骤三 : 解决图片中文字倾斜的问题</p><h2 id="透视失真具体解决方案">2. 透视失真具体解决方案</h2><p>首先通过 opencv 获取到图片中字符的轮廓 (这一步可能会有其他干扰).</p><p>作者提出了一个观点,当处理后的图片中每一个字符各占面积几乎相等时就认为解决了透视失真这个问题.转换成数学表达式则是</p><p>通过找到 <span class="math inline">\(g,h\)</span> 两个参数, 使得</p><p><span class="math display">\[S_{total} = \sum_{i=1}^{n}(A_i - \bar{A})^2\]</span></p><p>最小, 其中 <span class="math inline">\(S_{total}\)</span>表示面积差总平方和, <span class="math inline">\(A_i\)</span> 表示第<span class="math inline">\(i\)</span> 个字符的面积, <spanclass="math inline">\(\bar{A}\)</span> 表示字符平均面积.</p><p>!!!! 这里更准确一点应该被称为轮廓面积, 而不是字符面积, 因为通过opencv 会检测到其他干扰项. 我们假设最佳情况就是只检测到字符.以下步骤都是居于此来完成.</p><p>椭圆方程</p><p><span class="math display">\[f(x,y) = Ax^2 + Bxy + Cy^2 + Dx + Ey + F = 0\]</span></p><p>通过一定手段使得列入计算的字符转换成相同面积的椭圆,用椭圆方程中的<spanclass="math inline">\(A,B,C,D,E,F\)</span>六个参数来描述该字符.由此构建出一个矩阵用于解决透视失真问题.</p><h2 id="图片旋转具体解决方案">3. 图片旋转具体解决方案</h2><p>霍夫变换</p><h2 id="图片文字倾斜具体解决方案">4. 图片文字倾斜具体解决方案</h2><p>用凸包表示一个字符, 构建一个矩阵使得图片中字符宽度最小化.构建出的矩阵中的参数就是单应性所提到的参数 <spanclass="math inline">\(b,d\)</span></p><h1 id="三实际处理过程">三、实际处理过程</h1><p>输入图片</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195025.png" /></p><p>获取字符轮廓和面积</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195105.png" /></p><p>字符轮廓进行椭圆化处理, 解决透视失真</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195212.png" /></p><p>霍夫变换, 解决图片旋转问题</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195351.png" /></p><p>凸包代理, 解决文字倾斜问题</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195425.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195717.png" /></p><p>处理结果</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195925.png" /></p><h1 id="四算法问题">四、算法问题</h1><p>当使用如下图片进行处理时</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200107.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200225.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200250.png" /></p><p>在处理这个图片时就会误把边框进行处理, 且不能检测到所有字符.</p><h1 id="五ocr识别">五、OCR识别</h1><p>未处理的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200640.png" /></p><p>处理后的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200736.png" /></p><p>未处理的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200829.png" /></p><p>处理后的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222200854.png" /></p><p>未处理的图片识别 (不能识别)</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222195025.png" /></p><p>处理后的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222201034.png" /></p><p>未处理的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222201121.png" /></p><p>处理后的图片识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221222201204.png" /></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像增强</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Document-Dewarping</title>
    <link href="/posts/2d5a4e5a/"/>
    <url>/posts/2d5a4e5a/</url>
    
    <content type="html"><![CDATA[<h1 id="基于文本行优化的文档去皱">基于文本行优化的文档去皱</h1><p>原文地址：http://ispl.snu.ac.kr/bskim/DocumentDewarping/</p><p>基本原理：</p><p>通过找到文档图片中文本行的位置信息来对整个文档图片进行调整处理</p><p>原文效果图：</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134256.png" /></p><h1 id="测试">测试</h1><p>误找文本行</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134418.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134455.png" /></p><p>未找到文本行</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134521.png" /></p><p>找到文本行</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134551.png" /></p><p>？？？明明找到文本行但是仍旧不能对图片进行处理</p><p>这里将使用原文中的图片进行测试, 得到如下效果图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129134806.png" /></p><p>可以发现和原文中的示例图片处理结果大致一致,但是原文中的处理结果效果明显要好些</p><h1 id="问题分析">问题分析</h1><p>观察到运行脚本中有一部分注释</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129135023.png" /></p><p>参考原文中的内容</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129135128.png" /></p><p>可以知道 [focal length] (焦距) 参数需要通过原图片的 EXIF 标签获取,如果是裁剪后的图片则不行。这里还需要注意的是,目前焦距的值只能通过手动输入, 并且需要使用 35mm 焦距。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022129141406.png" /></p><p>发现并无变化, 无法复现原文中的效果</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像增强</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>送给姐姐的~</title>
    <link href="/posts/d93c4739/"/>
    <url>/posts/d93c4739/</url>
    
    <content type="html"><![CDATA[<p>现在是 2022 年 11 月 25 日，虽然 QQ 的火花显示 100 天，但是我还是把2022 年 11 月 26日当做和姐姐认识的第一百天。当姐姐看见这个的时候应该是早上或者刚过零点吧。那么，请姐姐继续看下去吧！</p><p>我相信人生会有很多的相遇，有的是无意，而有的是故意为之。不过呢，只要遇见，那便就是上上签。以前总是在说，喜欢是喜欢，在一起是在一起，爱是爱，这是三件不同的事情。不过我很幸运呀，和姐姐在一起的这段时光我都感受到了！</p><p>人生里面有很多的 100 天，但是认识姐姐的 100天此生也只有一次。这是一个很好的开始呢，然后以后会有一千天，一万天。不止是会在这些特殊的日子，而是在和姐姐在一起的每一天都要开开心心。</p><p>虽然和姐姐有过争吵，不过还好没有失去姐姐。还反而坦白心声，被姐姐名正言顺地叫老婆那一刻我可开心了。名分当然重要啊，这是对另一半的肯定和信任，是愿意把余生几十年的光阴全部付诸到一个人身上的重大决定。从今以后姐姐就是我的唯一，我也是姐姐的唯一，互相成长互相扶持。</p><p>我想过和姐姐在一起的很多场景，如果在摩天轮上，我希望可以和姐姐看见快消失的夕阳；如果在电影院，我希望可以靠着姐姐的肩膀到最后电影结束；如果在人潮涌动的大街上，我希望姐姐可以牵着我的手，然后告诉我，“老婆走快一点”。。。。。。还有好多好多我和姐姐在一起的画面，这些画面一定要和姐姐一一实现。</p><p>我怕自己做错事，怕别人会对自己有异样的眼光，怕失去那些自己觉得很珍贵的，但是在别人眼中确实微不足道的东西。为了让自己不那么伤心难过，我就把这些事情藏起来，不给别人说。所以每每在深夜的时候我都会伤春悲秋，姐姐的出现就像我世界的光吧。虽然但是，我好像已经很久很久没有深夜一个人难受了。</p><p>未来的路想来应该还是充满了未知和挑战，我会和姐姐好好走下去的，一起经历一个又一个一百天。</p><p>我喜欢看别人的故事，有的人正在相遇，有的人正在相爱，有的人经历离别，有的人久别重逢。我不知道为什么，我和姐姐在一起的时候总觉得没有谁比我们更开心，更快乐。我也更愿意给姐姐说出我的心里话，表达出对姐姐的爱意，我害怕接打电话，我害怕出门吃饭点餐，我害怕别人问我接下来我们要去干嘛。我太在乎别人的感受，也总是在一昧地讨好别人，我常常处于这样的困境之中。</p><p>当我回忆往事，我记得在球桌下躲着的我，迟到了而不敢进教室的我，因为考试没考好而哭泣的我，因为说错一句话而自责很久的我。我望着自己，望着自己的斑斑点点，所以我开始读书，开始思考，开始用现实里面的东西来麻醉自己。我是个缺少安全感的小朋友，想想需要考虑到的诸多事情，我脑袋里面全是乱麻。</p><p>不过还好，姐姐出现让我不用考虑这么多的事情。我内心的柔弱就交给姐姐大人来保护吧！</p><p>还有好多好多的话没和姐姐说，还有好多好多的事情没有和姐姐一起做。当然也希望姐姐在学业上有所成，然后顺利升学，之后考研上岸，完成姐姐比较重要的梦想。不过我想，姐姐最重要的梦想应该是把我娶回家吧！</p><p>当然呀！我也不会忘记提升我自己的，然后就会更加地黏着姐姐~</p><p>有人住高楼，有人在深沟，有人光芒万丈，有人一身锈。世人千万种，浮云莫去求，斯人若彩虹，遇上方知有。</p><p>遇见姐姐的第 100 天~~~~~</p>]]></content>
    
    
    <categories>
      
      <category>给姐姐的专栏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过DewarpNet解决图片扭曲问题</title>
    <link href="/posts/136eb017/"/>
    <url>/posts/136eb017/</url>
    
    <content type="html"><![CDATA[<h1 id="一论文">一、论文</h1><p>DewarpNet:使用堆叠的三维和二维回归网络进行单幅图像文件纠正</p><p>论文地址: <ahref="https://paperswithcode.com/paper/dewarpnet-single-image-document-unwarping">https://paperswithcode.com/paper/dewarpnet-single-image-document-unwarping</a></p><p>代码地址: <ahref="https://github.com/cvlab-stonybrook/DewarpNet">https://github.com/cvlab-stonybrook/DewarpNet</a></p><h1 id="二效果展示">二、效果展示</h1><h2 id="论文图片效果展示">2.1 论文图片效果展示</h2><p>从上往下依次为原图, 三维坐标图, 矫正图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123124126.png" /></p><h2 id="代码自带测试图效果展示">2.2 代码自带测试图效果展示</h2><p>左侧为输入图片, 右侧为输出图片</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123124452.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123124555.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123124628.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123124653.png" /></p><h2 id="自己的测试图片效果展示">2.3 自己的测试图片效果展示</h2><p>左侧为输入图片, 右侧为输出图片</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123125151.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123125205.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123125215.png" /></p><p>在自己的测试示例中,从上往下可以发现左侧有无黑色边对矫正效果有一定的影响,且黑色边位置对矫正结果也有一定影响。</p><h1 id="三迭代处理">三、迭代处理</h1><p>对同一张图片反复使用代码进行矫正, 发现没有明显变化</p><p>第一次迭代：</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123130332.png" /></p><p>第二次迭代：</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221123130456.png" /></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cv</tag>
      
      <tag>Image Force</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档图片阴影去除</title>
    <link href="/posts/67354c5f/"/>
    <url>/posts/67354c5f/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>在 OCR 的预处理中需要对文档图片中有阴影的部分进行消除,在此之前使用过图像增强的算法对其进行处理, 本质就是二值化的处理.</p><p>在这篇文章中使用了新的方法进行处理,并且将新方法和老方法之间进行了对比.在文章最后还有使用模型对图片进行处理的效果.</p><h1 id="二通过-gamma-校正来去除阴影-旧方法">二、通过 Gamma校正来去除阴影 (旧方法)</h1><p>这是之前使用的旧方法, 但是在移植到安卓的时候的时候出现了问题.</p><h2 id="原理">2.1 原理</h2><p>对图片进行二值化处理之后, 会产生黑色的噪声, Gamma矫正其实是对二值化后的图片进行一个对比度的增强.</p><h2 id="c-代码">2.2 C++ 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><br><span class="hljs-comment">//Gamma校正 fGamaa=0.45是常用值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GammaCorrection</span><span class="hljs-params">(Mat&amp; src, Mat&amp; dst, <span class="hljs-type">float</span> fGamma)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CV_Assert</span>(src.data);<br><span class="hljs-comment">// accept only char type matrices</span><br><span class="hljs-built_in">CV_Assert</span>(src.<span class="hljs-built_in">depth</span>() != <span class="hljs-built_in">sizeof</span>(uchar));<br><span class="hljs-comment">// build look up table</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> lut[<span class="hljs-number">256</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>&#123;<br>lut[i] = <span class="hljs-built_in">saturate_cast</span>&lt;uchar&gt;(<span class="hljs-built_in">pow</span>((<span class="hljs-type">float</span>)(i / <span class="hljs-number">255.0</span>), fGamma) * <span class="hljs-number">255.0f</span>);<br>&#125;<br><br>dst = src.<span class="hljs-built_in">clone</span>();<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> channels = dst.<span class="hljs-built_in">channels</span>();<br><span class="hljs-keyword">switch</span> (channels)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><br>MatIterator_&lt;uchar&gt; it, end;<br><span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;uchar&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;uchar&gt;(); it != end; it++)<br>*it = lut[(*it)];<br><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><br>MatIterator_&lt;Vec3b&gt; it, end;<br><span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;Vec3b&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;Vec3b&gt;(); it != end; it++)<br>&#123;<br>(*it)[<span class="hljs-number">0</span>] = lut[((*it)[<span class="hljs-number">0</span>])];<br>(*it)[<span class="hljs-number">1</span>] = lut[((*it)[<span class="hljs-number">1</span>])];<br>(*it)[<span class="hljs-number">2</span>] = lut[((*it)[<span class="hljs-number">2</span>])];<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>string addr = <span class="hljs-string">&quot;C:\\Users\\YSXCC\\Desktop\\test.jpg&quot;</span>;<br>Mat image = <span class="hljs-built_in">imread</span>(addr);<br><span class="hljs-comment">//划分算法</span><br><span class="hljs-comment">//如果混合色与基色相同则结果色为白色</span><br><span class="hljs-comment">//如混合色为白色则结果色为基色不变</span><br><span class="hljs-comment">//如混合色为黑色则结果色为白色</span><br>Mat src = image.<span class="hljs-built_in">clone</span>();<br>src.<span class="hljs-built_in">convertTo</span>(src, CV_32FC3, <span class="hljs-number">1.0</span> / <span class="hljs-number">255</span>);<br>Mat gauss;<br>Mat dst = src.<span class="hljs-built_in">clone</span>();<br><span class="hljs-built_in">GaussianBlur</span>(src, gauss, <span class="hljs-built_in">Size</span>(<span class="hljs-number">101</span>, <span class="hljs-number">101</span>), <span class="hljs-number">0</span>);<br>dst = src / gauss;<br>dst.<span class="hljs-built_in">convertTo</span>(dst, CV_8UC3, <span class="hljs-number">255</span>);<br><span class="hljs-comment">//gamma变换</span><br>Mat ss;<br>Mat matGamma;<br>ss = dst.<span class="hljs-built_in">clone</span>();<br><span class="hljs-built_in">GammaCorrection</span>(ss, matGamma, <span class="hljs-number">1.5</span>);<br><span class="hljs-comment">//显示最终结果</span><br><span class="hljs-built_in">imwrite</span>(<span class="hljs-string">&quot;C:\\Users\\YSXCC\\Desktop\\test_out.jpg&quot;</span>, matGamma);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果对比图">2.3 运行结果对比图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221110143358.png" /></p><h1id="三通过自适应阈值化来去除阴影-新方法">三、通过自适应阈值化来去除阴影(新方法)</h1><h2 id="原理-1">3.1 原理</h2><p>自适应阈值,则是根据像素的邻域块的像素值分布来确定该像素位置上的二值化阈值.这样做的好处：</p><ol type="1"><li><p>每个像素位置处的二值化阈值不是固定不变的,而是由其周围邻域像素的分布来决定的.</p></li><li><p>亮度较高的图像区域的二值化阈值通常会较高,而亮度低的图像区域的二值化阈值则会相适应的变小.</p></li><li><p>不同亮度、对比度、纹理的局部图像区域将会拥有相对应的局部二值化阈值.</p></li></ol><h2 id="代码">3.2 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">Mat <span class="hljs-title">ImageSharp</span><span class="hljs-params">(<span class="hljs-type">const</span> Mat&amp; src, <span class="hljs-type">int</span> nAmount)</span> </span>&#123;<br>    Mat dst;<br>    <span class="hljs-type">double</span> sigma = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">float</span> amount = nAmount / <span class="hljs-number">100.0f</span>;<br><br>    Mat imgBlurred;<br>    cv::<span class="hljs-built_in">GaussianBlur</span>(src, imgBlurred, cv::<span class="hljs-built_in">Size</span>(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), sigma, sigma, <span class="hljs-number">4</span>);<br>    Mat temp_sub;<br><br>    cv::<span class="hljs-built_in">subtract</span>(src, imgBlurred, temp_sub);<br>    cv::<span class="hljs-built_in">addWeighted</span>(src, <span class="hljs-number">1</span>, temp_sub, amount, <span class="hljs-number">0</span>, dst);<br>    <span class="hljs-keyword">return</span> dst;<br>&#125;<br><br><span class="hljs-function">Mat <span class="hljs-title">ReduceBackGroundAlgorithm</span><span class="hljs-params">(<span class="hljs-type">const</span> Mat&amp; src, <span class="hljs-type">int</span> flag)</span> </span>&#123;<br>    Mat gauss, dst2, dst3;<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123;<br>        cv::<span class="hljs-built_in">GaussianBlur</span>(src, gauss, cv::<span class="hljs-built_in">Size</span>(<span class="hljs-number">31</span>, <span class="hljs-number">31</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cv::<span class="hljs-built_in">blur</span>(src, gauss, cv::<span class="hljs-built_in">Size</span>(<span class="hljs-number">101</span>, <span class="hljs-number">101</span>));<br>    &#125;<br><br>    cv::<span class="hljs-built_in">divide</span>(src, gauss, dst2);<br><br>    dst2 = <span class="hljs-built_in">ImageSharp</span>(dst2, <span class="hljs-number">101</span>);<br>    dst2.<span class="hljs-built_in">convertTo</span>(dst3, CV_8UC1, <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">return</span> dst3;<br>&#125;<br><br><span class="hljs-function">std::vector&lt;string&gt; <span class="hljs-title">readImgs</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; path)</span> </span>&#123;<br>    vector&lt;string&gt; img_path;<br><br>    vector&lt;cv::String&gt; fn;<br>    <span class="hljs-built_in">glob</span>(path, fn, <span class="hljs-literal">false</span>);<br>    <span class="hljs-type">size_t</span> count = fn.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>        img_path.<span class="hljs-built_in">push_back</span>(fn[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> img_path;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showImg</span><span class="hljs-params">(<span class="hljs-type">const</span>::cv::Mat&amp; img, std::string&amp; w_name)</span> </span>&#123;<br>    <span class="hljs-built_in">CV_Assert</span>(!img.<span class="hljs-built_in">empty</span>());<br>    cv::<span class="hljs-built_in">namedWindow</span>(w_name, cv::WINDOW_NORMAL);<br>    cv::<span class="hljs-built_in">imshow</span>(w_name, img);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getbw</span><span class="hljs-params">(<span class="hljs-type">const</span> cv::Mat&amp; src, Mat&amp; dst, <span class="hljs-type">double</span> th = <span class="hljs-number">15</span>)</span> </span>&#123;<br>    cv::Mat img_src = src.<span class="hljs-built_in">clone</span>();<br>    <span class="hljs-keyword">if</span> (img_src.cols &lt; <span class="hljs-number">1500</span>) &#123;<br>        <span class="hljs-built_in">resize</span>(img_src, img_src, img_src.<span class="hljs-built_in">size</span>() * <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, cv::INTER_CUBIC);<br>    &#125;<br><br>    Mat gray, res, res1;<br>    cv::<span class="hljs-built_in">cvtColor</span>(img_src, gray, COLOR_BGR2GRAY);<br><br>    cv::<span class="hljs-built_in">adaptiveThreshold</span>(gray, res, <span class="hljs-number">255</span>, ADAPTIVE_THRESH_MEAN_C, <span class="hljs-number">0</span>, <span class="hljs-number">31</span>, th);<br><br>    res.<span class="hljs-built_in">convertTo</span>(res1, CV_32FC1, <span class="hljs-number">1.0</span> / <span class="hljs-number">255</span>);<br><br>    dst = <span class="hljs-built_in">ReduceBackGroundAlgorithm</span>(res1, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    string path = <span class="hljs-string">&quot;C:\\Users\\YSXCC\\Desktop\\test.jpg&quot;</span>;<br>    string save_path = <span class="hljs-string">&quot;C:\\Users\\YSXCC\\Desktop\\result&quot;</span>;<br>    std::vector&lt;string&gt; imgs = <span class="hljs-built_in">readImgs</span>(path);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; imgs.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        Mat src = <span class="hljs-built_in">imread</span>(imgs[i]);<br>        <span class="hljs-keyword">if</span> (src.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br><br>        std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; src.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br><br>        cv::Mat result;<br>        <span class="hljs-built_in">getbw</span>(src, result);<br><br>        string save_filename = save_path + <span class="hljs-string">&quot;res_&quot;</span> + <span class="hljs-built_in">to_string</span>(i) + <span class="hljs-string">&quot;.png&quot;</span>;<br>        cv::<span class="hljs-built_in">imwrite</span>(save_filename, result);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;finish &quot;</span> + std::<span class="hljs-built_in">to_string</span>(i) &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">27</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果对比图-1">3.3 运行结果对比图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221110143920.png" /></p><h1 id="四新旧方法对比图">四、新旧方法对比图</h1><p>左边为旧方法的效果图, 右边为新方法的效果图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221110144159.png" /></p><p>可以观察到, 新方法处理图片后会在图片中留下明显黑点。</p><p>当阴影部分非常严重, 甚至整张图片光线偏暗的时候, 新方法效果就会变差.原图如下所示:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221110144802.jpg" /></p><p>对比图如下所示:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221110144710.png" /></p><p>新方法对阴影严重的图片处理后效果不及旧方法.可以发现旧方法处理图片后会留下很明显的边框,新方法则使得阴影下的文字不可识别, 且还是会有明显边框.</p><h1 id="五bedsr-net-去除阴影-模型">五、BEDSR-Net 去除阴影 (模型)</h1><p>..........</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PaddleOCR服务化部署</title>
    <link href="/posts/c7ec5f84/"/>
    <url>/posts/c7ec5f84/</url>
    
    <content type="html"><![CDATA[<h1 id="一分析与选择">一、分析与选择</h1><p>PaddleOCR 提供 2 种服务部署方式：</p><p>一种是 PaddleServing 的部署方式, 仅使用 CPU 推理预测在 Windows 和Linux都能进行部署.</p><p>若要使用 GPU 进行推理预测, 在 Windows 上只能使用 Docker 进行部署(这步没有进行尝试).</p><p>在 Linux 上可以手动部署, 也可以使用 Docker 部署(这步没有进行尝试).</p><p>另一种是 PaddleHub 的部署方式, 由于在 Windows 上设置CUDA_VISIBLE_DEVICES=0 出现错误, 所以 PaddleHub 依旧部署到 Linux 上.</p><p>在 Linux 上使用 PaddleServing 手动部署的过程中,程序出现意外的错误,</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022091016.png" /></p><p>出现只能预测一部分图片的结果. 经过排除发现, 是 PaddleServing的部署方式占满所有显存.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022091313.png" /></p><p>以下表格为各种系统各种配置下不同的部署方式实现情况.</p><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">Windows/Linux CPU</th><th style="text-align: center;">Windows GPU</th><th style="text-align: center;">Linux GPU</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">PaddleServing</td><td style="text-align: center;">Success</td><td style="text-align: center;">No</td><td style="text-align: center;">显存不够</td></tr><tr class="even"><td style="text-align: center;">PaddleHub</td><td style="text-align: center;">No</td><td style="text-align: center;">显卡设置错误</td><td style="text-align: center;">Success</td></tr></tbody></table><p>其中 Success 表示成功部署, No 表示未尝试</p><p>在显存足够的情况下选择 PaddleServing 部署方式可以提高并发量,这里仅测试就选择相对简单的 PaddleHub 进行部署.</p><h1 id="二paddlehub-部署">二、PaddleHub 部署</h1><p>基于 <ahref="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/deploy/hubserving/readme.md">GithubPaddleOCR/PaddleHub 部署文档</a> 编写.</p><h2 id="gpu-环境描述">1. GPU 环境描述</h2><p>GPU : 1050Ti Mobile 4G</p><p>CUDA : 11.2 (Driver API Version: 11.4, Runtime API Version: 11.2)</p><p>cuDNN : 8.6</p><h2 id="快速启动服务">2. 快速启动服务</h2><p>以下操作默认下载了 PaddleOCR 项目并安装了 PaddleOCR 的 GPU 运行环境.安装教程 <ahref="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/quickstart.md">https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/quickstart.md</a></p><p>注意在 <a href="https://www.paddlepaddle.org.cn/">PaddlePaddle官网</a> 去查找需要的 paddlepaddle-gpu 版本.</p><h3 id="准备环境">2.1 准备环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装paddlehub  </span><br><span class="hljs-comment"># paddlehub 需要 python&gt;3.6.2</span><br>pip3 install paddlehub==2.1.0 --upgrade -i https://mirror.baidu.com/pypi/simple<br></code></pre></td></tr></table></figure><h3 id="下载推理模型">2.2 下载推理模型</h3><p>安装服务模块前, 需要准备推理模型并放到正确路径.默认使用的是PP-OCRv3模型, 默认模型路径为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">检测模型：./inference/ch_PP-OCRv3_det_infer/<br>识别模型：./inference/ch_PP-OCRv3_rec_infer/<br>方向分类器：./inference/ch_ppocr_mobile_v2.0_cls_infer/<br></code></pre></td></tr></table></figure><p>需要注意! 此步的当前路径是在 PaddleOCR/ 下.</p><p>模型路径可在 params.py 中查看和修改. 更多模型可以从 PaddleOCR提供的模型库 <ahref="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/models_list.md">PP-OCR</a>下载, 也可以替换成自己训练转换好的模型.</p><p>需要注意! params.py 的路径是PaddleOCR/deploy/hubserving/xxx/params.py .</p><h3 id="安装服务模块">2.3 安装服务模块</h3><p>! 执行命令的当前路径实在 PaddleOCR/ 下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装检测服务模块：  </span><br>hub install deploy/hubserving/ocr_det/<br><br><span class="hljs-comment"># 或，安装分类服务模块：  </span><br>hub install deploy/hubserving/ocr_cls/<br><br><span class="hljs-comment"># 或，安装识别服务模块：  </span><br>hub install deploy/hubserving/ocr_rec/<br><br><span class="hljs-comment"># 或，安装检测+识别串联服务模块：  </span><br>hub install deploy/hubserving/ocr_system/<br></code></pre></td></tr></table></figure><p>这里我们可以只选择</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hub install deploy/hubserving/ocr_system/<br></code></pre></td></tr></table></figure><h3 id="启动服务">2.4 启动服务</h3><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 0 号显卡</span><br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0<br>hub serving start -c deploy/hubserving/ocr_system/config.json<br></code></pre></td></tr></table></figure><h2 id="发送预测请求">3. 发送预测请求</h2><p>配置好服务端, 可使用以下命令发送预测请求, 获取预测结果:</p><p>python tools/test_hubserving.py --server_url=server_url--image_dir=image_path</p><p>需要给脚本传递2个参数：</p><ul><li><strong>server_url</strong>: 服务地址, 格式为<br /><code>http://[ip_address]:[port]/predict/[module_name]</code><br />例如, 如果使用配置文件启动分类, 检测、识别, 检测 + 分类 + 识别 3阶段服务, 那么发送请求的 url 将分别是:<br /><code>http://127.0.0.1:8865/predict/ocr_det</code><code>http://127.0.0.1:8866/predict/ocr_cls</code><br /><code>http://127.0.0.1:8867/predict/ocr_rec</code><br /><code>http://127.0.0.1:8868/predict/ocr_system</code><br /></li><li><strong>image_dir</strong>: 测试图像路径,可以是单张图片路径,也可以是图像集合目录路径<br /></li><li><strong>visualize</strong>: 是否可视化结果, 默认为 False<br /></li><li><strong>output</strong>：可视化结果保存路径, 默认为<code>./hubserving_result</code></li></ul><p>访问示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python tools/test_hubserving.py --server_url=http://127.0.0.1:8868/predict/ocr_system --image_dir=./doc/imgs/ --visualize=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="自定义修改服务模块">4. 自定义修改服务模块</h2><p>如果需要修改服务逻辑, 你一般需要操作以下步骤(以修改<code>ocr_system</code>为例):</p><ul><li>1、停止服务</li></ul><p><code>hub serving stop --port/-p XXXX</code></p><ul><li>2、到相应的<code>module.py</code>和<code>params.py</code>等文件中根据实际需求修改代码.</li></ul><p><strong>强烈建议修改后先直接运行<code>module.py</code>调试，能正确运行预测后再启动服务测试。</strong></p><ul><li>3、卸载旧服务包</li></ul><p><code>hub uninstall ocr_system</code></p><ul><li>4、安装修改后的新服务包</li></ul><p><code>hub install deploy/hubserving/ocr_system/</code></p><ul><li>5、重新启动服务</li></ul><p><code>hub serving start -m ocr_system</code></p><h1 id="三paddlehub-运行结果">三、PaddleHub 运行结果</h1><p>服务端测试</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022101147.png" /></p><p>客户端测试</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022101224.png" /></p><h1 id="四对接工作">四、对接工作</h1><p>通过观察代码可以了解到这样一个接口,使用其他编程语言发送这样的一个请求即可.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022101800.png" /></p><p>其中的 headers 为</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022102010.png" /></p><p>图片传输需转编码后发送</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/20221022102651.png" /></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PaddleOCR</tag>
      
      <tag>Android</tag>
      
      <tag>Serving</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PaddleOCR在文字检测方面上存在问题</title>
    <link href="/posts/9afdcc74/"/>
    <url>/posts/9afdcc74/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>在实现安卓项目的时候, 发现识别问题差强人意,但对于不同图片就出现了总体效果不好的结果.</p><p>可以很明显的发现对于很多图片出现了大部分文字无法检测到的问题.</p><p>在最开始考虑进行图片增强的操作, 发现对检测效果提升微乎其微.</p><p>正好 PaddleOCR 更新了版本并添加了新的检测算法 DB++.以此为导向来对这个项目进行优化.</p><h1 id="二基于-db-的模型训练">二、基于 DB++ 的模型训练</h1><p><ahref="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/algorithm_det_db.md">Github训练流程</a></p><p>我是基于百度的 AI Studio 平台进行训练的模型. 这个平台提供高算力显卡,但是在某些方面并不是很方便, 比如使用 Notebook 时最多只能后台运行 2 小时,使用脚本运行虽然可以后台运行 72 小时, 但是有很多</p><p>在训练前需要下载数据集和预训练模型(<ahref="https://paddleocr.bj.bcebos.com/dygraph_v2.1/en_det/ResNet50_dcn_asf_synthtext_pretrained.pdparams">下载地址</a>).</p><p>数据集可以在 AI Studio 中获得, 也可以单独下载 (<ahref="https://rrc.cvc.uab.es/?ch=4&amp;com=downloads">ICDAR2015</a>)</p><h2 id="启动训练">1. 启动训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 单机单卡训练 r50_db++ 模型</span><br>python3 tools/train.py -c configs/det/det_r50_db++_icdar15.yml \<br>     -o Global.pretrained_model=./pretrain_models/ResNet50_dcn_asf_synthtext_pretrained.pdparams<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 混合精度训练, 可以加快训练速度</span><br>python3 tools/train.py -c configs/det/det_r50_db++_icdar15.yml \<br>     -o Global.pretrained_model=./pretrain_models/ResNet50_dcn_asf_synthtext_pretrained.pdparams \<br>     Global.use_amp=True Global.scale_loss=1024.0 Global.use_dynamic_loss_scaling=True<br></code></pre></td></tr></table></figure><h2 id="断点训练">2. 断点训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 tools/train.py -c configs/det/det_r50_db++_icdar15.yml -o Global.checkpoints=./your/trained/model<br></code></pre></td></tr></table></figure><p>弥补了 AI Studio 中 Notebook 的缺点 (避免 PC 过热蓝屏造成与 AI Studio断联)</p><p>不过这个功能还没有测试过. 直到写这篇文章, 才发现到这项命令.</p><p>当时发现自己出现问题的时候就直接开始了重新训练, 非常浪费时间.因为训练一个模型, 使用 Nvidia Tesla V100 也会高达 20 小时左右.</p><h2 id="模型导出">3. 模型导出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 加载配置文件`det_r50_db++_icdar15.yml`，从`output/det_db`目录下加载`best_accuracy`模型，inference模型保存在`./output/det_db_inference`目录下</span><br>python3 tools/export_model.py -c configs/det/det_r50_db++_icdar15.yml -o Global.pretrained_model=<span class="hljs-string">&quot;./output/det_db/best_accuracy&quot;</span> Global.save_inference_dir=<span class="hljs-string">&quot;./output/det_db_inference/&quot;</span><br></code></pre></td></tr></table></figure><h2 id="结果分析">4. 结果分析</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926195434.jpg" /></p><p>效果惨不忍睹, 比不上任何一个现有模型的检测效果.所以使用新算法训练新模型这个想法暂时搁置.</p><h1 id="三不同模型组合">三、不同模型组合</h1><p>在最开始调研中就提到可以进行检测、识别和分类的模型替换.虽然没有新模型的加入,但是可以把现有模型中最好的部分进行组合来提高检测或者是之后需要考虑的识别率.</p><p>经过测试发现 en_PPOCRv3_slim 的检测模型效果最好.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926200457.jpg" /></p><p>但是对于部分图片还是会出现不能识别的情况.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926200404.jpg" /></p><p>有一个需要注意到的点, 图片中不能检测到部分并不是因为无法检测,而是整张图片文字密度高。</p><p>对不能检测到的部分进行手动放大然后裁剪图片之后是能够检测到的.</p><p>比如对上面对英文图片中不能检测的部分进行手动处理后可以得到如下图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926201308.jpg" /></p><p>这里可以暂时作为对图片处理方向的一个点.</p><h1 id="四图片矫正">四、图片矫正</h1><p>对图片质量好坏上的判断大多都是以提升分辨率为方向,但是在同一图片中分辨率相同但是检测效果差异很大.</p><h2 id="夸克扫描王处理">1. 夸克扫描王处理</h2><p>在竞品和最近发现的夸克扫描在对图片处理上都有一个对图片矫正的功能.这里以夸克扫描为例.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926202448.jpg" /></p><p>可以很明显看出, 这里对照片进行了处理,使得倾斜变形的文字变得几乎水平.</p><p>弥补了因为用户操作不当而造成了图片效果不好的问题.</p><h2 id="增强图片的测试">2. 增强图片的测试</h2><p>使用夸克扫描中的图片增强功能处理后再进行使用 PaddleOCR模型检测得到下面检测图片.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022926203256.jpg" /></p><h2 id="之后工作">3. 之后工作</h2><p>可以看到对图片增强后实现了完美检测.目前还没有对夸克扫描中图片增强的算法进行了解分析,这会是后面工作的一个方向.</p><p>因为夸克扫描还是属于商用产品, 需要寻找开源代码来进行替换.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PaddleOCR</tag>
      
      <tag>Android</tag>
      
      <tag>文字检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像增强算法的安卓移植</title>
    <link href="/posts/3670d9a3/"/>
    <url>/posts/3670d9a3/</url>
    
    <content type="html"><![CDATA[<h1 id="一图像增强代码的-c-实现">一、图像增强代码的 C++ 实现</h1><p>在博客 <ahref="https://blog.csdn.net/wxplol/article/details/112645349">一种基于Opencv文档图像增强算法的实现</a>提到了一种基于 C++ OpenCV 的图像增强算法,并添加了辅助增强算法使效果更加明显.</p><h2 id="pc-端实现代码">1. PC 端实现代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><br><span class="hljs-comment">//Gamma校正 fGamaa=0.45是常用值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GammaCorrection</span><span class="hljs-params">(Mat&amp; src, Mat&amp; dst, <span class="hljs-type">float</span> fGamma)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">CV_Assert</span>(src.data);<br><span class="hljs-comment">// accept only char type matrices</span><br><span class="hljs-built_in">CV_Assert</span>(src.<span class="hljs-built_in">depth</span>() != <span class="hljs-built_in">sizeof</span>(uchar));<br><span class="hljs-comment">// build look up table</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> lut[<span class="hljs-number">256</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>&#123;<br>lut[i] = <span class="hljs-built_in">saturate_cast</span>&lt;uchar&gt;(<span class="hljs-built_in">pow</span>((<span class="hljs-type">float</span>)(i / <span class="hljs-number">255.0</span>), fGamma) * <span class="hljs-number">255.0f</span>);<br>&#125;<br><br>dst = src.<span class="hljs-built_in">clone</span>();<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> channels = dst.<span class="hljs-built_in">channels</span>();<br><span class="hljs-keyword">switch</span> (channels)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><br>MatIterator_&lt;uchar&gt; it, end;<br><span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;uchar&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;uchar&gt;(); it != end; it++)<br>*it = lut[(*it)];<br><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><br>MatIterator_&lt;Vec3b&gt; it, end;<br><span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;Vec3b&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;Vec3b&gt;(); it != end; it++)<br>&#123;<br>(*it)[<span class="hljs-number">0</span>] = lut[((*it)[<span class="hljs-number">0</span>])];<br>(*it)[<span class="hljs-number">1</span>] = lut[((*it)[<span class="hljs-number">1</span>])];<br>(*it)[<span class="hljs-number">2</span>] = lut[((*it)[<span class="hljs-number">2</span>])];<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;   <br>string addr = <span class="hljs-string">&quot;C:\\Users\\64975\\Desktop\\test1.jpg&quot;</span>;<br>Mat image = <span class="hljs-built_in">imread</span>(addr);<br><span class="hljs-comment">//划分算法</span><br><span class="hljs-comment">//如果混合色与基色相同则结果色为白色</span><br><span class="hljs-comment">//如混合色为白色则结果色为基色不变</span><br><span class="hljs-comment">//如混合色为黑色则结果色为白色</span><br>Mat src = image.<span class="hljs-built_in">clone</span>();<br>src.<span class="hljs-built_in">convertTo</span>(src, CV_32FC3, <span class="hljs-number">1.0</span> / <span class="hljs-number">255</span>);<br>Mat gauss;<br>Mat dst = src.<span class="hljs-built_in">clone</span>();<br><span class="hljs-built_in">GaussianBlur</span>(src, gauss, <span class="hljs-built_in">Size</span>(<span class="hljs-number">101</span>, <span class="hljs-number">101</span>), <span class="hljs-number">0</span>);<br>dst = src / gauss;<br>dst.<span class="hljs-built_in">convertTo</span>(dst, CV_8UC3, <span class="hljs-number">255</span>);<br><span class="hljs-comment">//gamma变换</span><br>Mat ss;<br>Mat matGamma;<br>ss = dst.<span class="hljs-built_in">clone</span>();<br><span class="hljs-built_in">GammaCorrection</span>(ss, matGamma, <span class="hljs-number">1.5</span>);<br><span class="hljs-built_in">imwrite</span>(<span class="hljs-string">&quot;C:\\Users\\64975\\Desktop\\test1_out.jpg&quot;</span>, matGamma);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图片处理前后对比">2. 图片处理前后对比</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022916151542.png" /></p><p>上述图片中, 左侧为未处理图片, 右侧为处理后的图片.</p><p>可以明显发现,由于光线所造成的阴影部分以及背景颜色在处理后都可以忽略不计,并且图片中的文字质量仍保证在可辨识的状态.</p><h2 id="对处理前后图片的模型识别结果">3.对处理前后图片的模型识别结果</h2><p>(注: 图片中文字过多使得检测模型只能检测到部分,故测试采用文字数较少图片进行测试)</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022916152939.png" /></p><p>效果不是很明显, 还需要更多的测试来对其图像增强效果进行判断.为了简便步骤, 这步工作在移植该算法到安卓端后进行.</p><h1 id="二图像增强算法移植安卓">二、图像增强算法移植安卓</h1><h2 id="移植过程">1. 移植过程</h2><p>Step 1 : 在 xxx/src/main/cpp 文件夹下新建两个文件image_enhancement.cpp 和 image_enhancement.h</p><p>Step 2 : 编写 image_enhancement.cpp 和 image_enhancement.h 文件,这里为移植的代码.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//image_enhancement.h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ANDROID_DEMO_IMAGE_ENHANCEMENT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ANDROID_DEMO_IMAGE_ENHANCEMENT_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GammaCorrection</span><span class="hljs-params">(Mat &amp;src,Mat &amp;dst, <span class="hljs-type">float</span> fGamma)</span></span>;<br><span class="hljs-function">std::string <span class="hljs-title">ImageEnhance</span><span class="hljs-params">(std::string addr)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//ANDROID_DEMO_IMAGE_ENHANCEMENT_H</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//image_enhancement.cpp</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GammaCorrection</span><span class="hljs-params">(Mat&amp; src, Mat&amp; dst, <span class="hljs-type">float</span> fGamma)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">CV_Assert</span>(src.data);<br>    <span class="hljs-comment">// accept only char type matrices</span><br>    <span class="hljs-built_in">CV_Assert</span>(src.<span class="hljs-built_in">depth</span>() != <span class="hljs-built_in">sizeof</span>(uchar));<br>    <span class="hljs-comment">// build look up table</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> lut[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>    &#123;<br>        lut[i] = <span class="hljs-built_in">saturate_cast</span>&lt;uchar&gt;(<span class="hljs-built_in">pow</span>((<span class="hljs-type">float</span>)(i / <span class="hljs-number">255.0</span>), fGamma) * <span class="hljs-number">255.0f</span>);<br>    &#125;<br><br>    dst = src.<span class="hljs-built_in">clone</span>();<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> channels = dst.<span class="hljs-built_in">channels</span>();<br>    <span class="hljs-keyword">switch</span> (channels)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        &#123;<br><br>            MatIterator_&lt;uchar&gt; it, end;<br>            <span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;uchar&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;uchar&gt;(); it != end; it++)<br>                *it = lut[(*it)];<br><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        &#123;<br><br>            MatIterator_&lt;Vec3b&gt; it, end;<br>            <span class="hljs-keyword">for</span> (it = dst.<span class="hljs-built_in">begin</span>&lt;Vec3b&gt;(), end = dst.<span class="hljs-built_in">end</span>&lt;Vec3b&gt;(); it != end; it++)<br>            &#123;<br>                (*it)[<span class="hljs-number">0</span>] = lut[((*it)[<span class="hljs-number">0</span>])];<br>                (*it)[<span class="hljs-number">1</span>] = lut[((*it)[<span class="hljs-number">1</span>])];<br>                (*it)[<span class="hljs-number">2</span>] = lut[((*it)[<span class="hljs-number">2</span>])];<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">ImageEnhance</span><span class="hljs-params">(std::string addr)</span> </span>&#123;<br>    Mat image = <span class="hljs-built_in">imread</span>(addr);<br>    Mat src = image.<span class="hljs-built_in">clone</span>();<br>    src.<span class="hljs-built_in">convertTo</span>(src, CV_32FC3, <span class="hljs-number">1.0</span> / <span class="hljs-number">255</span>);<br>    Mat gauss;<br>    Mat dst = src.<span class="hljs-built_in">clone</span>();<br>    <span class="hljs-built_in">GaussianBlur</span>(src, gauss, <span class="hljs-built_in">Size</span>(<span class="hljs-number">101</span>, <span class="hljs-number">101</span>), <span class="hljs-number">0</span>);<br>    dst = src / gauss;<br>    dst.<span class="hljs-built_in">convertTo</span>(dst, CV_8UC3, <span class="hljs-number">255</span>);<br>    <span class="hljs-comment">//gamma变换</span><br>    Mat ss;<br>    Mat matGamma;<br>    ss = dst.<span class="hljs-built_in">clone</span>();<br>    <span class="hljs-built_in">GammaCorrection</span>(ss, matGamma, <span class="hljs-number">1.5</span>);<br>    <span class="hljs-keyword">return</span> addr;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step 3 : 在 xxx/src/main/cpp/native.cpp 文件末尾添加函数</p><p>为了满足 JNI 的要求, 这里的函数命名都需要严格要求</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jstring JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_baidu_paddle_lite_demo_ocr_OCRPredictorNative_enhancement</span><span class="hljs-params">(JNIEnv *env, jobject thiz,jstring image_path)</span> </span>&#123;<br>    std::string image_path1 = <span class="hljs-built_in">jstring_to_cpp_string</span>(env, image_path);<br>    std::string image_out_path1 = <span class="hljs-built_in">ImageEnhance</span>(image_path1);<br>    jstring j_string = <span class="hljs-built_in">cpp_string_to_jstring</span>(env, image_out_path1);<br>    <span class="hljs-keyword">return</span> j_string;<br>&#125;<br></code></pre></td></tr></table></figure><p>Step 4 : 在 xxx/src/main/java/xxxxx/OCRPredictorNative.java文件中添加函数, 作为 Java 调用 C++ 的接口.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">enhancement</span><span class="hljs-params">(String imagePath)</span>;<br></code></pre></td></tr></table></figure><p>Step 5 : 根据需要调用函数处理图像.</p><h2 id="编译提示">2. 编译提示</h2><p>观察编译结果可能会发现并没有生成有关 image_enhancement 的 .o 文件.这时就会出现链接文件时找不到 ImageEnhance() 函数.</p><p>需要删除 根目录/app/.cxx 和 根目录/app/build 两个文件夹之后再 MakeBuild 该项目.</p><h1 id="三存在问题">三、存在问题</h1><ul><li><p>目前图像增强代码移植安卓失败, 会出现 Assertion failed locateROI之类的错误. 暂时还没有解决办法.</p></li><li><p>在初期测试时, 对于文字占比较大的图片虽然识别率不高,但是能够全部检测到. 但是在最近测试时发现,模型对于此类图片的检测率只能达到 50 % 甚至更少.无论使用其他开源模型还是使用官方网页模型以及官方在 PC上的模型测试都是如此.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Image</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PaddleOCR中Android示例Demo编译问题解决</title>
    <link href="/posts/73d99e6d/"/>
    <url>/posts/73d99e6d/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>在PaddleOCR项目 ( 地址为 <ahref="https://github.com/PaddlePaddle/PaddleOCR">https://github.com/PaddlePaddle/PaddleOCR</a>) 中的 deploy 文件夹下有个 android_demo 文件夹.</p><p>android_demo 这个文件夹就是一个单独的项目. 但是在未编译 PaddleOCR 时,单独编译这个项目就会出现问题.</p><h1 id="二解决方案">二、解决方案</h1><p>如果不编译的话, 是可以直接运行这个项目的.如果对源码进行修改后就需要重新编译, 这个时候就会出现问题.</p><p>在第一次进行 Make Build 会出现 OpenCV 的错误, 但这不是 OpenCV 的问题.错误代码如下所示.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202299111220.png" /></p><p>按照网上部分教程, 有些会修改 OpenCVConfig.cmake 中的变量 FASLE 为TRUE.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202299120108.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202299120152.png" /></p><p>但是这个时候编译就会出现新的问题.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202299120756.png" /></p><p>这是因为没有编译 PaddleOCR 从而获得其他的芯片架构的运行库文件.但是这个 Android Demo 里面已经有了 arm-v8 架构的运行库文件.这里就只需要向 build.gradle 添加编译指定架构的指令.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android &#123;<br>    defaultConfig &#123;<br>        xxxxxxxx<br>        externalNativeBuild &#123;<br>            xxxxxxx<br>        &#125;<br>        <span class="hljs-comment">// new content</span><br>        ndk &#123;<br>            abiFilter <span class="hljs-string">&#x27;arm64-v8a&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不行就尝试在 externalNativeBuild 中添加</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android &#123;<br>    defaultConfig &#123;<br>        xxxxxxxx<br>        externalNativeBuild &#123;<br>            xxxxxxx<br>            <span class="hljs-comment">// new content</span><br>            ndk &#123;<br>                abiFilter <span class="hljs-string">&#x27;arm64-v8a&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三结果">三、结果</h1><p>编译成功截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202299125042.png" /></p><p>需要注意的是, 这样编译出的程序用模拟器运行时就需要选择 arm64 架构,或者使用较为新的安卓真机运行.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PaddleOCR</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于NCNN的OCR模型的安卓移植</title>
    <link href="/posts/1b785176/"/>
    <url>/posts/1b785176/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>本文实现基于 NCNN 框架所实现的 OCR 模型移植.</p><p>将基于一个安卓项目 <ahref="https://github.com/benjaminwan/OcrLiteAndroidNcnn">OcrLiteAndroidNcnn</a>来省去开发过程而专注于移植过程.</p><h2 id="编译环境">1. 编译环境</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cmake</span> <span class="hljs-number">3</span>.<span class="hljs-number">24</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">Python</span> <span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">9</span><br><br><span class="hljs-attribute">Android</span> NDK r19c<br></code></pre></td></tr></table></figure><h2 id="可能需要的工具包">2. 可能需要的工具包</h2><p>当出现错误时可能需要用以下命令来安装软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install build-essential<br><br>sudo apt install libssl-dev<br><br>sudo apt install protobuf-compiler libprotoc-dev<br></code></pre></td></tr></table></figure><p>如果发生错误可能使用到的工具包</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs q">libopencv-<span class="hljs-built_in">dev</span><br>build-essential<br>git<br>libvulkan-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h1 id="二onnx-模型转换成-ncnn-模型">二、onnx 模型转换成 ncnn 模型</h1><h2 id="编译-ncnn-相关转换工具">1. 编译 ncnn 相关转换工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Tencent/ncnn<br><span class="hljs-built_in">cd</span> ncnn/<br><span class="hljs-built_in">mkdir</span> -p build<br><span class="hljs-built_in">cd</span> build/<br>cmake ..<br>make -j4<br></code></pre></td></tr></table></figure><p>这样编译能通过但是不能得到转换工具, 这是因为缺少 protobuf.这时需要进行编译安装.</p><h2 id="protobuf-编译">2. protobuf 编译</h2><p>在网站<ahref="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a>下载获取 protobuf-cpp-xxx.tar.gz 压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzf &#123;protobuf-cpp-xxx.tar.gz&#125;<br><span class="hljs-built_in">cd</span> &#123;protobuf-cpp-xxx&#125;<br>./configure --prefix=<span class="hljs-variable">$INSTALL_DIR</span><br>make -j4<br>make check<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="模型转换">3. 模型转换</h2><p>使用模型均来自于 <ahref="https://github.com/DayBreak-u/chineseocr_lite/tree/onnx/models">https://github.com/DayBreak-u/chineseocr_lite/tree/onnx/models</a></p><p>使用下列命令对模型进行转换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &#123;ncnn_path&#125;/build/tools/onnx/<br><span class="hljs-built_in">cp</span> -r &#123;onnx_models_path&#125; ./<br>./onnx2ncnn onnx_models/crnn_lite_lstm.onnx crnn_lite_op.param crnn_lite_op.bin<br>./onnx2ncnn onnx_models/dbnet.onnx dbnet_op.param dbnet_op.bin<br>./onnx2ncnn onnx_models/angle_net.onnx angle_op.param angle_op.bin<br></code></pre></td></tr></table></figure><p>转换之后的模型列表应该如下所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022829130608.png" /></p><h2 id="模型精简">4. 模型精简</h2><p>在转换过程中, 尤其是 crnn_lite_lstm.onnx 模型可能会出现警告,或者其他模型也会出现相似问题. 这时候我们可以考虑使用 onnx-simplifier对模型进行精简后在对其进行转换.</p><p>需要注意的是, 这里使用的 Python 的版本需要 &gt;= 3.7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install onnx-simplifier -i https://pypi.tuna.tsinghua.edu.cn/simple<br><br>python3 -m onnxsim &#123;Your_Onnx_Model_Name&#125;.onnx &#123;Your_Onnx_Sim_Model_Name&#125;.onnx<br></code></pre></td></tr></table></figure><h2>需要注意的是, 这里模型转换失败. 当尝试使用 chineseocr_lite项目中已转换的模型时, 依旧不能使得 demo 正常运行 (出现运行闪退的情况)</h2><h1 id="三安卓端-ncnn-调用库编译">三、安卓端 ncnn 调用库编译</h1><h2 id="前置准备">1. 前置准备</h2><p>编译过程参考 <ahref="https://github.com/Tencent/ncnn/wiki/how-to-build#build-for-android">https://github.com/Tencent/ncnn/wiki/how-to-build#build-for-android</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip<br><br>unzip android-ndk-r19c-linux-x86_64.zip<br><br><span class="hljs-built_in">export</span> ANDROID_NDK=&lt;your-ndk-root-path&gt;<br></code></pre></td></tr></table></figure><p>这里需要注意 NDK 版本不能过高,不然编译过程中会出现找不到头文件的错误.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">打开 <span class="hljs-variable">$ANDROID_NDK</span>/build/cmake/android.toolchain</span> <br><span class="hljs-meta"># </span><span class="language-bash">或者 <span class="hljs-variable">$ANDROID_NDK</span>/build/cmake/android-legacy.toolchain.</span><br><span class="hljs-meta"># </span><span class="language-bash">删除 <span class="hljs-string">&quot;-g&quot;</span> 一行</span><br><br>list(APPEND ANDROID_COMPILER_FLAGS<br>  -g<br>  -DANDROID<br><br></code></pre></td></tr></table></figure><h2 id="编译">2. 编译</h2><p>编译 aarch64 调用库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;ncnn-root-dir&gt;<br><span class="hljs-built_in">mkdir</span> -p build-android-aarch64<br><span class="hljs-built_in">cd</span> build-android-aarch64<br><br>cmake -DCMAKE_TOOLCHAIN_FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$ANDROID_NDK</span>/build/cmake/android.toolchain.cmake&quot;</span>\<br>    -DANDROID_ABI=<span class="hljs-string">&quot;arm64-v8a&quot;</span> \<br>    -DANDROID_PLATFORM=android-21 ..<br><br>make -j$(<span class="hljs-built_in">nproc</span>)<br>make install<br></code></pre></td></tr></table></figure><p>在 build-android-aarch64/install 文件夹下可获得调用库</p><h2 id="运行">3. 运行</h2><p>按照安卓项目 <ahref="https://github.com/benjaminwan/OcrLiteAndroidNcnn">OcrLiteAndroidNcnn</a>配置好环境之后</p><p>用得到的 build-android-aarch64/install 下的文件替换掉 arm64-v8a下的文件.</p><p>选择 Android Studio 导入项目, 选择 Build Variants 中 OcrLibrary 中的Active ABI 为 arm64-v8a</p><h2>可以得到运行库, 但替换后会出现项目构建错误,可能是由于版本不同所带来的兼容性问题</h2><h2 id="正常运行截图">4. 正常运行截图</h2><p>测试图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022829130431.jpg" /></p><p>识别图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022829130455.jpg" /></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>NCNN</tag>
      
      <tag>OCR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PaddleOCR安卓Demo存在的问题</title>
    <link href="/posts/7cd4ed3d/"/>
    <url>/posts/7cd4ed3d/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>在使用 PaddleOCR 项目中预设置的安卓程序时, 出现了两个问题.</p><p>这里对两个问题进行一些初步分析并给出自己的猜测和之后将会进行的解决方案.</p><h1 id="二英文模型输出文本错误">二、英文模型输出文本错误</h1><p>一个是使用英文模型识别时会出现类似于 xxxxxxxx 这样的符号,但是其识别率还是能够保证在 80% 左右.</p><p>例如对如下图片进行识别</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818130857.png" /></p><p>手机端运行效果如下图:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818131330.png" /></p><p>Android Studio 端日志结果如下图(红框内为识别率):</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818131525.png" /></p><p>也就是说识别出来之后, 不能进行正常的输出. 首先想到的是字典的问题,因为官方文档中提醒到, 如果是纯英文模型就需要更新字典.但是实验之后发现既不是字典问题, 也不是字典编码问题.</p><p>这和之前出现的识别中文乱码有些相似.中文识别乱码是因为编译运行库时出现问题 (通过 Github 和 Gitee下载的运行库源码有所区别, 所以造成了乱码).</p><p>在这里也可以考虑是否还是因为运行库而出现的错误,但是如果要匹配上此安卓 Demo, 需要考虑到很多方面, 尤其是 SDK 和 NDK的版本. 这其中的兼容性错综复杂, 尤其是当升高 NDK版本之后会出现众多的头文件缺失.</p><p>显然这个方案有待商榷, 那么解决的思路将随着下一个问题的提出而展现.</p><h1 id="三图片宽度过长导致识别失败">三、图片宽度过长导致识别失败</h1><p>现有如下一张图片, 在安卓 Demo 中无论采用哪种模型都不能识别成功.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818132855.png" /></p><p>Android Studio 端日志结果如下图:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818133200.png" /></p><p>但是我们对图片裁剪一半后得到这样的图片</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818133255.png" /></p><p>对它使用 ch_ppocr_server_v2.0 模型进行识别, 可以在 Android Studio端日志得到下图:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818133723.png" /></p><p>那么针对这个问题的解决方法就是修改安卓端的源码,查看是否对输入文件的尺寸进行了相应的处理.</p><p>同时我们使用 PaddleOCR 的 PC端工具的中英文识别模型对未裁剪图进行识别, 可以在终端中得到如下结果:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818134139.png" /></p><p>然后指定其使用英文模型进行识别:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022818134324.png" /></p><p>可以看到, 除了中文识别错误外, 英文的识别率高且无类似 xxxxxxxx符号出现.</p><p>可以了解到, PaddleOCR 给出的各个平台的各个模型其实存在一定问题,或许是转换时参数出现问题, 或许是模型未更新.</p><p>总之,可以看见纯英文模型在特殊环境下还是能够保证其运行和识别功能的完整.具体细节就需要对框架和各种参数进行进一步的了解.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PaddleOCR</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PaddleOCR模型移植安卓</title>
    <link href="/posts/c630969b/"/>
    <url>/posts/c630969b/</url>
    
    <content type="html"><![CDATA[<h1 id="一paddleocr-简介">一、PaddleOCR 简介</h1><p>PaddleOCR 是一套丰富、领先、且实用的OCR工具库,助力开发者训练出更好的模型, 并应用落地.</p><p>基于 PaddleOCR 训练出的模型具有良好的文本识别性.</p><h1 id="二移植过程">二、移植过程</h1><h2 id="编译环境准备">1. 编译环境准备</h2><p>我们需要编译用于移动端的 Paddle Lite 以及 C++ demo.</p><h3>C++ 环境</h3><p>gcc、g++ == 7.5.0</p><p>CMake == 3.10.3</p><p>Android NDK == r17c</p><h3>Java 环境</h3><p>OpenJDK == 11.0.6</p><h2 id="环境安装以-ubuntu-18.04-为例">2. 环境安装(以 Ubuntu 18.04为例)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 安装 gcc g++ git make wget python unzip adb curl 等基础软件</span><br>sudo apt update<br>sudo apt get install -y --no-install-recommends gcc g++ git make wget python unzip adb curl<br><br><span class="hljs-comment"># 2. 安装 JDK 和 JRE</span><br>sudo apt install -y openjdk-11-jdk<br>sudo apt install -y openjdk-11-jre<br><br><span class="hljs-comment"># 3. 安装 CMake, 以下命令以 3.10.3 版本为例, 其他版本步骤类似</span><br>wget -c https://mms-res.cdn.bcebos.com/cmake-3.10.3-Linux-x86_64.tar.gz &amp;&amp; <br>    tar xzf cmake-3.10.3-Linux-x86_64.tar.gz &amp;&amp; \<br>    sudo <span class="hljs-built_in">mv</span> cmake-3.10.3-Linux-x86_64 /opt/cmake-3.10 &amp;&amp;<br>    sudo <span class="hljs-built_in">ln</span> -s /opt/cmake-3.10/bin/cmake /usr/bin/cmake &amp;&amp; \<br>    sudo <span class="hljs-built_in">ln</span> -s /opt/cmake-3.10/bin/ccmake /usr/bin/ccmake<br><br><span class="hljs-comment"># 4. 下载 linux-x86_64 版本的 Android NDK, 以下命令以 r17c 版本为例, 其他版本步骤类似.</span><br><span class="hljs-built_in">cd</span> /tmp &amp;&amp; curl -O https://dl.google.com/android/repository/android-ndk-r17c-linux-x86_64.zip<br><span class="hljs-built_in">cd</span> /opt &amp;&amp; unzip /tmp/android-ndk-r17c-linux-x86_64.zip<br><br><span class="hljs-comment"># 5. 添加环境变量 NDK_ROOT 指向 Android NDK 的安装路径</span><br><span class="hljs-comment"># 要是使用的 zsh Shell 就把 .bashrc 替换成 .zshrc</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export NDK_ROOT=/opt/android-ndk-r17c&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="编译步骤">3. 编译步骤</h2><p>运行编译脚本之前, 请先检查系统环境变量 NDK_ROOT 指向正确的 AndroidNDK 安装路径. 之后可以下载并构建 Paddle Lite 编译包.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 检查环境变量 `NDK_ROOT` 指向正确的 Android NDK 安装路径</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$NDK_ROOT</span><br></code></pre></td></tr></table></figure><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810111046.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 2. 下载 Paddle Lite 源码并切换到发布分支, 如 release/v2.10</span><br>git <span class="hljs-built_in">clone</span> https://github.com/PaddlePaddle/Paddle-Lite.git<br><span class="hljs-built_in">cd</span> Paddle-Lite &amp;&amp; git checkout release/v2.10<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 3. 编译</span><br>./lite/tools/build_android.sh  --<span class="hljs-built_in">arch</span>=armv8  --with_cv=ON --with_extra=ON<br></code></pre></td></tr></table></figure><p>这步需要花费很久的时间, 建议使用虚拟机或者 WSL 来编译.编译完成后我们就可以得到预测动态库 libpaddle_light_api_shared.so.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810114153.png" /></p><h2 id="模型转换">4. 模型转换</h2><p>在 PC 端训练的模型是以 .pdmodel 后缀结尾的文件.如果要在移动端使用训练的模型就需要把 .pdmodel 的文件转换成 .nb的文件.</p><ul><li><p>步骤一 : 安装 paddlelite 用于转换 paddle inference model 为paddlelite 运行所需的 nb 模型.</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install paddlelite==2.10  <span class="hljs-comment"># paddlelite版本要与预测库版本一致</span><br></code></pre></td></tr></table></figure></p><p>安装完后, 如下指令可以查看帮助信息</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">paddle_lite_opt<br></code></pre></td></tr></table></figure></p><p>如果出现找不到命令, 那么就试着重启一下.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810155317.png" /></p></li><li><p>步骤二 : 使用 paddle_lite_opt 将推论模型转换成移动端模型格式.</p><p>以 PaddleOCR 的超轻量英文模型为例, 使用 paddle_lite_opt完成推论模型到 Paddle-Lite 优化模型的转换.</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 PP-OCRv3 版本的中文推论模型</span><br>wget https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_det_slim_infer.tar &amp;&amp; tar xf ch_PP-OCRv3_det_slim_infer.tar<br>wget https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_rec_slim_infer.tar &amp;&amp; tar xf ch_PP-OCRv3_rec_slim_infer.tar<br>wget https://paddleocr.bj.bcebos.com/dygraph_v2.0/slim/ch_ppocr_mobile_v2.0_cls_slim_infer.tar &amp;&amp; tar xf ch_ppocr_mobile_v2.0_cls_slim_infer.tar<br><br><span class="hljs-comment"># 转换检测模型</span><br>paddle_lite_opt --model_file=./ch_PP-OCRv3_det_slim_infer/inference.pdmodel  --param_file=./ch_PP-OCRv3_det_slim_infer/inference.pdiparams  --optimize_out=./ch_PP-OCRv3_det_slim_opt --valid_targets=arm  --optimize_out_type=naive_buffer<br><span class="hljs-comment"># 转换识别模型</span><br>paddle_lite_opt --model_file=./ch_PP-OCRv3_rec_slim_infer/inference.pdmodel  --param_file=./ch_PP-OCRv3_rec_slim_infer/inference.pdiparams  --optimize_out=./ch_PP-OCRv3_rec_slim_opt --valid_targets=arm  --optimize_out_type=naive_buffer<br><span class="hljs-comment"># 转换方向分类器模型</span><br>paddle_lite_opt --model_file=./ch_ppocr_mobile_v2.0_cls_slim_infer/inference.pdmodel  --param_file=./ch_ppocr_mobile_v2.0_cls_slim_infer/inference.pdiparams  --optimize_out=./ch_ppocr_mobile_v2.0_cls_slim_opt --valid_targets=arm  --optimize_out_type=naive_buffer<br></code></pre></td></tr></table></figure></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810162554.png" /></p></li></ul><h2 id="与移动设备联调">5. 与移动设备联调</h2><p>在 windows 端安装 adb 并在终端输入下面指令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb devices</span><br></code></pre></td></tr></table></figure><p>如果有device输出, 则表示安装成功.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810163413.png" /></p><p>准备优化后的模型、预测库文件、测试图像和使用的字典文件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/PaddlePaddle/PaddleOCR.git<br><span class="hljs-built_in">cd</span> PaddleOCR/deploy/lite/<br><br><span class="hljs-comment"># 运行 prepare.sh, 准备预测库文件、测试图像和使用的字典文件, 并放置在预测库中的 demo/cxx/ocr 文件夹下</span><br><span class="hljs-comment"># 也就是之前编译出的三个以 .nb 为后缀的文件.</span><br>sh prepare.sh /&#123;lite prediction library path&#125;/inference_lite_lib.android.armv8<br><br><span class="hljs-comment"># 进入 OCR demo 的工作目录</span><br><span class="hljs-built_in">cd</span> /&#123;lite prediction library path&#125;/inference_lite_lib.android.armv8/<br><span class="hljs-built_in">cd</span> demo/cxx/ocr/<br><br><span class="hljs-comment"># 将C++预测动态库so文件复制到debug文件夹中</span><br><span class="hljs-built_in">cp</span> ../../../cxx/lib/libpaddle_light_api_shared.so ./debug/<br><br></code></pre></td></tr></table></figure><p>移动三个模型到 ./debug/ 文件夹下, 其中的 11.jpg 是测试图像.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810165743.png" /></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">demo/cxx/ocr/<br>|<span class="hljs-string">-- cls_process.cc              方向分类器的预处理和后处理文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- cls_process.h</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- config.txt                  超参数配置</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- crnn_process.cc             识别模型CRNN的预处理和后处理文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- crnn_process.h</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- db_post_process.cc          检测模型DB的后处理文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- db_post_process.h</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- debug/</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--11.jpg                                待测试图像</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--ch_ppocr_mobile_v2.0_cls_slim_opt.nb  优化后的文字方向分类器模型文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--ch_PP-OCRv3_det_slim_opt.nb           优化后的检测模型文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--ch_PP-OCRv3_rec_slim_opt.nb           优化后的识别模型文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--config.txt                       超参数配置</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--libpaddle_light_api_shared.so    C++预测库文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">--ppocr_keys_v1.txt                中文字典文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- Makefile                    编译文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- ocr_db_crnn.cc              C++预测源文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- prepare.sh                  文件生成脚本</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- readme_ch.md                中文文档</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- readme.md                   英文文档</span><br></code></pre></td></tr></table></figure><p>启动调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行编译，得到可执行文件 ocr_db_crnn, 第一次执行此命令会下载 opencv 等依赖库, 下载完成后, 需要再执行一次</span><br>make -j<br></code></pre></td></tr></table></figure><p>这里会出现一个 BUG, 显示头文件的缺失.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810171021.png" /></p><p>想必这单纯是夹带私货了, 这里就需要下载 AutoLog 这个库并编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前文件夹下 clone 这个仓库</span><br>git <span class="hljs-built_in">clone</span> https://github.com/LDOUBLEV/AutoLog.git<br><span class="hljs-built_in">cd</span> AutoLog<br>pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple<br>python3 setup.py bdist_wheel<br>pip3 install ./dist/auto_log-1.2.0-py3-none-any.whl -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将编译的可执行文件移动到 debug 文件夹中</span><br><span class="hljs-built_in">mv</span> ocr_db_crnn ./debug/<br><span class="hljs-comment"># 将 debug 文件夹 push 到手机上</span><br>adb push debug /data/local/tmp/<br>adb shell<br><span class="hljs-built_in">cd</span> /data/local/tmp/debug<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$&#123;PWD&#125;</span>:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br></code></pre></td></tr></table></figure><p>! ! ! 这里需要注意 ocr_db_crnn 还不是可执行文件,需要给其可执行属性.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./ocr_db_crnn<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开始使用，ocr_db_crnn可执行文件的使用方式为:</span><br><span class="hljs-comment"># ./ocr_db_crnn 预测模式  检测模型文件 方向分类器模型文件  识别模型文件 运行硬件 运行精度 线程数  batchsize  测试图像路径  参数配置路径  字典文件路径 是否使用benchmark参数</span><br>./ocr_db_crnn system  ch_PP-OCRv3_det_slim_opt.nb  ch_PP-OCRv3_rec_slim_opt.nb  ch_ppocr_mobile_v2.0_cls_slim_opt.nb  arm8 INT8 10 1  ./11.jpg  config.txt  ppocr_keys_v1.txt  True<br><br><span class="hljs-comment"># 仅使用文本检测模型，使用方式如下：</span><br>./ocr_db_crnn  ch_PP-OCRv3_det_slim_opt.nb arm8 INT8 10 1 ./11.jpg  config.txt<br><br><span class="hljs-comment"># 仅使用文本识别模型，使用方式如下：</span><br>./ocr_db_crnn  rec ch_PP-OCRv3_rec_slim_opt.nb arm8 INT8 10 1 word_1.jpg ppocr_keys_v1.txt config.txt<br></code></pre></td></tr></table></figure><p>原图片 :</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810172529.jpg" /></p><p>文本检测后的图片 :</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810172616.jpg" /></p><p>识别情况 :</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810172711.png" /></p><p>模型信息和运行速度 :</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022810172801.png" /></p><h1 id="三总结">三、总结</h1><p>PaddleOCR 的兼容性很差, 一个小版本都可能导致无法编译.尤其需要注意高版本的 Android NDK, 它修改了各种库的位置,很容易造成编译时出现头文件缺失的情况.</p><p>clone 项目尽量从 Github 进行 clone, Gitee 上虽然有相同项目文件,但可能会出现识别文字乱码或者编译出的 ocr_db_crnn 找不到动态链接库.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OCR</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PaddleOCR</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极大似然估计和交叉熵</title>
    <link href="/posts/e567e8a7/"/>
    <url>/posts/e567e8a7/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>对于一个多分类问题 (假设为 <span class="math inline">\(K\)</span>类), 有数据集 <span class="math inline">\(D = \{ \ (x_i,y_i \ ) \mid i\}\)</span>. 我们希望建立模型去建模概率分布 <spanclass="math inline">\(p_{\theta}(y \mid x)\)</span>, 模型参数为 <spanclass="math inline">\(\theta\)</span>.</p><p>我们使用损失函数评价模型的好坏, 可以采用两种方式来导出.</p><h1 id="二极大似然估计">二、极大似然估计</h1><p>由于是多分类问题, 在样本空间上的 <span class="math inline">\(p(y \midx)\)</span> 满足某个分类分布. 由分类分布定义可以知道.</p><p><span class="math display">\[p (y \mid x ; \theta) =  {\textstyle \prod_{k=1}^{K}} p_{k}^{y_k}\]</span></p><p>其中, <span class="math inline">\(p\)</span> 是分布的输出概率向量 ,<span class="math inline">\(\theta\)</span> 是分布的参数. <spanclass="math inline">\(y\)</span> 是 <spanclass="math inline">\(\mathrm{one-hot}\)</span> 编码的标签向量.</p><p>例如对于一个天气 4 分类问题, 输出概率向量如下:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">p</span> = &#123;&#x27;rain&#x27; : <span class="hljs-number">0</span>.<span class="hljs-number">14</span> , &#x27;snow&#x27; : <span class="hljs-number">0</span>.<span class="hljs-number">37</span> , &#x27;sleet&#x27; : <span class="hljs-number">0</span>.<span class="hljs-number">03</span> , &#x27;hail&#x27; : <span class="hljs-number">0</span>.<span class="hljs-number">46</span>&#125;<br></code></pre></td></tr></table></figure><p>则分类为 <span class="math inline">\(\mathrm{snow}\)</span> 的概率为<span class="math inline">\(P(y = \mathrm{snow} = [0,1,0,0]) = (0.14)^0* (0.37)^1 * (0.03)^0 * (0.46)^0 = 0.37\)</span></p><p>当使用极大似然估计去估计分布参数 <spanclass="math inline">\(\theta\)</span>.</p><p>假设有 <span class="math inline">\(n\)</span> 个样本: <spanclass="math inline">\((x^{(i)},y^{(i)})\)</span>, 则似然函数为</p><p><span class="math display">\[\mathcal{L} (x^{(i)},y^{(i)} ; \theta) = {\textstyle \prod_{i=1}^{n}}{\textstyle \prod_{k=1}^{K}} p_{k}^{y_k}\]</span></p><p>我们期待最大化似然估计, 即最小化负对数似然函数.转换成对数是因为计算机常做乘法, 这样有利于计算.</p><p><span class="math display">\[\min ( - {\textstyle \prod_{i=1}^{n}} {\textstyle \prod_{k=1}^{K}} y_k\log{p_k} )\]</span></p><p>由于采用 <span class="math inline">\(\mathrm{one-hot}\)</span> 编码,故 <span class="math inline">\(y_k=0\)</span> 的项乘积均为 0, 只需考虑<span class="math inline">\(y_k=1\)</span> 时. 故上述函数可变形为:</p><p><span class="math display">\[\min ( - {\textstyle \prod_{i=1}^{n}} \log{P_k}(y_k = 1) )\]</span></p><p>此时就可以推导出那个常见的损失函数</p><p><span class="math display">\[\mathcal{L} (\theta) = -y\log{p(x;\theta)} - (1-y)\log(1-p(x;\theta))\]</span></p><h1 id="三交叉熵">三、交叉熵</h1><h2 id="信息论">1. 信息论</h2><p>信息一般可以被表述为不确定性的程度, 有如下特性</p><ul><li><p>一定发生的事件没有信息</p></li><li><p>很有可能发生的事件几乎没有信息</p></li><li><p>随机事件拥有更多的信息</p></li><li><p>独立事件可以增加信息——抛两次正面的骰子的信息量大于抛一次正面骰子的信息量</p></li></ul><p>事件的信息可以形式化为:</p><p><span class="math display">\[I(x) = - \log(P(x))\]</span></p><p>熵用于衡量信息的多少, 被定义为:</p><p><span class="math display">\[H(x) = \mathbb{E}x \sim P(I(x)) = -\mathbb{E}x \sim p[\log{P(x)}]\]</span></p><p>离散随机变量 <span class="math inline">\(x\)</span> 的熵即:</p><p><span class="math display">\[H(x) = -  {\textstyle \sum_{x}} P(x)\log{P(x)}\]</span></p><p>若 <span class="math inline">\(\log\)</span> 以2为底,则可以衡量编码信息的比特数多少. 在信息论中, 信息与随机性是正相关的.高熵等于高随机性, 需要更多的比特来编码.</p><p>例如, 计算丢一枚硬币的熵:</p><p><span class="math display">\[H(x) = -p(正面) \log_{2}p(正面) - p(反面)log_{2}p(反面) = -\log_{2}\frac{1}{2} = 1\]</span></p><p>则我们可以用 1 位比特来编码.</p><p><span class="math inline">\(\mathrm{KL}\)</span> 散度用于衡量两个分布<span class="math inline">\(P,Q\)</span> 的距离, 被定义为</p><p><span class="math display">\[D_{\mathrm{KL}}(P \parallel Q) = {\textstyle \sum_{x}} P(x)(\log{P(x)} -\log{Q(x)})\]</span></p><p>在这里 <span class="math inline">\(\mathrm{KL}\)</span> 距离不对称.也就是 <span class="math inline">\(D_{\mathrm{KL}}(P \parallel Q) \neqD_{\mathrm{KL}}(Q \parallel P)\)</span></p><p>熵可以衡量编码信息的最少比特数, 交叉熵则可以衡量使用 <spanclass="math inline">\(\mathrm{Q}\)</span> 的错误优化编码方案对具有分布<span class="math inline">\(\mathrm{P}\)</span> 的 <spanclass="math inline">\(x\)</span> 进行编码的最小比特数. 其被定义为:</p><p><span class="math display">\[H(P,Q) = - {\textstyle \sum_{x}} P(x)\log{Q(x)}\]</span></p><p>同时, 其可以被写为:</p><p><span class="math display">\[H(P,Q) = - \sum P\log{Q} = - \sum P\log{P} + \sum P\log{P} - \sumP\log{Q} = H(P) + \sum P\log{\frac{P}{Q}} = H(P) + D_{\mathrm{KL}}(Q\parallel P)\]</span></p><p>由于 <span class="math inline">\(H(P)\)</span> 与模型参数无关,可以视为常数. 所以最小化 <spanclass="math inline">\(\mathrm{KL}\)</span> 距离等价于最小化交叉熵.</p><p>在深度学习中, <span class="math inline">\(P\)</span>一般为真实标签的分布, <span class="math inline">\(Q\)</span>一般为模型预测输出的分布.</p><h2 id="交叉熵损失函数">2. 交叉熵损失函数</h2><p>我们希望能够最小化真实分布 <span class="math inline">\(P(y \midx)\)</span> 与模型输出分布 <span class="math inline">\(P(\hat{y} \midx)\)</span> 的距离, 等价于最小化两者的交叉熵, 其被定义为:</p><p><span class="math display">\[{\textstyle \sum_{y}} P(y \mid x) \log{Q(\hat{y} \mid x)} = -{\textstyle \sum_{k=1}^{K}} {y_k\log{\hat{y_k}}}\]</span></p><h1 id="四总结">四、总结</h1><p>最小化负对数似然函数和最小化交叉熵在形式上虽然看起来是一样的,但是公式背后的含义不同.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>交叉熵</tag>
      
      <tag>极大似然估计</tag>
      
      <tag>损失函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy6</title>
    <link href="/posts/acaa2bc6/"/>
    <url>/posts/acaa2bc6/</url>
    
    <content type="html"><![CDATA[<h1 id="一数据处理">一、数据处理</h1><p>继之前的任务, 这里通过用图表的形式判断并将各个属性的离群点舍去.</p><p>发现 PERM 属性出现下图分布</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283155104.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">del_index = []<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data_test[<span class="hljs-number">2</span>])):<br>    <span class="hljs-keyword">if</span> data_test[<span class="hljs-number">2</span>][col] &gt; <span class="hljs-number">2.5</span>:<br>        del_index.append(col)<br>data_test = np.delete(data_test, del_index, axis = <span class="hljs-number">1</span>)<br>label = np.delete(label, del_index)<br></code></pre></td></tr></table></figure><p>对于 PERM 属性舍去大于 2.5 的样本</p><p>同理对剩余属性进行处理</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283155540.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">del_index = []<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data_test[<span class="hljs-number">8</span>])):<br>    <span class="hljs-keyword">if</span> data_test[<span class="hljs-number">8</span>][col] &gt; <span class="hljs-number">200</span>:<br>        del_index.append(col)<br>data_test = np.delete(data_test, del_index, axis = <span class="hljs-number">1</span>)<br>label = np.delete(label, del_index)<br></code></pre></td></tr></table></figure><p>对于 RT 属性舍去大于 200 的样本</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283155825.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">del_index = []<br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data_test[<span class="hljs-number">10</span>])):<br>    <span class="hljs-keyword">if</span> data_test[<span class="hljs-number">10</span>][col] &gt; <span class="hljs-number">20</span>:<br>        del_index.append(col)<br>data_test = np.delete(data_test, del_index, axis = <span class="hljs-number">1</span>)<br>label = np.delete(label, del_index)<br></code></pre></td></tr></table></figure><p>对于 C2 属性舍去大于 20 的样本</p><p>以此类推对所有属性进行处理. 但是我在这里有个想法,为什么不对每类的属性进行处理呢？看起来有点故意为之的感觉,实在不行再考虑这样处理吧.</p><h1 id="二算法测试">二、算法测试</h1><p>在使用一般的分类算法之前,这里了解到还可以通过随机森林算法进行分类.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><br>sklearn_rf_clf = RandomForestClassifier()<br><br>sklearn_rf_clf.fit(feature_train_set,label_train_set)<br><br>sklearn_rf_clf.score(feature_test_set,label_test_set)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283161153.png" /></p><p>随机森林进行交叉验证</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score<br><br>score = cross_val_score(sklearn_rf_clf,feature_train_set, label_train_set, cv=<span class="hljs-number">3</span>,n_jobs=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV accuacy score:%s&quot;</span> % score)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CV accuacy mean score:%.3f&quot;</span> % np.mean(score))<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283161209.png" /></p><p>这里可以看见识别率比之前使用过的算法有所提升.</p><p>但是数据处理之后对识别率提升没有很明显变化, 以 100 次 KNN平均识别率为例.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>sklearn_knn_clf = KNeighborsClassifier(n_neighbors=<span class="hljs-number">7</span>)<br><br>sklearn_knn_clf.fit(feature_train_set,label_train_set)<br><br>score = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    score += sklearn_knn_clf.score(feature_test_set,label_test_set)<br><br><span class="hljs-built_in">print</span>(score/<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>数据处理前进行 100 次 KNN 的平均识别率</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283162150.png" /></p><p>数据处理后进行 100 次 KNN 的平均识别率</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283162204.png" /></p><p>很奇怪的是, 处理数据后识别率反而下降了. 看来相比起处理数据,算法才是主导. 或许也只是自己的数据处理有问题.</p><p>看一下样本不同分类的个数, 观察是不是出现了分布不均.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;label = &#x27;</span>,i)<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(label==i))<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202283164005.png" /></p><p>看样子没有分布不均. 但是相比那些数据集, 这个数据集的大小就小得多了.是否可以考虑对训练集和测试集的划分进行修改？这点不用担心,库中的函数考虑到了这个问题, 它是分别对每类用固定比例进行划分.</p><h1 id="三总结">三、总结</h1><p>只剩下神经网络没有使用, 或者还有其他的算法.还是更想对数据分析更透彻一些. 为了结果而做一些工作虽然看起来很不错,但自己总感觉是 “为赋新词强说愁”.</p><p>看一些博客了解到相关性这个东西, 说不定会对分类有所效果.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pyplot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy5</title>
    <link href="/posts/35a37a7c/"/>
    <url>/posts/35a37a7c/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>在处理数据的时候需要考虑对数据属性的取舍. 除此之外,还要对不同属性中有些偏离程度大的数据进行处理,例如舍去那些偏离程度大的数据.</p><p>此时, 如果能够将数据通过图像的形式表现出来,就能很好地完成上述工作.</p><p>另一方面就是, 每次需要代码时, 都是借用别人写好的代码.自己没有理解到精髓, 想要对内容进行扩展自然也就成了问题.</p><h1 id="二画图">二、画图</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><p>导入所需要的库, 第一行就是画图所需的库,第二行是一个支持数组和矩阵运算的库, 底层由 C 实现, 运行速度很快.</p><h2 id="折线图">1. 折线图</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure()<br>plt.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/66a84518a783cf4858d30be3128fb574.png" /></p><h2 id="直方图">2. 直方图</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure(num=<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">6</span>))<br>ax = fig.add_subplot(<span class="hljs-number">111</span>)<br>ax.bar(x=np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>), height=np.arange(<span class="hljs-number">10</span>,<span class="hljs-number">80</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/03f659d4b7702499f4a036e55176762b.png" /></p><h2 id="散点图">3. 散点图</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">x_values = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>y_values = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>]<br><br>fig = plt.figure()<br>ax = fig.add_subplot(<span class="hljs-number">111</span>)<br>ax.scatter(x_values,y_values)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/3ee8c0d04e97e3ce0323f7deb809c764.png" /></p><h1 id="三布局">三、布局</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure(num=<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<br>plt.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/da5d797888b758e8fb9d39949cce963e.png" /></p><p>这种方式, 是先生成了一个画布,然后在这个画布上隐式的生成一个画图区域来进行画图</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure(num=<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<br>ax = fig.add_subplot(<span class="hljs-number">111</span>)<br>ax.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/da5d797888b758e8fb9d39949cce963e.png" /></p><p>这种方式, 先生成一个画布, 然后在此画布上,选定一个子区域画了一个子图.</p><p>add_subplot 函数中的 111 指的是 1 行 1 列 第 1 个子图.子图顺序是从左到右从上到下数的.</p><p>除了上面的方式, 还可以通过 plt 直接添加子图.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure(num=<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<br>plt.subplot(<span class="hljs-number">111</span>)<br>plt.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><p>结果是一样的.</p><p>有了这样的经验之后就可以在一张图中画出多个子图</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">fig = plt.figure(num=<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>))<br>ax1 = fig.add_subplot(<span class="hljs-number">221</span>)<br>ax1.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>ax2 = fig.add_subplot(<span class="hljs-number">222</span>)<br>ax2.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>ax3 = fig.add_subplot(<span class="hljs-number">223</span>)<br>ax3.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>])<br>ax4 = fig.add_subplot(<span class="hljs-number">224</span>)<br>ax4.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>])<br><br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/6fcb3c57aea2777ca894f7887b5cab2b.png" /></p><p>如果要画更复杂的图就需要把画布分割成一个网格. 然后让子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.gridspec <span class="hljs-keyword">as</span> gridspec<br><br>fig = plt.figure(num=<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>))<br>gs = gridspec.GridSpec(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br><br>ax1 = fig.add_subplot(gs[<span class="hljs-number">0</span>,:])<br>ax1.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><br>ax2 = fig.add_subplot(gs[<span class="hljs-number">1</span>,:-<span class="hljs-number">1</span>])<br>ax2.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><br>ax3 = fig.add_subplot(gs[<span class="hljs-number">1</span>:,-<span class="hljs-number">1</span>])<br>ax3.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><br>ax4 = fig.add_subplot(gs[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>])<br>ax4.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><br>ax5 = fig.add_subplot(gs[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br>ax5.plot([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><br>plt.show()<br></code></pre></td></tr></table></figure><p><imgsrc="https://img-blog.csdnimg.cn/img_convert/280850ab16ae827df17440c933c595be.png" /></p><h1 id="四总结">四、总结</h1><p>现在能画一些简单的图, 当然还可以很多可以学习的地方,例如坐标轴的步长还有线的颜色和虚实.</p><p>需要的时候再来进行查找和补充吧！</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pyplot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy4</title>
    <link href="/posts/42a44aea/"/>
    <url>/posts/42a44aea/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>无论怎么选择数据特征都难以得到一个高的分类率.最后在看方差和标准差的时候,发现数据不同特征的这两个值不在一个数量级上.</p><p>这都是自己没有做归一化导致的结果,所以这里尝试归一化之后再来进行训练.</p><h1 id="二归一化">二、归一化</h1><h2 id="概念">1. 概念</h2><p>在机器学习领域中, 不同评价指标(即特征向量中的不同特征就是所述的不同评价指标)往往具有不同的量纲和量纲单位, 这样的情况会影响到数据分析的结果,为了消除指标之间的量纲影响, 需要进行数据标准化处理,以解决数据指标之间的可比性.</p><p>原始数据经过数据标准化处理后, 各指标处于同一数量级,适合进行综合对比评价. 其中, 最典型的就是数据的归一化处理.</p><h2 id="方法">2. 方法</h2><ol type="1"><li><p>最大最小标准化 (Min-Max Normalization)</p><p><span class="math display">\[x&#39; = \frac{x - \min(x)}{\max(x) - \min(x)}\]</span></p><p>线性函数将原始数据线性化的方法转换到 [0 1] 的范围,计算结果为归一化后的数据, x 为原始数据</p><p>本归一化方法比较适用在数值比较集中的情况</p></li><li><p>z—score 标准化</p><p><span class="math display">\[x^* = \frac{x - \mu}{\sigma}\]</span></p><p>其中, <span class="math inline">\(\mu\)</span> 和 <spanclass="math inline">\(\sigma\)</span> 分别是原始数据集的均值和方差.</p><p>将原始数据集归一化为均值为0、方差1的数据集</p><p>该种归一化方式要求原始数据的分布可以近似为高斯分布,否则归一化的效果会变得很糟糕</p></li></ol><h2 id="归一化代码">3. 归一化代码</h2><p>我还是选择最简单的最大最小标准化, 使用 sklearn 库的 preprocessing就能够很好完成.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> preprocessing<br><br>min_max_scaler = preprocessing.MinMaxScaler()<br><span class="hljs-comment">#标准化训练集数据</span><br>data_train_nomal = min_max_scaler.fit_transform([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]])<br><br><span class="hljs-built_in">print</span>(data_train_nomal)<br></code></pre></td></tr></table></figure><p>输入 : 一个矩阵</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[1. 2. 3. 4. 5. ]</span><br><span class="hljs-string"> [2. 3. 4. 5. 6. ]</span><br><span class="hljs-string"> [3. 4. 5. 6. 7. ]]</span><br></code></pre></td></tr></table></figure><p>输出 : 归一化后的矩阵</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[0.  0.  0.  0.  0. ]</span><br><span class="hljs-string"> [0.5 0.5 0.5 0.5 0.5]</span><br><span class="hljs-string"> [1.  1.  1.  1.  1. ]]</span><br></code></pre></td></tr></table></figure><h1 id="三训练">三、训练</h1><p>由于是在 Jupyter Notebook 里面写的, 所以代码就分段展示</p><p>读取数据的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><br>files = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Getfile</span>(<span class="hljs-params">path</span>):<br>    files_list = os.listdir(path)<br><br>    <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files_list:<br>        file_absolute_path = os.path.join(path,file_name)<br>        <span class="hljs-keyword">if</span> os.path.isdir(file_absolute_path):<br>            Getfile(file_absolute_path)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> file_absolute_path.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;xlsx&#x27;</span>:<br>                files.append(file_absolute_path)<br><br>Getfile(<span class="hljs-string">r&quot;D:\Work\Data\welldata&quot;</span>)<br></code></pre></td></tr></table></figure><p>处理数据的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>feature = []<br>label = []<br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>    useful_file = <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-keyword">if</span> pd.read_excel(file).shape[<span class="hljs-number">1</span>] == <span class="hljs-number">28</span>:<br>        useful_file = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        useful_file = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> useful_file:<br>        <span class="hljs-comment"># Get column 5-24 and add column 27 </span><br>        columns = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">25</span>))<br>        columns.append(<span class="hljs-number">27</span>)<br>        data = pd.read_excel(file, usecols=columns,names=<span class="hljs-literal">None</span>)<br>        df = data.values.tolist()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(df)):<br>            feature.append(df[i][:-<span class="hljs-number">1</span>])<br><br>            <span class="hljs-keyword">if</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;差气层&quot;</span>:<br>                label.append(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;干层&quot;</span>:<br>                label.append(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;气层&quot;</span>:<br>                label.append(<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                feature.pop()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>归一化的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> preprocessing<br><br>min_max_scaler = preprocessing.MinMaxScaler()<br><br>feature = min_max_scaler.fit_transform(feature)<br></code></pre></td></tr></table></figure><p>分割数据集的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>feature_train_set,feature_test_set,label_train_set,label_test_set = train_test_split(feature,label)<br></code></pre></td></tr></table></figure><p>训练的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>sklearn_knn_clf = KNeighborsClassifier(n_neighbors=<span class="hljs-number">7</span>)<br><br>sklearn_knn_clf.fit(feature_train_set,label_train_set)<br><br>sklearn_knn_clf.score(feature_test_set,label_test_set)<br></code></pre></td></tr></table></figure><p>分类准确率</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022724185812.png" /></p><p>这是调整了 KNN对邻居要求的个数并且选择的是多次训练结果中最高的识别率.</p><h1 id="四其他算法">四、其他算法</h1><p>尝试了贝叶斯分类器, 结果更差</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022726154331.png" /></p><p>决策树相比 KNN 的效果要好些, 但是还是达不到高识别率</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022726154417.png" /></p><h1 id="五总结">五、总结</h1><p>相比之前有了很大提升, 但是始终无法使正确率到达 85% 甚至是 90% 以上.修改归一化规则对结果也是大差不差.</p><p>那么对我来说, 要么是对数据把握不到位,要么就要尝试使用神经网络之类的算法来处理这个问题.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy3</title>
    <link href="/posts/dcc0df49/"/>
    <url>/posts/dcc0df49/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>排除掉数据集大小不够的原因, 那么就只剩下选择数据属性的问题.排除掉专业知识的影响, 我更希望找到那种区别大, 离散程度小的数据属性.</p><p>所以我的想法就是找平均值有差距, 但是方差或者标准差小的数据属性.</p><h1 id="二流程展示">二、流程展示</h1><h2 id="读取数据">1. 读取数据</h2><p>将不同类别的数据以行为单位放在不同的的列表中(列表中实际上是一个二维数组), 并对每行数据进行裁剪.因为存在有些数据需要结合其他数据集才能使用, 这是之后的思考的方向,在这里还是暂时搁置.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>file = <span class="hljs-string">&quot;./test.xlsx&quot;</span><br><br>data = pd.read_excel(file)<br><br>name = data.columns.tolist()<br>data = data.values.tolist()<br><br>layer1 = []<br>layer2 = []<br>layer3 = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-keyword">if</span> data[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;差气层&quot;</span>:<br>        layer1.append(data[i][<span class="hljs-number">5</span>:-<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">elif</span> data[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;干层&quot;</span>:<br>        layer2.append(data[i][<span class="hljs-number">5</span>:-<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">elif</span> data[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;气层&quot;</span>:<br>        layer3.append(data[i][<span class="hljs-number">5</span>:-<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br><br>name = name[<span class="hljs-number">5</span>:-<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h2 id="统计数据">2. 统计数据</h2><p>这里需要注意, 因为是要观察每个数据属性,所以这里就有一个矩阵转置的操作. 然后通过 numpy库中的函数输出不同类别在相同数据属性下的平均值、标准差和方差.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>layer1 = np.array(layer1)<br>layer2 = np.array(layer2)<br>layer3 = np.array(layer3)<br><br>layer1 = layer1.T<br>layer2 = layer2.T<br>layer3 = layer3.T<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(name)):<br>    <span class="hljs-built_in">print</span>(name[i]+<span class="hljs-string">&quot; : &quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average : &quot;</span>)<br>    temp_layer1 = np.average(layer1[i])<br>    temp_layer2 = np.average(layer2[i])<br>    temp_layer3 = np.average(layer3[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer1 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer2 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer3 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer3))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Std : &quot;</span>)<br>    temp_layer1 = np.std(layer1[i])<br>    temp_layer2 = np.std(layer2[i])<br>    temp_layer3 = np.std(layer3[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer1 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer2 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer3 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer3))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Var : &quot;</span>)<br>    temp_layer1 = np.var(layer1[i])<br>    temp_layer2 = np.var(layer2[i])<br>    temp_layer3 = np.var(layer3[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer1 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer2 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;temp_layer3 : &quot;</span> + <span class="hljs-built_in">str</span>(temp_layer3))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022722170518.png" /></p><h2 id="选择新属性">3. 选择新属性</h2><p>然后通过观察, 数据属性太多就省去了画图的过程, 选出来了一些属性.</p><p>平均POR, 平均PERM, 平均DEN, 平均CNL, 平均C2, IV类厚度, III类厚度,II类厚度, I类孔隙</p><p>只需要修改之前的部分代码就可完成.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Get column 6,7,11,12,15,17,19,21,24,27 except head</span><br>data = pd.read_excel(file, usecols=[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">24</span>,<span class="hljs-number">27</span>],names=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022722173926.png" /></p><p>高了一点点, 结果还是不尽人意.</p><h1 id="三总结">三、总结</h1><p>虽然能够想到的方法都试过了,但是在观察数据属性的统计属性时发现了一个问题.在进行训练之前我都没有对数据进行归一化, 犯了一个非常巨大的错误.</p><p>因为观察数据集, 发现有的数据大, 有的数据小.归一化在这里的重要性就不用说了,所以在写代码之前的思考和观察是必不可少的.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy2</title>
    <link href="/posts/abc7efdf/"/>
    <url>/posts/abc7efdf/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>接之前的分析, 先不考虑数据集中数据的选择问题. 先把数据集的数据量扩大,暂时不考虑不同地区采集的数据的区别.</p><p>希望能够找到一些固有的联系吧.</p><h1 id="二流程展示">二、流程展示</h1><h2 id="获取所有文件">1. 获取所有文件</h2><p>创建一个文件列表用于存储需要访问的文件的文件名. 需要注意的是只对以".xlsx" 的表格文件名进行存储.</p><p>先找到文件夹下所有文件和目录, 然后通过循环来判断是目录还是普通文件,如果是目录就进行函数递归, 如果是文件就判断是否是表格文件,若是就加入到文件名列表中. 具体代码如下所示.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><br>files = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Getfile</span>(<span class="hljs-params">path</span>):<br>    files_list = os.listdir(path)<br><br>    <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files_list:<br>        file_absolute_path = os.path.join(path,file_name)<br>        <span class="hljs-keyword">if</span> os.path.isdir(file_absolute_path):<br>            Getfile(file_absolute_path)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> file_absolute_path.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;xlsx&#x27;</span>:<br>                files.append(file_absolute_path)<br><br>Getfile(<span class="hljs-string">r&quot;D:\Work\Data\welldata&quot;</span>)<br><br><span class="hljs-built_in">print</span>(files)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022720163309.png" /></p><h2 id="训练">2. 训练</h2><p>在之前代码的基础上进行修改, 因为在部分表中有一些数据缺失.所以在这里对部分表进行处理, 缺失数据的表就不加入整体的数据集中.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>feature = []<br>label = []<br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>    useful_file = <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-keyword">if</span> pd.read_excel(file).shape[<span class="hljs-number">1</span>] == <span class="hljs-number">28</span>:<br>        useful_file = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        useful_file = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> useful_file:<br>        <span class="hljs-comment"># Get column 5,6,7,8,9,10,11,12,13,14,15,16,27 except head</span><br>        data = pd.read_excel(file, usecols=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">27</span>],names=<span class="hljs-literal">None</span>)<br>        df = data.values.tolist()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(df)):<br>            feature.append(df[i][:-<span class="hljs-number">1</span>])<br><br>            <span class="hljs-keyword">if</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;差气层&quot;</span>:<br>                label.append(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;干层&quot;</span>:<br>                label.append(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;气层&quot;</span>:<br>                label.append(<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                feature.pop()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>feature_train_set,feature_test_set,label_train_set,label_test_set = train_test_split(feature,label)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_train_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( label_train_set)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_train_set size:&quot;</span>)<br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">len</span>(label_train_set))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_test_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( label_test_set)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_test_set size:&quot;</span>)<br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">len</span>(label_test_set))<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022720173004.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>sklearn_knn_clf = KNeighborsClassifier(n_neighbors=<span class="hljs-number">3</span>)<br><br>sklearn_knn_clf.fit(feature_train_set,label_train_set)<br><br>sklearn_knn_clf.score(feature_test_set,label_test_set)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022720173426.png" /></p><p>这里可以看见识别率在 70% 左右. 无论是切换距离度量还是计算算法,分类识别率总是在 70% 附近波动.</p><p>更改训练集和测试集的比例也只能得到 70% 左右的正确分类率.</p><p>那么想要更高的识别率就应该考虑对数据的选择问题,这就牵涉到对研究事物属性的了解.</p><h1 id="三总结">三、总结</h1><p>其实如果是以目的驱动, 倒可以分析一下不同类别数据的统计学属性,然后归纳出一个合理选择数据的规则.</p><p>那么接下来的任务就是就是对数据进行分析, 然后再修改算法.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KNN</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PythonStudy1</title>
    <link href="/posts/32cebe65/"/>
    <url>/posts/32cebe65/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>本文利用 Python 的第三方库来对一个没有经过任何处理的 excel表格进行处理</p><p>并对处理后的数据采用 KNN 算法来实现分类.</p><h1 id="二流程展示">二、流程展示</h1><h2 id="获取数据">1. 获取数据</h2><p>由于数据文件敏感就不此展示.简要描述一下所需要做的工作就是截取一部分列作为新的数据源, 在 excel文件最后一列表示的是不同的分类.</p><p>这里我采用了第三方库 Pandas 通过暴力列举在表格中需要的列,然后就有这样的代码.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Get column 5,6,7,8,9,10,11,12,13,14,15,16,27 except head</span><br>data = pd.read_excel(<span class="hljs-string">&quot;./test.xlsx&quot;</span>, usecols=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">27</span>],names=<span class="hljs-literal">None</span>)<br>df = data.values.tolist()<br>feature = []<br>label = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(df)):<br>    feature.append(df[i][:-<span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">if</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;差气层&quot;</span>:<br>        label.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;干层&quot;</span>:<br>        label.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> df[i][-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;气层&quot;</span>:<br>        label.append(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">else</span>:<br>        label.append(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(feature)<br><br><span class="hljs-built_in">print</span>(label)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022718181025.png" /></p><h2 id="划分训练集和测试集">2. 划分训练集和测试集</h2><p>利用 sklearn 第三方库中的 train_test_split类很轻松的就将已有数据划分出了训练集和测试集, 它们两个之间的比例是3:1.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>feature_train_set,feature_test_set,label_train_set,label_test_set = train_test_split(feature,label)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;feature_train_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( feature_train_set)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;feature_test_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( feature_test_set)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_train_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( label_train_set)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;label_test_set:&quot;</span>)<br><span class="hljs-built_in">print</span>( label_test_set)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022718181057.png" /></p><h2 id="创建分类器分类并进行测试">3. 创建分类器分类并进行测试</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br><br>sklearn_knn_clf = KNeighborsClassifier(n_neighbors = <span class="hljs-number">3</span>)<br><br>sklearn_knn_clf.fit(feature_train_set,label_train_set)<br><br>sklearn_knn_clf.score(feature_test_set,label_test_set)<br></code></pre></td></tr></table></figure><p>运行截图</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022718181250.png" /></p><h1 id="三总结">三、总结</h1><p>整体来说用第三方库来写代码很舒服,但是是不是这样就能高枕无忧了呢？</p><p>答案当然不是, 这只是用来寻找思路的方法. 要有创新就要自己完成代码,有些基础性的工作可以用第三方库替代, 但是算法万万不能,出了出了错连问题都定位不了.</p><p>然后就是多次测试后能够得出最高的分类率了, 66.6%这个貌似太低了一些.</p><p>问题可能有两种, 一是数据集的个数太少, 二是没有找到关联性强的特征数据.第一个的解决方法可以综合多个文件来完成,第二个就只有以结果为导向不断修改数据集中所需的数据.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KNN</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新生任务-5</title>
    <link href="/posts/acc5200a/"/>
    <url>/posts/acc5200a/</url>
    
    <content type="html"><![CDATA[<h1 id="一funk-svd-分解算法">一、Funk-SVD 分解算法</h1><p>对于一个推荐系统,用户和物品之间的关系可以整理为如下这样的一个矩阵.</p><table><thead><tr class="header"><th style="text-align: center;">User-Item</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">x</td><td style="text-align: center;">4.5</td><td style="text-align: center;">2.0</td><td style="text-align: center;">x</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">4.0</td><td style="text-align: center;">x</td><td style="text-align: center;">3.5</td><td style="text-align: center;">x</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">x</td><td style="text-align: center;">5.0</td><td style="text-align: center;">x</td><td style="text-align: center;">2.0</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">x</td><td style="text-align: center;">3.5</td><td style="text-align: center;">4.0</td><td style="text-align: center;">1.0</td></tr></tbody></table><p>矩阵中每一行代表一个用户, 而每一列则代表一个物品.若用户对物品有过评分,则矩阵中处在用户对应的行与物品对应的列交叉的位置表示用户对物品的评分值.矩阵中的 'x' 代表用户对物品未评分. 这个矩阵就叫做User-Item 评分矩阵,这个矩阵中的数在实际统计后大多数现显示为问号.</p><p>推荐系统需要做的事情就是对于任意一个用户, 预测出所有未评分物品的分值,并按分值大小从高到低的顺序推荐将对应的物品推荐给用户.</p><p>我们需要做的就是求出矩阵中 'x' 的值.</p><p>和 <span class="math inline">\(SVD\)</span> 算法需要三个矩阵不同,<span class="math inline">\(Funk-SVD\)</span> 算法只需要两个矩阵.如下图所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022716101439.jpg" /></p><p>此时我们就有公式</p><p><span class="math display">\[R_{m \times n} \approx P_{m \times k} Q_{k \times n} = \hat{M}_{m \timesn}\]</span></p><p>评分矩阵 <span class="math inline">\(R\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 的矩阵, 一共有 <spanclass="math inline">\(m\)</span> 个用户, <spanclass="math inline">\(n\)</span> 个物品. 通过一系列运算将矩阵 <spanclass="math inline">\(R\)</span> 转化为两个矩阵 <spanclass="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span>, 矩阵 <spanclass="math inline">\(U\)</span> 的大小是 <span class="math inline">\(m\times k\)</span>, 矩阵 <span class="math inline">\(Q\)</span> 的大小是<span class="math inline">\(k \times n\)</span>.</p><p>因为矩阵 <span class="math inline">\(R\)</span> 中存在未知,我们只是在对这个矩阵进行拟合, 所以是约等于.</p><p>该方法基于这样一个假设: 用户对一个物品的喜爱程度主要由 <spanclass="math inline">\(k\)</span> 个因素决定, <spanclass="math inline">\(P_{ni}\)</span> 表示第 <spanclass="math inline">\(n\)</span> 个用户对第 <spanclass="math inline">\(i\)</span> 个因素的偏好程度, 而 <spanclass="math inline">\(Q_{ix}\)</span> 表示第 <spanclass="math inline">\(x\)</span> 个物品满足第 <spanclass="math inline">\(i\)</span> 个因素的程度, <spanclass="math inline">\(R_{nx}\)</span> 表示用户 <spanclass="math inline">\(n\)</span> 对物品 <spanclass="math inline">\(x\)</span> 最终的喜好程度.</p><p>这时就存在着几个问题, 评价拟合程度的指标？如何获取 <spanclass="math inline">\(P,Q\)</span> 两矩阵？</p><p>先回答第一个问题, 拟合程度越高就说明 <span class="math inline">\(P \Q\)</span> 两矩阵的乘积越靠近矩阵 <spanclass="math inline">\(R\)</span>. 这里用 <spanclass="math inline">\(SSE\)</span> (和平方) 来表示, 那么就有公式.</p><p><span class="math display">\[SSE = E_{U,I}^2 = {\textstyle \sum_{U,I}}(R_{U,I} \ - \ \hat{R}_{U,I})^2\]</span></p><p>现在的问题就转化为了求在损失 <span class="math inline">\(SSE\)</span>最小时的矩阵 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span>. 这也回答了如何获取 <spanclass="math inline">\(P,Q\)</span> 两矩阵这个问题.</p><h1 id="二梯度下降">二、梯度下降</h1><p>对于多维变量的函数, 梯度为 0 的点有三种情况——极大值、极小值、鞍点.极小值是梯度下降过程最稳定的不动点. 迭代过程可以参照下雨的时候水的流向,水总是会聚集在坑 (极小值) 里面.</p><p>但是我们要找的是负梯度. 举个例子</p><p>函数 <span class="math inline">\(f(x)=x^2\)</span> 就是一个凸函数,满足 <span class="math inline">\(f(\frac{x_1+x_2}{2}) \le\frac{f(x_1)+f(x_2)}{2}\)</span>. 其图像如下所示:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022523172819.png" /></p><p>假设点 (-5,25) 要朝向最低点移动, 它此时的梯度为 -10, 应该往 x正方向移动使得梯度为 0.</p><p>假设点 (5,25) 要朝向最低点移动, 它此时的梯度为 10, 应该往 x负方向移动使得梯度为 0.</p><p>回到之前求的损失函数, 就有以下两个步骤</p><p>1.求解损失函数的梯度</p><p><span class="math display">\[SSE = E_{U,I}^2 = {\textstyle \sum_{U,I}}(R_{U,I} \ - \ {\textstyle\sum_{k=1}^{K}}P_{U,k} \ Q_{k,I} )^2\]</span></p><p><span class="math inline">\(SSE\)</span> 是关于 <spanclass="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span> 的多元函数, 当随机选定 <spanclass="math inline">\(U\)</span> 和 <spanclass="math inline">\(I\)</span> 后, 需要枚举所有的 <spanclass="math inline">\(k\)</span>, 并且对 <spanclass="math inline">\(P_{U,k}\)</span> 以及 <spanclass="math inline">\(Q_{k,I}\)</span> 求偏导数. <spanclass="math display">\[\frac{\partial}{\partial P_{U,k}}{E_{U,I}}^2 = 2 E_{U,I}\frac{\partialE_{U,I}}{\partial P_{U,k}} = -2E_{U,I}Q_{k,I}\]</span></p><p><span class="math display">\[\frac{\partial}{\partial Q_{k,I}}{E_{U,I}}^2 = 2 E_{U,I}\frac{\partialE_{U,I}}{\partial Q_{k,I}} = -2E_{U,I}P_{U,k}\]</span></p><p>2.根据负梯度变化更新变量</p><p><span class="math display">\[P_{U,k} = P_{U,k} - \alpha (-2E_{U,I}Q_{k,I}) = P_{u,k} + 2 \alphaE_{U,I}Q_{k,I}\]</span></p><p><span class="math display">\[Q_{k,I} = Q_{k,I} - \alpha (-2E_{U,I}P_{U,k}) = Q_{k,I} + 2 \alphaE_{U,I}P_{U,k}\]</span></p><p>公式推导到此完结, <span class="math inline">\(P \ Q\)</span>两矩阵初始化的元素值设为随机数.</p><h1 id="三代码实例">三、代码实例</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_factorization</span>(<span class="hljs-params">R, P, Q, steps = <span class="hljs-number">5000</span>, alpha = <span class="hljs-number">0.0002</span></span>):<br>    Q = Q.T<br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(steps):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R[i])):<br>                eij = R[i][j] - np.dot(P[i,:],Q[:,j])<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K):<br>                    <span class="hljs-keyword">if</span> R[i][j] &gt; <span class="hljs-number">0</span>:<br>                        P[i][k] = P[i][k] + <span class="hljs-number">2</span> * alpha * eij * Q[k][j]<br>                        Q[k][j] = Q[k][j] + <span class="hljs-number">2</span> * alpha * eij * P[i][k]<br><br>        <span class="hljs-comment"># SSE</span><br>        e = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R[i])):<br>                <span class="hljs-keyword">if</span> R[i][j]&gt;<span class="hljs-number">0</span>:<br>                    e = e + <span class="hljs-built_in">pow</span>(R[i][j] - np.dot(P[i,:],Q[:,j]),<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># Is result convergence?</span><br>        <span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">0.001</span>:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> P,Q.T<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    R = [<br>        [<span class="hljs-number">0</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],<br>        [<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">0</span>],<br>        [<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],<br>        [<span class="hljs-number">0</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>    ]<br>    R = np.array(R)<br>    <span class="hljs-comment"># The Row of Matrix R</span><br>    M = <span class="hljs-built_in">len</span>(R)<br>    <span class="hljs-comment"># The Column of Matrix R</span><br>    N = <span class="hljs-built_in">len</span>(R[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># The Hidden factor number</span><br>    K = <span class="hljs-number">2</span><br>    <span class="hljs-comment"># Get a random matrix P : M rows K columns</span><br>    P = np.random.rand(M,K)<br>    <span class="hljs-comment"># Get a random matrix Q : N rows K columns</span><br>    Q = np.random.rand(N,K)<br>    new_P, new_Q = matrix_factorization(R,P,Q)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The original matrix is : &quot;</span>)<br>    <span class="hljs-built_in">print</span>(R)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The new matrix is : &quot;</span>)<br>    R_MF = np.dot(new_P,new_Q.T)<br>    <span class="hljs-built_in">print</span>(R_MF)<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入 : 原始矩阵和隐藏因子 <span class="hljs-symbol">K</span>. 例如下所示<br>[<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">3.5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>]<br><br>代码示例中默认设置 <span class="hljs-symbol">K</span> 为 <span class="hljs-number">2.</span><br><br>输出 : 通过矩阵分解拟合后的矩阵. 由此可得出未知评分.<br></code></pre></td></tr></table></figure><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022716170901.png" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>推荐系统</tag>
      
      <tag>矩阵分解</tag>
      
      <tag>梯度下降</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新生任务-4</title>
    <link href="/posts/dbc2109c/"/>
    <url>/posts/dbc2109c/</url>
    
    <content type="html"><![CDATA[<h1 id="一奇异值的-qr-分解算法">一、奇异值的 <spanclass="math inline">\(QR\)</span> 分解算法</h1><p>和之前利用 <span class="math inline">\(AA^{\mathrm{T}}\)</span>的特征值求奇异值不同的是, 这个方法看起来不太能够理解,在书上的描述也比较简单.</p><p>其实就是简单的两步, 第一步通过 <spanclass="math inline">\(\mathrm{Household}\)</span> 变换使得矩阵 <spanclass="math inline">\(A\)</span> 变成二重对角矩阵.所谓二重对角矩阵就是除了主对角线以及主对角线上面一条对角线外的其余元素全为0.</p><p>第二步就是反复利用正交变换使得除主对角线外的那些元素逐渐减小靠近0.</p><p>虽然看起来很简单, 但是没有公式和实际例子,自己也只能慢慢来摸索方法.</p><h1 id="二构造二重对角矩阵并利用-qr-分解">二、构造二重对角矩阵并利用<span class="math inline">\(QR\)</span> 分解</h1><p>现有这样一个矩阵 <span class="math inline">\(A\)</span></p><p><span class="math display">\[A = \begin{bmatrix}    1 &amp; 2 &amp; 2\\    2 &amp; 1 &amp; 2\\    2 &amp; 2 &amp; 1\end{bmatrix}\]</span></p><p>对第一列进行 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换,先把第一列提出来</p><p><span class="math display">\[a_1 = \begin{bmatrix}    1\\    2\\    2\end{bmatrix}\]</span></p><p>求 <span class="math inline">\(a_1\)</span> 的二范数</p><p><span class="math display">\[\alpha_2 = \lVert a_1 \rVert_2 = \sqrt{1^2+2^2+2^2} = \sqrt{1+4+4} = 3\]</span></p><p>然后有</p><p><span class="math display">\[a_1 - \alpha_2e_2 = \begin{bmatrix}    1\\    2\\    2\end{bmatrix} - 3\begin{bmatrix}    1\\    0\\    0\end{bmatrix} = \begin{bmatrix}    -2\\    2\\    2\end{bmatrix}\]</span></p><p>其中 <span class="math inline">\(e_2\)</span> 是单位向量 <spanclass="math inline">\(\begin{bmatrix}1\\0\\0\end{bmatrix}\)</span>.</p><p><span class="math display">\[\lVert a_1 - \alpha_2e_2\rVert_2 = \sqrt{(-2)^2+2^2+2^2} = \sqrt{4+4+4}= \sqrt{12}\]</span></p><p>那么就有</p><p><span class="math display">\[u_1 = \frac{a_1 - \alpha_2e_2}{\lVert a_1 -\alpha_2e_2\rVert_2}=\frac{1}{\sqrt{12}} \begin{bmatrix}    -2\\    2\\    2\end{bmatrix}\]</span></p><p>根据 <span class="math inline">\(H_1 = I -2u_1u_1^{\mathrm{T}}\)</span> 可得</p><p><span class="math display">\[\begin{aligned}H_1 &amp;=\begin{bmatrix}    1 &amp; 0 &amp; 0\\    0 &amp; 1 &amp; 0\\    0 &amp; 0 &amp; 1\end{bmatrix} - 2 \times \frac{1}{12} \begin{bmatrix}    -2\\    2\\    2\end{bmatrix} \begin{bmatrix}    -2 &amp; 2 &amp; 2\end{bmatrix} \\&amp;= \begin{bmatrix}    1 &amp; 0 &amp; 0\\    0 &amp; 1 &amp; 0\\    0 &amp; 0 &amp; 1\end{bmatrix} - \frac{1}{6} \begin{bmatrix}    4 &amp; -4 &amp; -4\\    -4 &amp; 4 &amp; 4\\    -4 &amp; 4 &amp; 4\end{bmatrix} \\&amp;= \begin{bmatrix}    1/3 &amp; 2/3 &amp; 2/3\\    2/3 &amp; 1/3 &amp; -2/3\\    2/3 &amp; -2/3 &amp; 1/3\end{bmatrix}\end{aligned}\]</span></p><p>神奇的事情来了, 这里有 <span class="math inline">\(HA\)</span></p><p><span class="math display">\[\begin{aligned}H_1A &amp;=\begin{bmatrix}    1/3 &amp; 2/3 &amp; 2/3\\    2/3 &amp; 1/3 &amp; -2/3\\    2/3 &amp; -2/3 &amp; 1/3\end{bmatrix} \begin{bmatrix}    1 &amp; 2 &amp; 2\\    2 &amp; 1 &amp; 2\\    2 &amp; 2 &amp; 1\end{bmatrix} \\&amp;=\begin{bmatrix}    3 &amp; 8/3 &amp; 8/3\\    0 &amp; 1/3 &amp; 8/3\\    0 &amp; 4/3 &amp; 1/3\end{bmatrix}\end{aligned}\]</span></p><p>然后这里对于一个 <span class="math inline">\(3 \times 3\)</span>的矩阵只是将第一列除 <span class="math inline">\((1,1)\)</span>位置的元素归 0, 但是并没有完成对第一行除 <spanclass="math inline">\((1,1)\)</span> 和 <spanclass="math inline">\((1,2)\)</span> 位置的元素归 0.书上也没有提到这么做的方法, 只是轻描淡写一句还是通过 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换.</p><p>无奈这个算法实在搞不懂, 暂且搁置. 未完待续......</p><h1 id="三奇异值分解的右边-mathrmjacobi算法">三、奇异值分解的右边 <spanclass="math inline">\(\mathrm{Jacobi}算法\)</span></h1><p>现有矩阵 <span class="math inline">\(A=\begin{bmatrix} 1&amp; 2\\2&amp; 1\end{bmatrix}\)</span>, 求其 SVD 分解.</p><p>第一步先计算矩阵 <span class="math inline">\(A^{\mathrm{T}}A\)</span>的 <span class="math inline">\((i,j)\)</span> 子矩阵 <spanclass="math inline">\(\begin{bmatrix} a&amp; c\\ c&amp;b\end{bmatrix}\)</span>, 因为要求 <span class="math inline">\(i &lt;j\)</span>, 那么对于矩阵 <spanclass="math inline">\(A^{\mathrm{T}}A\)</span> 就只需要计算 <spanclass="math inline">\((1,2)\)</span> 子矩阵</p><p><span class="math display">\[A^{\mathrm{T}}A=\begin{bmatrix}    5 &amp; 4  \\    4 &amp; 5\end{bmatrix}\]</span></p><p><span class="math display">\[a = \sum_{k-1}^{n}A_{ki}^2 = A_{11}^2 + A_{21}^2 = 5^2 + 4^2 = 25 + 16 =41\]</span></p><p><span class="math display">\[b = \sum_{k-1}^{n}A_{kj}^2 = A_{12}^2 + A_{22}^2 = 4^2 + 5^2 = 16 + 25 =41\]</span></p><p><span class="math display">\[c = \sum_{k-1}^{n}A_{ki}*A_{kj} = (A_{11} \times A_{12}) + (A_{21}\times A_{22}) = (5 \times 4) + (4 \times 5) = 20 + 20 = 40\]</span></p><p>可以得到子矩阵 <span class="math inline">\(\begin{bmatrix} 80&amp;60\\ 60&amp; 45\end{bmatrix}\)</span>, 计算使其对角化的右边 <spanclass="math inline">\(\mathrm{Jacobi}\)</span> 旋转矩阵 <spanclass="math inline">\(\begin{bmatrix} cs&amp; -sn\\ sn&amp;cs\end{bmatrix}\)</span></p><p><span class="math display">\[\xi = (b - a)/(2c) = (45 - 80)/(2 \times 60) = (-35)/(120) =-\frac{7}{24}\]</span></p><p><span class="math display">\[t = \mathrm{sgn}(\xi)/(|\xi|+ \sqrt{1 + \xi^2}) =\mathrm{sgn}(-\frac{7}{24})/(|-\frac{7}{24}| + \sqrt{1 +(-\frac{7}{24})^2}) = -\frac{3}{4}\]</span></p><p>所以就有</p><p><span class="math display">\[cs = 1/\sqrt{1+t^2} = \frac{1}{\sqrt{1 + \frac{9}{16}}}= \frac{4}{5}\]</span></p><p><span class="math display">\[sn = cs \times t = \frac{4}{5} \times -\frac{3}{4} = -\frac{3}{5}\]</span></p><p>更新矩阵 <span class="math inline">\(A\)</span></p><p><span class="math display">\[A = \begin{bmatrix}    1&amp; 2\\    2&amp; 1\end{bmatrix} \longrightarrow \begin{bmatrix}    2&amp; 1\\    11/5&amp; -2/5\end{bmatrix}\]</span></p><p>更新右奇异向量的矩阵 <span class="math inline">\(V\)</span></p><p><span class="math display">\[V = \begin{bmatrix}    1&amp; 0\\    0&amp; 1\end{bmatrix} \longrightarrow \begin{bmatrix}    4/5&amp; -3/5\\    3/5&amp; 4/5\end{bmatrix}\]</span></p><p>感觉过程中出现了错误, 和实际奇异值分解有误差. 或许是迭代次数不够,然而在网上搜索之后说的是可能是印刷问题,那么这部分内容就还是交到明天去做.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵分解</tag>
      
      <tag>奇异值</tag>
      
      <tag>Householder变换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新生任务-3</title>
    <link href="/posts/45a6853f/"/>
    <url>/posts/45a6853f/</url>
    
    <content type="html"><![CDATA[<h1id="一为什么机器学习中需要矩阵求导">一、为什么机器学习中需要矩阵求导</h1><p>这是一个非常自然的过程. 算法中需要数据喂进去,对于数据来说可以用向量或者是矩阵来表示.</p><p>机器学习就是对优化算法围绕讨论. 本质上就是一个方程,使用向量或者矩阵能够使得运算速度更快. 例如在使用 numpy库计算向量之间内积的时候能体现出和使用循环计算内积方式的速度差距.</p><p>求导是为了获取到损失函数的变换趋势,以便于对算法优化过程进行迭代处理.</p><h1 id="二向量函数">二、向量函数</h1><h2 id="标量函数">1. 标量函数</h2><p><span class="math display">\[f_1(x) = x^2 \quad \underset{x}{R}  \longrightarrow \underset{x^2}{R}\]</span></p><p>函数 <span class="math inline">\(f_1(x)\)</span> 输入是 <spanclass="math inline">\(x\)</span>, 输出是 <spanclass="math inline">\(x^2\)</span>, 输入输出都是一个数.</p><p><span class="math display">\[f_2(x) = x_1^2 + x_2^2 \quad\underset{\begin{bmatrix}x_1\\x_2\end{bmatrix}}{R}  \longrightarrow\underset{x_1^2 + x_2^2}{R}\]</span></p><p>函数 <span class="math inline">\(f_2(x)\)</span> 输入是 <spanclass="math inline">\(\begin{bmatrix}x_1\\x_2\end{bmatrix}\)</span>这样一个向量, 输出是 <span class="math inline">\(x_1^2 + x_2^2\)</span>这样一个值.</p><p>所以把输出为标量的函数就叫做标量函数.</p><h2 id="向量函数">2. 向量函数</h2><p><span class="math display">\[f(x) = \begin{bmatrix}f_1(x)=x\\f_2(x)=x^2\end{bmatrix} \quad\underset{x}{R}  \longrightarrow\underset{\begin{bmatrix}x\\x^2\end{bmatrix}}{R}\]</span></p><p>这样在函数中输入的是标量, 但是输出却为向量. 同样的还有这样的函数</p><p><span class="math display">\[f(x) = \begin{bmatrix}f_{11}(x)=x_1 + x_2&amp; f_{12}(x) =x_1^2+x_2^2\\f_{21}(x)=x_1^3+x_2^3&amp; f_{22}(x) =x_1^4+x_2^4\end{bmatrix} \quad\underset{\begin{bmatrix}x_1\\x_2\end{bmatrix}}{R}  \longrightarrow\underset{\begin{bmatrix}x_1 + x_2&amp; x_1^2+x_2^2\\x_1^3+x_2^3&amp;x_1^4+x_2^4\end{bmatrix}}{R}\]</span></p><p>输入是一个 2 维向量, 输出是 <span class="math inline">\(2 \times2\)</span> 的矩阵.</p><p>那么我们现在就有这样的东西</p><p><span class="math display">\[\begin{aligned}\mathrm{Input} \longrightarrow 标量,向量\\\mathrm{Output} \longrightarrow 标量,向量\end{aligned}\]</span></p><p>输入和输出的组合, 一共就有 4 种方式.</p><h1 id="三矩阵求导">三、矩阵求导</h1><h2 id="矩阵求导本质">1. 矩阵求导本质</h2><p>现有矩阵 <span class="math inline">\(A\)</span> 和矩阵 <spanclass="math inline">\(B\)</span>, 那么矩阵求导式子 <spanclass="math inline">\(\frac{dA}{dB}\)</span> 就是让矩阵 <spanclass="math inline">\(A\)</span> 中的每一个元素对矩阵 <spanclass="math inline">\(B\)</span> 中的每一个元素进行求导.</p><p>从求导后的个数就能有一个较为清晰的判断, 括号中为矩阵中元素个数</p><p><span class="math display">\[A (1 \times 1) \quad B (1 \times 1) \quad \frac{dA}{dB}(1 \times 1)\]</span></p><p><span class="math display">\[A (1 \times p) \quad B (1 \times n) \quad \frac{dA}{dB}(p \times n)\]</span></p><p><span class="math display">\[A (1 \times p) \quad B (m \times n) \quad \frac{dA}{dB}(p \times q\times m \times n)\]</span></p><h2 id="矩阵求导技巧">2. 矩阵求导技巧</h2><p>需要记住两点技巧, 一是标量不变, 向量拉伸; 二是前面横向拉, 后面纵向拉.下面举几个例子来感受一下.</p><p>例 1 : <span class="math inline">\(f(x)\)</span> 为标量函数, <spanclass="math inline">\(x = [x_1,x_2,\cdots,x_n]^{\mathrm{T}}\)</span>为向量, 求 <span class="math inline">\(f(x)\)</span> 关于 <spanclass="math inline">\(x\)</span> 的导数.</p><p><span class="math display">\[f(x) = f(x_1,x_2,\cdots,x_n)\]</span></p><p>那么就有</p><p><span class="math display">\[\frac{df(x)}{dx} = \begin{bmatrix}    \frac{\partial f(x)}{\partial x_1}\\    \frac{\partial f(x)}{\partial x_2}\\    \vdots\\    \frac{\partial f(x)}{\partial x_n}\\\end{bmatrix}\]</span></p><p>因为 <span class="math inline">\(f(x)\)</span> 是标量,所以在求导中不变, 而 <span class="math inline">\(x\)</span> 是向量,所以求导中要变, 但是 <span class="math inline">\(x\)</span> 是在后面,所以就出现纵向拉伸, 换而言之拉伸的过程就是多元函数求导的过程.</p><p>例 2 : <span class="math inline">\(f(x)=\begin{bmatrix}f_1(x)\\f_2(x)\\ \vdots\\f_n(x)\end{bmatrix}\)</span>为向量函数, <span class="math inline">\(x\)</span> 为标量, 求 <spanclass="math inline">\(f(x)\)</span> 关于 <spanclass="math inline">\(x\)</span> 的导数.</p><p><span class="math display">\[\frac{df(x)}{dx} = \Bigg [ \frac{\partial f_1(x)}{\partial x},\frac{\partial f_2(x)}{\partial x},\cdots, \frac{\partialf_n(x)}{\partial x} \Bigg ]\]</span></p><p>因为 <span class="math inline">\(x\)</span> 是标量, 所以在求导中不变,而 <span class="math inline">\(f(x)\)</span> 是向量, 所以求导中要变,但是 <span class="math inline">\(f(x)\)</span> 是在前面,所以就出现横向拉伸,换而言之拉伸的过程就是不同函数对同一变量求导的过程.</p><p>例 3 : <span class="math inline">\(f(x)=\begin{bmatrix}f_1(x)\\f_2(x)\\ \vdots\\f_n(x)\end{bmatrix}\)</span>为向量函数, <span class="math inline">\(x =[x_1,x_2,\cdots,x_n]^{\mathrm{T}}\)</span> 为向量, 求 <spanclass="math inline">\(f(x)\)</span> 关于 <spanclass="math inline">\(x\)</span> 的导数.</p><p>这个就是前两个例子的结合, 出现了横向和纵向的拉伸.</p><p><span class="math display">\[\frac{df(x)}{dx} = \begin{bmatrix}  \frac{\partial f_1(x)}{\partial x_1}&amp;  \frac{\partialf_2(x)}{\partial x_1}&amp;  \cdots&amp; \frac{\partial f_n(x)}{\partialx_1}\\  \frac{\partial f_1(x)}{\partial x_2}&amp;  \frac{\partialf_2(x)}{\partial x_2}&amp;  \cdots&amp; \frac{\partial f_n(x)}{\partialx_2}\\  \cdots&amp;  \cdots&amp; \cdots &amp; \cdots\\  \frac{\partial f_1(x)}{\partial x_n}&amp;  \frac{\partialf_2(x)}{\partial x_n}&amp;  \cdots&amp;\frac{\partial f_n(x)}{\partialx_n}\end{bmatrix}\]</span></p><h2 id="常见公式推导">3. 常见公式推导</h2><p>例 1 : <span class="math inline">\(f(x) = A^{\mathrm{T}}X\)</span>,其中 <span class="math inline">\(A=\begin{bmatrix}a_1\\a_2\\\vdots\\a_n\end{bmatrix}\)</span>, <spanclass="math inline">\(X=\begin{bmatrix}x_1\\x_2\\\vdots\\x_n\end{bmatrix}\)</span>, 求 <spanclass="math inline">\(f(x)\)</span> 关于 <spanclass="math inline">\(x\)</span> 的导数.</p><p>首先就是把 <span class="math inline">\(f(x)\)</span> 求出来,这一看都知道 <span class="math inline">\(f(x)\)</span> 是个标量函数.</p><p><span class="math display">\[f(x) = A^{\mathrm{T}}X = \sum_{i=1}^{n}a_ix_i\]</span></p><p>那么就有</p><p><span class="math display">\[\frac{df(x)}{dx} = \begin{bmatrix}    \frac{\partial f(x)}{\partial x_1}\\    \frac{\partial f(x)}{\partial x_2}\\    \vdots \\    \frac{\partial f(x)}{\partial x_n}\end{bmatrix}\]</span></p><p>然后拿出 <span class="math inline">\(\frac{\partial f(x)}{\partialx_1}\)</span> 来看有</p><p><span class="math display">\[\frac{\partial (a_1x_1 + a_2x_2 + \cdots + a_nx_n)}{\partial x_1} = a_1\]</span></p><p>所以就有</p><p><span class="math display">\[\frac{df(x)}{dx} = \begin{bmatrix}    a_1\\    a_n\\    \vdots \\    a_n\end{bmatrix} = A\]</span></p><p>这里又不难得出 <span class="math inline">\(A^{\mathrm{T}}X =X^{\mathrm{T}}A\)</span>, 故 <spanclass="math inline">\(f(x)=A^{\mathrm{T}}X=X^{\mathrm{T}}A\)</span>,所以就有</p><p><span class="math display">\[\frac{dA^{\mathrm{T}}X}{dx} = \frac{dX^{\mathrm{T}}A}{dx} = A\]</span></p><p>例 2 : <span class="math inline">\(f(x) = X^{\mathrm{T}}AX\)</span>,其中 <span class="math inline">\(X=\begin{bmatrix}x_1\\x_2\\\vdots\\x_n\end{bmatrix}\)</span> <spanclass="math inline">\(A=\begin{bmatrix}a_{11} &amp; a_{12}&amp;\cdots&amp; a_{1n}\\a_{21} &amp; a_{22}&amp; \cdots&amp; a_{2n}\\ \vdots&amp; \vdots&amp; \cdots&amp; \vdots\\a_{n1} &amp; a_{n2}&amp;\cdots&amp; a_{nn}\end{bmatrix}\)</span>, 求 <spanclass="math inline">\(f(x)\)</span> 关于 <spanclass="math inline">\(x\)</span> 的导数.</p><p>首先可以看出结果是一个标量, 展开来看有</p><p><span class="math display">\[f(x) = [x_1,x_2,\cdots,x_n]\begin{bmatrix}    a_{11} &amp; a_{12}&amp; \cdots&amp; a_{1n}\\    a_{21} &amp; a_{22}&amp; \cdots&amp; a_{2n}\\    \vdots &amp; \vdots&amp; \cdots&amp; \vdots\\    a_{n1} &amp; a_{n2}&amp; \cdots&amp; a_{nn}\end{bmatrix}\begin{bmatrix}    x_1\\    x_2\\    \vdots\\    x_n\end{bmatrix}\]</span></p><p>用表达式表示</p><p><span class="math display">\[f(x) = \sum_{i=1}^{n} \sum_{j=1}^{n}a_{ij}x_ix_j\]</span></p><p>那么就有</p><p><span class="math display">\[\begin{aligned}\frac{df(x)}{dx} &amp;= \begin{bmatrix}    \frac{\partial f(x)}{\partial x_1}\\    \frac{\partial f(x)}{\partial x_2}\\    \vdots \\    \frac{\partial f(x)}{\partial x_n}\end{bmatrix} = \begin{bmatrix}    \sum_{j=1}^{n}a_{1j}x_j + \sum_{i=1}^{n}a_{i1}x_i\\    \sum_{j=1}^{n}a_{2j}x_j + \sum_{i=1}^{n}a_{i2}x_i\\    \vdots \\    \sum_{j=1}^{n}a_{nj}x_j + \sum_{i=1}^{n}a_{in}x_i\end{bmatrix} \\&amp;= \begin{bmatrix}    \sum_{j=1}^{n}a_{1j}x_j\\    \sum_{j=1}^{n}a_{2j}x_j\\    \vdots \\    \sum_{j=1}^{n}a_{nj}x_j\end{bmatrix} + \begin{bmatrix}    \sum_{i=1}^{n}a_{i1}x_i\\    \sum_{i=1}^{n}a_{i2}x_i\\    \vdots \\    \sum_{i=1}^{n}a_{in}x_i\end{bmatrix} \\&amp;= \begin{bmatrix}    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n}\\    \vdots &amp; \vdots &amp; \cdots &amp; \vdots\\    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\end{bmatrix}\begin{bmatrix}    x_1\\    x_2\\    \vdots \\    x_n\end{bmatrix} + \begin{bmatrix}    a_{11} &amp; a_{21} &amp; \cdots &amp; a_{n1}\\    a_{12} &amp; a_{22} &amp; \cdots &amp; a_{n2}\\    \vdots &amp; \vdots &amp; \cdots &amp; \vdots\\    a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nn}\end{bmatrix}\begin{bmatrix}    x_1\\    x_2\\    \vdots \\    x_n\end{bmatrix} \\&amp;= AX + A^{\mathrm{T}}X\end{aligned}\]</span></p><p>所以就有</p><p><span class="math display">\[\frac{df(x)}{dx} = \frac{dX^{\mathrm{T}}AX}{dx} = (A+A^{\mathrm{T}})X\]</span></p><p>其实复杂程度也就如此, 了解了本质就知道如何正确求导.</p><p>更多公式推导参见<a href="https://zhuanlan.zhihu.com/p/273729929">知乎: 矩阵求导公式的数学推导（矩阵求导——基础篇）</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>矩阵求导</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新生任务-2</title>
    <link href="/posts/32a1b5a9/"/>
    <url>/posts/32a1b5a9/</url>
    
    <content type="html"><![CDATA[<h1 id="一矩阵相关问题">一、矩阵相关问题</h1><h2 id="矩阵的秩">1. 矩阵的秩</h2><p>首先说明一点, 矩阵的行秩是等于列秩等于矩阵的秩的.行秩和列秩是考虑到不同的向量空间 (行空间和列空间).</p><p>要求矩阵的秩, 实际上对矩阵进行高斯消元,然后找有几行非零元素就是矩阵的秩. 示例如下:</p><p><span class="math display">\[A = \begin{bmatrix}  1&amp;  2&amp;  2&amp; 2\\  2&amp;  4&amp;  6&amp; 8\\  3&amp;  6&amp;  6&amp; 10\end{bmatrix} \Rightarrow \begin{bmatrix}  1&amp;  2&amp;  2&amp; 2\\  0&amp;  0&amp;  2&amp; 4\\  0&amp;  0&amp;  2&amp; 4\end{bmatrix} \Rightarrow \begin{bmatrix}  1&amp;  2&amp;  2&amp; 2\\  0&amp;  0&amp;  2&amp; 4\\  0&amp;  0&amp;  0&amp; 0\end{bmatrix} = U\]</span></p><p>有行向量 <span class="math inline">\([1,2,2,2]\)</span> 和 <spanclass="math inline">\([0,0,2,4]\)</span> 不是零向量</p><p>就可以得出矩阵 <span class="math inline">\(A\)</span> 的秩为 2.关于行秩和列秩为什么相等的证明这里就不过多赘述,大多都是利用反证法和矩阵结合.</p><p>这里考虑矩阵的秩的物理或者说是现实意义.</p><p>首先秩的大小说明的是矩阵的向量空间中有多少个线性无关的向量,无论是行空间还是列空间, 它们的线性无关向量个数都是相等的.由此可以想到组成向量子空间的基向量, 虽然不一定标准正交.</p><p>基向量就像颜色中的三原色,通过线性变换就能成为向量子空间中的任意一个向量. 由此可以想到在图片中,虽然是丰富多彩, 但在同一张中始终都能找到相似之处.然后就出现了基于基变换的图像压缩算法, 也就是 JPEG 格式的由来.</p><h2 id="矩阵的-1-范数">2. 矩阵的 1 范数</h2><p>矩阵的 1 范数也叫列和范数, 顾名思义就是矩阵中每列求绝对值的和,然后这些进行比较选出最大的那个和.</p><p>在 <span class="math inline">\(m \times n\)</span> 矩阵中则有</p><p><span class="math display">\[\left \| A \right \|_{1} = \left \| A \right \|_{col} = \underset{1 \lej \le n}{\mathrm{max}} \left \{ \sum_{i=1}^{m} |a_{ij}|\right \}\]</span></p><p>现有这样一个矩阵</p><p><span class="math display">\[A = \begin{bmatrix}  1&amp;  2&amp;  2&amp; 2\\  2&amp;  4&amp;  6&amp; 8\\  3&amp;  6&amp;  6&amp; 10\end{bmatrix}\]</span></p><p>第一列求和结果为 : <span class="math inline">\(|1| + |2| + |3| =6\)</span></p><p>第二列求和结果为 : <span class="math inline">\(|2| + |4| + |6| =12\)</span></p><p>第三列求和结果为 : <span class="math inline">\(|2| + |6| + |6| =14\)</span></p><p>第四列求和结果为 : <span class="math inline">\(|2| + |8| + |10| =20\)</span></p><p>取最大的 20, 所以矩阵 <span class="math inline">\(A\)</span> 的 1范数是 <span class="math inline">\(\left \| A \right \|_{1} =20\)</span></p><h2 id="矩阵的-2-范数">3. 矩阵的 2 范数</h2><p>矩阵的 2 范数也叫谱范数.</p><p>在矩阵 <span class="math inline">\(A\)</span> 中则有</p><p><span class="math display">\[\left \| A \right \|_{2} = \left \| A \right \|_{spec} = \sqrt{\lambda_{\mathrm{max} }(A^{\mathrm{T}}A)}\]</span></p><p>其中 <span class="math inline">\(\lambda_{ \mathrm{max}}(A^{\mathrm{T}}A)\)</span> 为 <spanclass="math inline">\(A^{\mathrm{T}}A\)</span>的特征值绝对值的最大值.</p><p>举个例子, 现有这样一个矩阵</p><p><span class="math display">\[A = \begin{bmatrix}  4 &amp; -3\\  4 &amp; 3\end{bmatrix}\]</span></p><p>那么 <span class="math inline">\(A^{\mathrm{T}}A\)</span>就应该为</p><p><span class="math display">\[A^{\mathrm{T}}A = \begin{bmatrix}  4  &amp; 4\\  -3 &amp; 3\end{bmatrix}\begin{bmatrix}  4 &amp; -3\\  4 &amp; 3\end{bmatrix} \Rightarrow \begin{bmatrix}  32&amp; 0  \\  0 &amp; 18\end{bmatrix}\]</span></p><p>根据求特征值的公式 <span class="math inline">\(Ax=\lambda x\Rightarrow (A - \lambda E)x = 0\)</span>, 使得方程有解, 则 <spanclass="math inline">\(A - \lambda E\)</span> 行列式为 0. 由此可得</p><p><span class="math display">\[\begin{vmatrix}  32 - \lambda&amp; 0\\  0&amp; 18 - \lambda\end{vmatrix} = (32 - \lambda)(18 - \lambda) = 0\]</span></p><p>可得</p><p><span class="math display">\[\lambda_1 = 32, \lambda_2 = 18\]</span></p><p>所以矩阵 <span class="math inline">\(A\)</span> 的 2 范数是 <spanclass="math inline">\(\left \| A \right \|_{2} = 32\)</span></p><h2 id="矩阵的-f-范数">4. 矩阵的 F 范数</h2><p>Frobenius 范数也叫 <span class="math inline">\(l_2\)</span> 范数,是对矩阵元素绝对值的平方和再开平方, 公式如下</p><p>在 <span class="math inline">\(m \times n\)</span> 矩阵中则有</p><p><span class="math display">\[\left \| A \right \|_F \overset{def}{=} \left ( \sum_{i=1}^{m}\sum_{j=1}^{n} |a_{ij}|^2 \right )^{1/2}\]</span></p><p>举个例子, 现有矩阵 <span class="math inline">\(A\)</span></p><p><span class="math display">\[A = \begin{bmatrix}  1&amp;  -2\\  2&amp;  4\\  3&amp;  -6\end{bmatrix}\]</span></p><p>那么就有</p><p><span class="math display">\[\begin{aligned}\left \| A \right \|_F &amp;= \sqrt{|1|^2 + |-2|^2 + |2|^2 + |4|^2 +|3|^2 + |-6|^2} \\&amp;= \sqrt{1 + 4 + 4 + 16 + 9 + 36} \\&amp;= \sqrt{70}\end{aligned}\]</span></p><p>矩阵 <span class="math inline">\(A\)</span> 的 F 范数就为 <spanclass="math inline">\(\sqrt{70}\)</span></p><h2 id="矩阵的无穷范数">5. 矩阵的无穷范数</h2><p>矩阵的无穷范数也叫行和范数, 顾名思义就是矩阵中每行求绝对值的和,然后这些进行比较选出最大的那个和.</p><p>在 <span class="math inline">\(m \times n\)</span> 矩阵中则有</p><p><span class="math display">\[\left \| A \right \|_{\infty} = \left \| A \right \|_{row} = \underset{1\le i \le m}{\mathrm{max}} \left \{ \sum_{j=1}^{n} |a_{ij}|\right \}\]</span></p><p>现有这样一个矩阵</p><p><span class="math display">\[A = \begin{bmatrix}  1&amp;  2&amp;  2&amp; 2\\  2&amp;  4&amp;  6&amp; 8\\  3&amp;  6&amp;  6&amp; 10\end{bmatrix}\]</span></p><p>第一行求和结果为 : <span class="math inline">\(|1| + |2| + |2| + |2|= 7\)</span></p><p>第二行求和结果为 : <span class="math inline">\(|2| + |4| + |6| + |8|= 20\)</span></p><p>第三行求和结果为 : <span class="math inline">\(|3| + |6| + |6| +|10|= 25\)</span></p><p>取最大的 25, 所以矩阵 <span class="math inline">\(A\)</span> 的无穷范数是 <span class="math inline">\(\left \| A \right \|_{\infty} =25\)</span></p><h1 id="二向量相关问题">二、向量相关问题</h1><h2 id="向量的范数">1. 向量的范数</h2><p>向量的范数是用来刻画向量大小的一种度量, 可以想象成距离.</p><p>通过范数可以定义距离, 而通过距离可以讨论极限和收敛的问题. 比如说:</p><p><span class="math display">\[\lim_{n \to \infty} S_n = S \Leftrightarrow \lim_{n \to \infty} d(S_n,S)= 0\]</span></p><p>就将抽象空间中的极限问题转化为向量空间中的极限问题</p><p>同时研究线性方程组近似解的误差估计和迭代法的收敛性,也需要引入范数进行度量</p><h2 id="向量的-1-范数">2. 向量的 1 范数</h2><p>向量的 1 范数为绝对值之和, 公式如下</p><p><span class="math display">\[\left \| x \right \|_1 \overset{def}{=} \left | \sum_{i=1}^mx_i \right |= |x_1| +  |x_2| +  \dots + |x_m| \tag{3}\]</span></p><p>这也叫和范数或者 <span class="math inline">\(l_1\)</span> 范数.</p><p>例如向量 <span class="math inline">\(x =[1,2,-2]^{\mathrm{T}}\)</span> 的 1 范数为</p><p><span class="math display">\[\left \| x \right \|_1 = |1| + |2| + |-2| = 5\]</span></p><p>用作两点间的曼哈顿距离公式如下:</p><p><span class="math display">\[\left \| x - y \right \|_1 \overset{def}{=} \left |\sum_{i=1}^{m}x_i-y_i \right | = |x_1-y_1| +  |x_2-y_2| +  \dots +|x_m-y_m| \tag{4}\]</span></p><p>例如向量 <span class="math inline">\(x =[1,2,-2]^{\mathrm{T}}\)</span> 和向量 <span class="math inline">\(y =[3,2,5]^{\mathrm{T}}\)</span></p><p><span class="math display">\[\left \| x - y \right \|_1 = |1-3| + |2-2| + |-2-5| = 9\]</span></p><h2 id="向量的-2-范数">3. 向量的 2 范数</h2><p>向量的 2 范数为通常意义上的模, 公式如下</p><p><span class="math display">\[\left \| x \right \|_2 = (|x_1|^2 + |x_2|^2 + \dots + |x_m|^2)^{1/2}\tag{5}\]</span></p><p>这一范数常称 <span class="math inline">\(\mathrm{Euclidean}\)</span>(欧几里得) 范数, 有时也称 <spanclass="math inline">\(\mathrm{Frobenius}\)</span> 范数.</p><p>例如向量 <span class="math inline">\(x =[1,2,-2]^{\mathrm{T}}\)</span> 的 2 范数为</p><p><span class="math display">\[\left \| x \right \|_2 = \sqrt{|1|^2 + |2|^2 + |-2|^2} = \sqrt{1+4+4} =3\]</span></p><p>两个向量之间的该范数就是求欧几里得距离,简而言之就是求两点间的空间距离.</p><p><span class="math display">\[\left \| x - y \right \|_2 = (|x_1-y_1|^2 + |x_2-y_2|^2 + \dots +|x_m-y_m|^2)^{1/2}\]</span></p><p>例如向量 <span class="math inline">\(x =[1,2,-2]^{\mathrm{T}}\)</span> 和向量 <span class="math inline">\(y =[3,2,5]^{\mathrm{T}}\)</span></p><p><span class="math display">\[\left \| x - y \right \|_2 = \sqrt{|1-3|^2 + |2-2|^2 + |-2-5|^2} =\sqrt{4+49} = \sqrt{53}\]</span></p><h1 id="三矩阵的迹">三、矩阵的迹</h1><p>从定义来看, 矩阵的迹貌似没什么特别的. 就是方阵中主对角线各个元素之和,公式如下</p><p>存在 <span class="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span>, 其中元素用 <spanclass="math inline">\(a_{ij}\)</span> 表示</p><p><span class="math display">\[\mathrm{tr}(A) = \sum_{i=1}^{n} a_{ii}\]</span></p><p>例如有个矩阵 <span class="math inline">\(A\)</span> 如下</p><p><span class="math display">\[\begin{bmatrix}  3&amp;  -1&amp;  4&amp; 1\\  5&amp;  2&amp;  3&amp;  3\\  2&amp;  -6&amp;  7&amp; -2\\  -6&amp;  -10&amp;  3&amp; 4\end{bmatrix}\]</span></p><p>则 <span class="math inline">\(A\)</span> 的迹为</p><p><span class="math display">\[\mathrm{tr}(A) = 3 + 2 + 7 + 4 = 16\]</span></p><p>而要说这个迹的意义是什么, 下面有段来自<ahref="https://www.zhihu.com/question/51293797/answer/161191362">知乎 :为什么会定义矩阵的迹？</a>的回答</p><p>知道矩阵行列式可以表示平行四边形的面积或者平行六面体的体积.</p><p>那么迹可以理解为行列式的导数,所以也就表示了在每个边沿自己的方向变化时,该平行四边形的面积或者平行六面体的体积变化的大小.</p><p>这实际上和特征值非常相关, 迹是特征值的和, 行列式是特征值的积.</p><p>更多直观解释参见 : <ahref="https://mathoverflow.net/questions/13526/geometric-interpretation-of-trace">GeometricInterpretation of Trace</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>秩</tag>
      
      <tag>范数</tag>
      
      <tag>向量</tag>
      
      <tag>迹</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新生任务-1</title>
    <link href="/posts/aba8e413/"/>
    <url>/posts/aba8e413/</url>
    
    <content type="html"><![CDATA[<h1 id="一推荐系统">一、推荐系统</h1><h2 id="什么是推荐系统">1. 什么是推荐系统</h2><p>推荐系统顾名思义就是为用户进行推荐的系统. 无论是商品、音乐、书籍 或电影, 都能够通过这样的一个系统对使用者进行推荐.</p><p>像淘宝中给你推荐你可能感兴趣的商品, 抖音软件中你下一条即将播放的视频,这些都算是推荐系统的实际运用场景.</p><h2 id="推荐系统的发展">2. 推荐系统的发展</h2><p>关于推荐系统一词, 很多人的第一印象是亚马逊当年号称有 20%的成交来源于推荐, 就像很多人讲大数据,总是会提啤酒和尿布的故事（世界杯的时候,丈夫会在购买啤酒的同时购买尿布）.</p><p>在 PC 时代, 推荐系统更像是一个补充. PC 屏幕很大,推荐的场景能出现在各种地方, 比如很多电商公司的看了又看、买了又买,都是很大的推荐场景. 这个时候的技术, 和机器学习的关系并不大,以数据挖掘为主.</p><p>推荐系统井喷式的发展是在移动互联网时代,每个人只要拥有一个移动设备就能成为推荐系统的数据来源,而且更具有说服力.</p><h2 id="推荐系统未来展望">3. 推荐系统未来展望</h2><p>在推荐系统中需要不断提升的应该是用户对推荐的事物的满意程度.这应该算是推荐系统的终极目标, 但是满意程度只是一个感觉.在推荐系统中也就只能通过对事物的评分来描述满意程度.</p><p>人是善变的生物, 对事物打分也不一定是绝对理智的行为.这是不能被忽视的因素. 这也导致整个系统的复杂度将提升.</p><p>推荐系统最大的优点是千人千面, 最大的缺点是号称千人千面;千人千面听着非常美好, 如果能做到, 那就可以用一个 super app满足所有人的需求.</p><p>可惜现实是残酷的, 技术的发展远不如预期, 无论做再好的推荐系统,目前的主流技术都是基于 behavior 的. 第一个问题就是用户的冷启动,当用户不留下 behavior 时, 各大推荐系统都很难有好的表现.此时应用也就只能推荐一些热门产品给用户.</p><p>再者, 我们放弃主动选择信息转而交给推荐系统这一行为,很有可能导致我们走向信息茧房.</p><p>所谓信息茧房是指一个人会不断地看到自己所看过的、或者是感兴趣的东西,长此以往, 他就会变得越来越不能包容其他事物, 越来越偏执,犹如陷入蚕茧一般.</p><h1 id="二训练集测试集和验证集">二、训练集、测试集和验证集</h1><p>用一个不恰当的比喻来说明3种数据集之间的关系 :</p><ul><li><p>训练集 : 学生的课本, 学生根据课本里的内容来掌握知识.</p></li><li><p>测试集 : 考试, 考的题是平常都没有见过,考察学生举一反三的能力.</p></li><li><p>验证集 : 作业,通过作业可以知道不同学生学习情况、进步的速度快慢.</p></li></ul><p>传统上, 一般三者切分的比例是 6 : 2 : 2, 验证集并不是必须的. 当然也有8 : 1 : 1 比例的划分</p><ul><li><p>训练集直接参与了模型调参的过程, 显然不能用来反映模型真实的能力 (防止课本死记硬背的学生拥有最好的成绩, 即防止过拟合 )</p></li><li><p>验证集参与了人工调参 ( 超参数 ) 的过程,也不能用来最终评判一个模型( 刷题库的学生不能算是学习好的学生 )</p></li><li><p>所以要通过最终的考试 ( 测试集 ) 来考察一个学 ( 模 ) 生 ( 型 )真正的能力 ( 期末考试 )</p></li></ul><h1 id="三常规人工奇异值分解">三、常规人工奇异值分解</h1><p>先写出奇异值分解公式</p><p><span class="math display">\[A = U \Sigma V^{\mathrm{T}}\]</span></p><p>其中 <span class="math inline">\(\Sigma = \begin{bmatrix}\sigma_1&amp; &amp; \\ &amp; \cdots &amp; \\ &amp; &amp;\sigma_r\end{bmatrix}\)</span> <span class="math inline">\(U\)</span> 和<span class="math inline">\(V\)</span> 是正交矩阵</p><p>常规求解方式是利用</p><p><span class="math display">\[\begin{aligned}A^{\mathrm{T}}A &amp;= V \Sigma^{\mathrm{T}} U^{\mathrm{T}} U \SigmaV^{\mathrm{T}} \\&amp;= V \Sigma^{\mathrm{T}}\Sigma V^{\mathrm{T}} \\&amp;= V  \begin{bmatrix}  \sigma_1^2&amp;  &amp;  &amp; \\  &amp;  \sigma_2^2&amp;  &amp; \\  &amp;  &amp;  \ddots &amp; \\  &amp;  &amp;  &amp; \sigma_r^2\end{bmatrix} V^{\mathrm{T}}\end{aligned}\]</span></p><p>这个式子是正定矩阵 <spanclass="math inline">\(A^{\mathrm{T}}A\)</span> 的正交分解.</p><p>该用例来自 MIT 线性代数课程</p><p>例 1 : 已知矩阵 <span class="math inline">\(A=\begin{bmatrix} 4&amp;4\\ -3&amp; 3\end{bmatrix}\)</span>, 求其 <spanclass="math inline">\(SVD\)</span> 分解</p><ol type="1"><li><p>先计算 <span class="math inline">\(A^{\mathrm{T}}A\)</span>, 得到(这里是求 V)</p><p><span class="math display">\[A^{\mathrm{T}}A = \begin{bmatrix}     25&amp; 7  \\     7 &amp; 25     \end{bmatrix}\]</span></p></li><li><p>求出特征值和特征向量, 并对特征向量使用施密特正交化</p><p><span class="math display">\[\lambda_1 = 32, x_1 = \begin{bmatrix}     \frac{1}{\sqrt{2}}  \\     \frac{1}{\sqrt{2}}     \end{bmatrix}\]</span></p><p><span class="math display">\[\lambda_2 = 18, x_2 = \begin{bmatrix}     \frac{1}{\sqrt{2}}  \\     \frac{-1}{\sqrt{2}}     \end{bmatrix}\]</span></p></li><li><p>又根据 <span class="math inline">\(AA^{\mathrm{T}}\)</span>重复上述步骤 (这里是求 U)</p><p><span class="math display">\[AA^{\mathrm{T}} = \begin{bmatrix}     32&amp; 0  \\     0 &amp; 18     \end{bmatrix}\]</span></p><p>对应的特征值和特征向量是</p><p><span class="math display">\[\lambda_1 = 32, x_1 = \begin{bmatrix}     0  \\     1     \end{bmatrix}\]</span></p><p><span class="math display">\[\lambda_2 = 18, x_2 = \begin{bmatrix}     0  \\     1     \end{bmatrix}\]</span></p></li><li><p>直接代入就可以得到</p><p><span class="math display">\[\begin{bmatrix}     4&amp; 4  \\     3&amp; -3\end{bmatrix} = \begin{bmatrix}     1&amp; 0  \\     0&amp; 1\end{bmatrix} \begin{bmatrix}     \sqrt{32}&amp; 0  \\     0 &amp; \sqrt{18}\end{bmatrix} \begin{bmatrix}     \frac{1}{\sqrt{2}}&amp; \frac{1}{\sqrt{2}}  \\     \frac{1}{\sqrt{2}} &amp; \frac{-1}{\sqrt{2}}\end{bmatrix}\]</span></p></li></ol><p>但是这样分解之后, 第 4 步计算出来的矩阵是 <spanclass="math inline">\(\begin{bmatrix} 4&amp;4 \\ -3 &amp; 3\end{bmatrix}\)</span> 和最开始的矩阵符号不一样,这是因为特征向量的方向问题会对结果产生影响.</p><p>所以要使用原始公式 <span class="math inline">\(\sigma_iu_i =Av_i\)</span> 确定了 <span class="math inline">\(v\)</span> 和 <spanclass="math inline">\(\sigma\)</span>, 直接代入就能得到 <spanclass="math inline">\(u\)</span>. 通过下面的例子进行展开描述.</p><p>例 2 : 已知矩阵 <span class="math inline">\(A=\begin{bmatrix} 4&amp;3\\ 8&amp; 6\end{bmatrix}\)</span>, 求其 <spanclass="math inline">\(SVD\)</span> 分解</p><p>可知 <span class="math inline">\(A\)</span> 的秩为 1,行空间是一条直线, 零空间是与之垂直的一条直线</p><p>同时 <span class="math inline">\(A\)</span> 的列空间是一条直线,左零空间是与之垂直的一条直线</p><p>那么行空间方向上的基为 <span class="math inline">\(\begin{bmatrix}0.8 \\ 0.6 \end{bmatrix}\)</span>, 零空间方向上的基 <spanclass="math inline">\(\begin{bmatrix} -0.6 \\ 0.8\end{bmatrix}\)</span></p><p>列空间方向 : <span class="math inline">\(u_1 =1/\sqrt{5}\begin{bmatrix} 1 \\ 2 \end{bmatrix}\)</span>, 左零空间方向 :<span class="math inline">\(1/\sqrt{5}\begin{bmatrix} 2 \\ -1\end{bmatrix}\)</span></p><p>然后 <span class="math inline">\(SVD\)</span>就是将行空间与零空间上的基转换为列空间与左零空间上的基</p><p>所以就可以得到矩阵 <span class="math inline">\(U\)</span> :</p><p><span class="math display">\[U = \frac{1}{\sqrt{5}}\begin{bmatrix}    1&amp; 2  \\    2 &amp; -1\end{bmatrix}\]</span></p><p>类似的, 我们可以得到:</p><p><span class="math display">\[V^{\mathrm{T}} = \begin{bmatrix}    0.8&amp; 0.6  \\    0.6 &amp; -0.8\end{bmatrix}\]</span></p><p>和之前利用 <span class="math inline">\(A^{\mathrm{T}}A\)</span>的特征值来求得对角矩阵 <span class="math inline">\(\Sigma\)</span>,最后得到</p><p><span class="math display">\[A = \frac{1}{\sqrt{5}}\begin{bmatrix}    1&amp; 2  \\    2 &amp; -1\end{bmatrix} \begin{bmatrix}    \sqrt{125}&amp; 0  \\    0 &amp; 0\end{bmatrix} \begin{bmatrix}    0.8&amp; 0.6  \\    0.6 &amp; -0.8\end{bmatrix}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>推荐系统</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-6.2~6.3-奇异值分解-Section2</title>
    <link href="/posts/d45a8633/"/>
    <url>/posts/d45a8633/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一奇异值的性质汇总">一、奇异值的性质汇总</h1><h2 id="奇异值服从的等式关系">1. 奇异值服从的等式关系</h2><ul><li><p>矩阵 <span class="math inline">\(A_{m \times n}\)</span>和其复共轭转置矩阵 <span class="math inline">\(A^{\mathrm{H}}\)</span>具有相同的奇异值.</p></li><li><p>矩阵 <span class="math inline">\(A_{m \times n}\)</span>的非零奇异值是 <span class="math inline">\(AA^{\mathrm{H}}\)</span> 或者<span class="math inline">\(A^{\mathrm{H}A}\)</span>的非零特征值的正平方根.</p></li><li><p><span class="math inline">\(\sigma &gt; 0\)</span> 是矩阵 <spanclass="math inline">\(A_{m \times n}\)</span> 的单奇异值, 当且仅当 <spanclass="math inline">\(\sigma^2\)</span> 是 <spanclass="math inline">\(AA^{\mathrm{H}}\)</span> 或 <spanclass="math inline">\(A^{\mathrm{H}}A\)</span> 的单特征值.</p></li><li><p>若 <span class="math inline">\(p = \min\{m,n\}\)</span>, 且 <spanclass="math inline">\(\sigma_1,\sigma_2,\cdots,\sigma_p\)</span> 是矩阵<span class="math inline">\(A_{m \times n}\)</span> 的奇异值,则</p></li></ul><p><span class="math display">\[{\mathrm{tr}}(A^{\mathrm{H}}A) = \sum_{i=1}^{p} \sigma_i^2\]</span></p><ul><li><p>矩阵行列式的绝对值等于矩阵奇异值之乘积, 即 <spanclass="math inline">\(|{\mathrm{det}}(A)|=\sigma_1\sigma_2\cdots\sigma_n\)</span>.</p></li><li><p>矩阵 <span class="math inline">\(A\)</span> 的谱范数等于 <spanclass="math inline">\(A\)</span> 的最大奇异值, 即 <spanclass="math inline">\(\lVert A\rVert_{\mathrm{spec}}=\sigma_{\mathrm{max}}\)</span></p></li><li><p>若 <span class="math inline">\(m \ge n\)</span>, 对于矩阵 <spanclass="math inline">\(A_{m \times n}\)</span>, 有</p></li></ul><p><span class="math display">\[\begin{aligned}\sigma_{\mathrm{min}}(A) &amp;= \min \left \{ \left (\frac{x^{\mathrm{H}}A^{\mathrm{H}}Ax}{x^{\mathrm{H}}x} \right )^{1/2} :x \neq 0  \right \} \\&amp;= \min \left \{(x^{\mathrm{H}}A^{\mathrm{H}}Ax)^{1/2}:x^{\mathrm{H}}x=1,x \in C^n\right \}\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(m \ge n\)</span>, 对于矩阵 <spanclass="math inline">\(A_{m \times n}\)</span>, 有</li></ul><p><span class="math display">\[\begin{aligned}\sigma_{\mathrm{max}}(A) &amp;= \max \left \{ \left (\frac{x^{\mathrm{H}}A^{\mathrm{H}}Ax}{x^{\mathrm{H}}x} \right )^{1/2} :x \neq 0  \right \} \\&amp;= \max \left \{(x^{\mathrm{H}}A^{\mathrm{H}}Ax)^{1/2}:x^{\mathrm{H}}x=1,x \in C^n\right \}\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 非奇异, 则</li></ul><p><span class="math display">\[\frac{1}{\sigma_{\min}(A)} = \max \left \{ \left (\frac{x^{\mathrm{H}}(A^{-1})^{\mathrm{H}}A^{-1}x}{x^{\mathrm{H}}x}\right )^{1/2}:x \neq 0, x \in C^n \right \}\]</span></p><ul><li>若 <span class="math inline">\(A = U \begin{bmatrix} \Sigma_1&amp;O\\O&amp;O\end{bmatrix}V^{\mathrm{H}}\)</span> 是 <spanclass="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的奇异值分解, 则 <spanclass="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵</li></ul><p><span class="math display">\[A^{\dagger} = V \begin{bmatrix}\Sigma_1^{-1} &amp; O \\O &amp; O\end{bmatrix} U^{\mathrm{H}}\]</span></p><ul><li>若 <spanclass="math inline">\(\sigma_1,\sigma_2,\cdots,\sigma_p\)</span> 是<span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的非奇异值 (其中, <spanclass="math inline">\(p=\min\{m,n\}\)</span>), 则矩阵 <spanclass="math inline">\(\begin{bmatrix} O&amp;A\\A^{\mathrm{H}}&amp;O\end{bmatrix}\)</span> 具有 <spanclass="math inline">\(2p\)</span> 个非奇异值 <spanclass="math inline">\(\sigma_1,\cdots,\sigma_p,-\sigma_1,\cdots,-\sigma_p\)</span>和 <span class="math inline">\(|m - n|\)</span> 个零奇异值.</li></ul><h2 id="奇异值服从的不等式关系">2. 奇异值服从的不等式关系</h2><ul><li><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是 <span class="math inline">\(m \timesn\)</span> 矩阵, 对于 <span class="math inline">\(1 \le i,j \le p, i+j\le p+1(p =\min\{m,n\})\)</span>, 有</p><p><span class="math display">\[\sigma_{i+j-1}(A+B) \le \sigma_i(A) + \sigma_j(B)\]</span></p><p>特别地, 当 <span class="math inline">\(j=1\)</span> 时, <spanclass="math inline">\(\sigma_i(A+B) \le \sigma_i(A) + \sigma_i(B), i =1,2,\cdots,p\)</span> 成立.</p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n}, B_{m \timesn}\)</span>, 有</p></li></ul><p><span class="math display">\[\sigma_{\max}(A+B) \le \sigma_{\max}(A) + \sigma_{\max}(B)\]</span></p><ul><li>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是 <span class="math inline">\(m \timesn\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\sum_{j=1}^{p}[\sigma_j(A+B) - \sigma_j(A)]^2 \le \lVert B\rVert_{\mathrm{F}}^2, \ p = \min\{m,n\}\]</span></p><ul><li>若 <span class="math inline">\(A_{m \timesm}=[a_1,a_2,\cdots,a_m]\)</span> 的奇异值 <spanclass="math inline">\(\sigma_1(A) \ge \sigma_2(A) \ge \cdots \ge\sigma_m(A)\)</span>, 则</li></ul><p><span class="math display">\[\sum_{j=1}^{k}[\sigma_{m-k+j}(A)]^2 \le\sum_{j=1}^{k}a_j^{\mathrm{H}}a_j \le \sum_{j=1}^{k}[\sigma_j(A)]^2,\quad k=1,2,\cdots,m\]</span></p><ul><li>若 <span class="math inline">\(p=\min\{m,n\}\)</span>, 且 <spanclass="math inline">\(A_{m \times n}\)</span> 和 <spanclass="math inline">\(B_{m \times n}\)</span> 的奇异值排列为 <spanclass="math inline">\(\sigma_1(A) \ge \sigma_2(A) \ge \cdots \ge\sigma_p(A), \sigma_1(B) \ge \sigma_2(B) \ge \cdots \ge\sigma_p(B)\)</span> 和 <span class="math inline">\(\sigma_1(A+B) \ge\sigma_2(A+B) \ge \cdots \ge \sigma_p(A+B)\)</span>, 则</li></ul><p><span class="math display">\[\sigma_{i+j-1}(AB^{\mathrm{H}}) \le \sigma_i(A)\sigma_j(B), 1 \le i,j\le p,i+j \le p+1\]</span></p><ul><li><p>设 <span class="math inline">\(m \times (n-1)\)</span> 矩阵 <spanclass="math inline">\(B\)</span> 是删去 <span class="math inline">\(m\times n\)</span> 矩阵 <span class="math inline">\(A\)</span>任意一列得到的矩阵, 并且它们的奇异值都按照非降顺序排列, 则</p><p><span class="math display">\[\sigma_1(A) \ge \sigma_1(B) \ge \sigma_2(A) \ge \sigma_2(B) \ge \cdots\ge \sigma_h(A) \ge \sigma_h(B) \ge 0\]</span></p><p>式中, <span class="math inline">\(h = \min\{m,n-1\}\)</span></p></li><li><p>设 <span class="math inline">\((m-1) \times n\)</span> 矩阵 <spanclass="math inline">\(B\)</span> 是删去 <span class="math inline">\(m\times n\)</span> 矩阵 <span class="math inline">\(A\)</span>任意一行得到的矩阵, 并且它们的奇异值都按照非降顺序排列, 则</p><p><span class="math display">\[\sigma_1(A) \ge \sigma_1(B) \ge \sigma_2(A) \ge \sigma_2(B) \ge \cdots\ge \sigma_h(A) \ge \sigma_h(B) \ge 0\]</span></p><p>式中, <span class="math inline">\(h = \min\{m,n-1\}\)</span></p></li><li><p>矩阵 <span class="math inline">\(A_{m \times n}\)</span>的最大奇异值满足不等式</p></li></ul><p><span class="math display">\[\sigma_{\max}(A) \ge [\frac{1}{n}\mathrm{tr}(A^{\mathrm{H}}A)]^{1/2}\]</span></p><h1 id="二秩亏缺最小二乘解">二、秩亏缺最小二乘解</h1><h2 id="低秩矩阵逼近">1. 低秩矩阵逼近</h2><p>在奇异值分析的应用中,常常需要用一个低秩的矩阵逼近一个含噪声或扰动的矩阵. 低秩矩阵好理解,但是这和现实世界中又有什么关系呢?</p><p>举个非常简单的例子, 当拍摄一张大海的照片,看起来就好像一个像素经过不断复杂形成的. 想象最小复制单元是一行或一列,那么类推到矩阵中是不是就是说明组成图像的所有向量其实是线性相关的,然后矩阵的秩就为 1, 这就叫做低秩矩阵. 但是当图中出现轮船, 海鸟,岛屿等事物, 图片的复杂程度就会上升, 也就不能够叫做低秩矩阵.</p><p>在信号处理中, 用低秩矩阵逼近信号矩阵,就是为了去除噪声或扰动的信号.</p><p>下面定理给出了逼近质量的评价.</p><p>定理 1 : 令 <span class="math inline">\(A \in R^{m \times n}\)</span>的奇异值分解由 <span class="math inline">\(A =\sum_{i=1}^{p}\sigma_iu_iv_i^{\mathrm{T}}\)</span> 给出, 其中, <spanclass="math inline">\(p=\mathrm{rank}(A)\)</span></p><p>若 <span class="math inline">\(k &lt; p\)</span>, 并且 <spanclass="math inline">\(A_k=\sum_{i=1}^{k}\sigma_iu_iv_i^{\mathrm{T}}\)</span>,则逼近质量可分别使用谱范数和 <spanclass="math inline">\(\mathrm{Frobenius}\)</span> 范数度量.</p><p><span class="math display">\[\min_{\mathrm{rank}(B)=k}\lVert A-B \rVert_{\mathrm{spec}} = \lVertA-A_k \rVert_{\mathrm{spec}} = \sigma_{k+1} \tag{1}\]</span></p><p><span class="math display">\[\min_{\mathrm{rank}(B)=k}\lVert A-B \rVert_{\mathrm{F}} = \lVert A-A_k\rVert_{\mathrm{F}} = \sqrt{\sum_{i=k+1}^{q}\sigma_i^2} \tag{2}\]</span></p><p>式子中, <span class="math inline">\(q=\min\{m,n\}\)</span>.</p><h2 id="有效秩">2. 有效秩</h2><p>在需要计算秩 <span class="math inline">\(r\)</span> 的估计值 <spanclass="math inline">\(\hat{r}\)</span> 的方法, 在信号处理和系统理论中,常将该估计值称为 "有效秩"</p><p>有效秩确定有以下两种常用方法</p><ol type="1"><li><p>归一化奇异值方法</p><p>计算归一化奇异值</p><p><span class="math display">\[\bar{\sigma_i} = \frac{\hat{\sigma_i}}{\hat{\sigma_1}}\]</span></p><p>选择满足准则</p><p><span class="math display">\[\bar{\sigma_i} \ge \epsilon\]</span></p><p>的最大整数作为有效秩的估计值 <spanclass="math inline">\(\hat{r}\)</span>.</p></li><li><p>范数比方法</p><p>令 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A_k\)</span> 是原 <span class="math inline">\(m\times n\)</span> 矩阵 <span class="math inline">\(A\)</span> 的秩 <spanclass="math inline">\(k\)</span> 近似, 定义该近似矩阵与原矩阵的 <spanclass="math inline">\(\mathrm{Frobenius}\)</span> 范数比为</p><p><span class="math display">\[v(k) = \frac{\lVert A_k \rVert_{\mathrm{F}}}{\lVert A\rVert_{\mathrm{F}}} = \frac{\sqrt{\sigma_1^2 + \sigma_2^2 + \cdots +\sigma_k^2}}{\sigma_1^2 + \sigma_2^2 + \cdots + \sigma_h^2}, \quad h =\min\{m,n\}\]</span></p><p>并选择满足</p><p><span class="math display">\[v(k) \ge \alpha\]</span></p><p>的最大整数作为有效秩估计值 <spanclass="math inline">\(\hat{r}\)</span>. 其中 <spanclass="math inline">\(\alpha\)</span> 是接近于 1 的阈值.</p></li></ol><h2 id="mathrmsvd-的子集选择方法">3. <spanclass="math inline">\(\mathrm{SVD}\)</span> 的子集选择方法</h2><p>算法 1 : 子集选择算法</p><p>Step 1 : 计算 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{SVD}\)</span>, 并确定 <spanclass="math inline">\(A\)</span> 的有效秩 <spanclass="math inline">\(\hat{r}\)</span></p><p>Step 2 : 计算置换矩阵 <span class="math inline">\(P\)</span>, 使得在<span class="math inline">\(AP=[B_1,B_2]\)</span> 中的矩阵 <spanclass="math inline">\(B_1 \in C^{m \times \hat{r}}\)</span> 的列是"足够线性无关的"</p><p>Step 3 : 将 <span class="math inline">\(Ax=0\)</span> 的 <spanclass="math inline">\(\mathrm{LS}\)</span> 问题变换为求 <spanclass="math inline">\(AP\begin{bmatrix}z\\0\end{bmatrix}=b\)</span> 的<span class="math inline">\(\mathrm{LS}\)</span> 解 <spanclass="math inline">\(z \in C^{\hat{r}}\)</span>, 即求 <spanclass="math inline">\(\lVert B_1z = b \rVert_2\)</span> 的极小化变量<span class="math inline">\(z\)</span>.</p><p>算法 2 : 低秩 <span class="math inline">\(\mathrm{LS}\)</span> 算法,给定 <span class="math inline">\(A \in R^{m \times n}, b \inR^m\)</span>, 计算</p><p><span class="math display">\[x = \mathrm{arg}\min_z \Bigg \lVert AP\begin{bmatrix}z\\0\end{bmatrix}-b\Bigg \rVert_2\]</span></p><p>Step 1 : 计算 <span class="math inline">\(\mathrm{SVD}\)</span>,确定有效秩 <span class="math inline">\(\hat{r}\)</span>, 根据 <spanclass="math inline">\(\hat{r}\)</span> 将 <spanclass="math inline">\(V\)</span> 分块为</p><p><span class="math display">\[V = \begin{bmatrix}  V_{11}&amp; V_{12}\\  V_{21}&amp; V_{22}\end{bmatrix}\]</span></p><p>其中, <span class="math inline">\(V_{11} \in R^{\hat{r} \times\hat{r}}\)</span>, 然后存储 <span class="math inline">\(V_{11}\)</span>和 <span class="math inline">\(V_{21}\)</span></p><p>Step 2 : 利用列主元 <span class="math inline">\(\mathrm{QR}\)</span>算法计算 <spanclass="math inline">\(Q^\mathrm{T}[V_{11}^\mathrm{T},V_{21}^\mathrm{T}]P=[R_{11},R_{12}]\)</span>,然后计算 <span class="math inline">\(AP=[B_1,B_2]\)</span>, 其中 <spanclass="math inline">\(B_1 \in R^{m \times \hat{r}}\)</span></p><p>Step 3 : 计算 <span class="math inline">\(z =(B_1^\mathrm{T}B_1)^{-1}B_1^\mathrm{T}b\)</span></p><p>附 列主元 <span class="math inline">\(\mathrm{QR}\)</span> 算法</p><p>给定矩阵 <span class="math inline">\(A \in R^{m \times n}\)</span>,其中, <span class="math inline">\(m \ge n\)</span>. 下面的算法计算 <spanclass="math inline">\(r = \mathrm{rank}(A)\)</span> 和列主元 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解</p><p><span class="math display">\[Q^\mathrm{T}AP=\begin{bmatrix}  R_{11}&amp;R_{12} \\  O&amp;O\end{bmatrix}\]</span></p><p>其中, <span class="math inline">\(R_{11} \in R^{r \times r}\)</span>是上三角的非奇异矩阵, 作为输出结果, <spanclass="math inline">\(A\)</span> 的上三角部分存放 <spanclass="math inline">\(R\)</span> 的上三角部分, 置换矩阵 <spanclass="math inline">\(P\)</span> 用整数向量 <spanclass="math inline">\(piv\)</span> 编码 (若 <spanclass="math inline">\(piv\)</span> 的第 <spanclass="math inline">\(j\)</span> 个元素等于整数 <spanclass="math inline">\(m\)</span>, 则 <spanclass="math inline">\(P\)</span> 的第 <spanclass="math inline">\(j\)</span> 列仅第 <spanclass="math inline">\(m\)</span> 个元素为 1, 而其他元素皆为零)</p><p>例: 假定</p><p><span class="math display">\[\begin{bmatrix}  3&amp;  4&amp; -1\\  7&amp;  4&amp; -3\\  2&amp;  5&amp; 3\\  -1&amp; 4&amp; 5\end{bmatrix}, \quad b  = \begin{bmatrix}1\\1\\1\\1\end{bmatrix}\]</span></p><p>得到 <span class="math inline">\(\mathrm{rank}(A)=2\)</span> 和</p><p><span class="math display">\[x_{\mathrm{LS}} = \begin{bmatrix}0.0815\\0.1545\\0.0730\end{bmatrix}\]</span></p><p>应用算法 低秩 <span class="math inline">\(\mathrm{LS}\)</span>方法得到</p><p><span class="math display">\[P = \begin{bmatrix}  0&amp;  1&amp; 0\\  1&amp;  0&amp; 0\\  0&amp;  0&amp; 1\end{bmatrix}, \quad x = \begin{bmatrix}0.0845\\0.2275\\0.0000\end{bmatrix}\]</span></p><h1 id="三奇异值分解的-mathrmqr-分解算法">三、奇异值分解的 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解算法</h1><p>通常是两个阶段:</p><p>第一阶段为矩阵的二重对角化, 通过 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换将矩阵 <spanclass="math inline">\(A_{m \times n}\)</span> 变换为二重对角矩阵(除对角线及其上面一条对角线的元素外, 其他元素全为零).</p><p>第二阶段利用 <span class="math inline">\(\mathrm{QR}\)</span> 分解,保存二重对角矩阵的形式不变, 利用正交变换使上一条对角线的元素逐渐减小,使矩阵接近对角矩阵. 此时, 需要具体构造正交矩阵 <spanclass="math inline">\(V\)</span>, 但 <spanclass="math inline">\(U\)</span> 可以不予保留.</p><p>和之前在线性代数中学习的人工进行 <spanclass="math inline">\(SVD\)</span> 分解不同,这里的算法更适合于计算机.</p><p>有点难度, 需要慢慢消化.</p><p>(...... 未完待续)</p><h1 id="四奇异值分解的精确计算">四、奇异值分解的精确计算</h1><p>初始矩阵 <span class="math inline">\(A\)</span>的元素通过观察或计算得到, 存在一定的误差.为了使得奇异值和奇异向量的计算结果是精确的, 提出了右边 <spanclass="math inline">\(\mathrm{Jacobi}\)</span> 旋转.</p><p>(...... 未完待续)</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-6.2-奇异值分解-Section1</title>
    <link href="/posts/b0a5a636/"/>
    <url>/posts/b0a5a636/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一奇异值分解及其解释">一、奇异值分解及其解释</h1><h2 id="奇异值分解定义">1. 奇异值分解定义</h2><p>对于任意复长方矩阵都可以进行奇异值分解.</p><p>定理 1 (矩阵的奇异值分解) : 令 <span class="math inline">\(A \in R^{m\times n}\)</span> ( 或 <span class="math inline">\(C^{m \timesn}\)</span> ), 则存在正交 (或酉) 矩阵 <span class="math inline">\(U \inR^{m \times m}\)</span> 和 <span class="math inline">\(V \in R^{n \timesn}\)</span> ( 或 <span class="math inline">\(C^{n \times n}\)</span> )使得</p><p><span class="math display">\[A = U \Sigma V^{\mathrm{T}} \ ( \ 或 \ U \Sigma V^{\mathrm{H}} ) \tag{1}\]</span></p><p>式子中</p><p><span class="math display">\[\Sigma = \begin{bmatrix}  \Sigma_1&amp; O\\  O&amp;O\end{bmatrix} \tag{2}\]</span></p><p>且 <span class="math inline">\(\Sigma_1 =\mathrm{diag}(\sigma_1,\sigma_2,\cdots,\sigma_r)\)</span>,其对角元素按照顺序</p><p><span class="math display">\[\sigma_1 \ge \sigma_2 \ge \cdots \ge \sigma_r &gt; 0, \quad r =\mathrm{rank}(A) \tag{3}\]</span></p><p>排列, 这些值自然也被称作奇异值.</p><p>定义 1 : 矩阵 <span class="math inline">\(A_{m \times n}\)</span>的奇异值 <span class="math inline">\(\sigma_i\)</span> 称为单奇异值, 若<span class="math inline">\(\sigma_i \neq \sigma_j, \forall j \neqi\)</span></p><h2 id="奇异值和奇异值分解解释及其标记">2.奇异值和奇异值分解解释及其标记</h2><ul><li><p><span class="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(V\)</span> 为酉矩阵, 用 <spanclass="math inline">\(V\)</span> 右乘式 <span class="math inline">\(A =U \Sigma V^{\mathrm{T}}\)</span> 得到 <spanclass="math inline">\(AV=U\Sigma\)</span>, 其列向量形式为</p><p><span class="math display">\[  Av_i =  \left\{\begin{matrix}  \sigma_iu_i&amp; i=1,2,\cdots,r\\  0&amp; i=r+1,r+2,\cdots,n  \end{matrix}\right. \tag{4}  \]</span></p><p>因此, <span class="math inline">\(V\)</span> 的列向量 <spanclass="math inline">\(v_i\)</span> 称为矩阵 <spanclass="math inline">\(A\)</span> 的右奇异向量, <spanclass="math inline">\(V\)</span> 称为 <spanclass="math inline">\(A\)</span> 的右奇异向量矩阵.</p></li><li><p><span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(U^{\mathrm{H}}\)</span> 为酉矩阵, 用 <spanclass="math inline">\(U^{\mathrm{H}}\)</span> 左乘式 <spanclass="math inline">\(A = U \Sigma V^{\mathrm{T}}\)</span> 得到 <spanclass="math inline">\(U^{\mathrm{H}}A=\Sigma V\)</span>,其列向量形式为</p><p><span class="math display">\[  u_i^{\mathrm{H}}A =  \left\{\begin{matrix}  \sigma_iv_i^{\mathrm{T}}&amp; i=1,2,\cdots,r\\  0&amp; i=r+1,r+2,\cdots,n  \end{matrix}\right. \tag{5}  \]</span></p><p>因此, <span class="math inline">\(U\)</span> 的列向量 <spanclass="math inline">\(u_i\)</span> 称为矩阵 <spanclass="math inline">\(A\)</span> 的左奇异向量, <spanclass="math inline">\(U\)</span> 称为 <spanclass="math inline">\(A\)</span> 的左奇异向量矩阵.</p></li><li><p>矩阵 <span class="math inline">\(A\)</span>的奇异值分解式子也可以改成向量形式</p><p><span class="math display">\[  A= \sum_{i=1}^{r}\sigma_i u_i v_i^{\mathrm{H}} \tag{6}  \]</span></p><p>这种叫 <span class="math inline">\(A\)</span> 的并向量 (奇异值)分解</p></li><li><p>观察到奇异值分解式子, 有</p><p><span class="math display">\[  AA^{\mathrm{H}} = U \Sigma^2U^{\mathrm{H}} \tag{7}  \]</span></p><p>表明, <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的奇异值 <spanclass="math inline">\(\sigma_i\)</span> 是矩阵乘积 <spanclass="math inline">\(AA^{\mathrm{H}}\)</span>的特征值的正平方根.</p></li><li><p>当矩阵 <span class="math inline">\(A\)</span> 的秩 <spanclass="math inline">\(r = \mathrm{rank}(A) &lt; \min\{m,n\}\)</span> 时,由于奇异值 <span class="math inline">\(\sigma_{r+1} = \sigma_{r+2} =\cdots =\sigma_h = 0, h = \min\{m,n\}\)</span>,奇异值分解公式可以简化为</p><p><span class="math display">\[  A=U_r\Sigma_rV_r^{\mathrm{H}} \tag{8}  \]</span></p><p>式子中</p><p><span class="math display">\[  U_r = [u_1,u_2,\cdots,u_r], \quad V_r = [v_1,v_2,\cdots,v_r], \quad\Sigma_r = \mathrm{diag}[\sigma_1,\sigma_2,\cdots,\sigma_r]  \]</span></p><p>式子 (7) 称为矩阵 <span class="math inline">\(A\)</span>的截尾奇异值分解或薄奇异值分解. 那么之前那个就叫做全奇异值分解.</p></li><li><p>如果矩阵 <span class="math inline">\(A_{m \times n}\)</span>具有秩 <span class="math inline">\(r\)</span>, 则</p><ul><li><p><span class="math inline">\(m \times m\)</span> 酉矩阵 <spanclass="math inline">\(U\)</span> 的前 <spanclass="math inline">\(r\)</span> 列组成矩阵 <spanclass="math inline">\(A\)</span> 的列空间的标准正交基</p></li><li><p><span class="math inline">\(n \times n\)</span> 酉矩阵 <spanclass="math inline">\(V\)</span> 的前 <spanclass="math inline">\(r\)</span> 列组成矩阵 <spanclass="math inline">\(A\)</span> 的行空间 (或 <spanclass="math inline">\(A^{\mathrm{H}}\)</span> 的列空间)的标准正交基</p></li><li><p><span class="math inline">\(V\)</span> 的后 <spanclass="math inline">\(n - r\)</span> 列组成矩阵 <spanclass="math inline">\(A\)</span> 的零空间的标准正交基</p></li><li><p><span class="math inline">\(U\)</span> 的后 <spanclass="math inline">\(m - r\)</span> 列组成矩阵 <spanclass="math inline">\(A^{\mathrm{H}}\)</span>的零空间的标准正交基</p></li></ul></li></ul><h2 id="矩阵的秩亏缺">3. 矩阵的秩亏缺</h2><p>定理 2 : 令 <span class="math inline">\(A \in C^{m \times n} (m &gt;n)\)</span> 的奇异值为</p><p><span class="math display">\[\sigma_1 \ge \sigma_2 \ge \cdots \ge \sigma_r \ge 0\]</span></p><p>则</p><p><span class="math display">\[\sigma_k = \min_{E \in C^{m \times n}} \{ \lVert E \rVert_{\mathrm{F}} :{\mathrm{rank}}(A+E) \le k -1\}, \quad k=1,2,\cdots,n \tag{9}\]</span></p><p>并且存在一满足 <span class="math inline">\(\lVert E\rVert_{\mathrm{F}} = \sigma_k\)</span> 的误差矩阵 <spanclass="math inline">\(E\)</span> 使得</p><p><span class="math display">\[\mathrm{rank}(A+E_k) = k-1, \quad k = 1,2,\cdots,n\]</span></p><p>矩阵的奇异值如果为零, 说明这个矩阵一定不是行满秩或者列满秩.这就叫矩阵的秩亏缺.</p><p>对于方阵用行列式就可以很直观看出来, 对于非方阵就需要考虑线性变换.</p><h1 id="二奇异值的性质">二、奇异值的性质</h1><h2 id="矩阵变形与奇异值变化">1. 矩阵变形与奇异值变化</h2><p>令矩阵 <span class="math inline">\(A\)</span> 和矩阵 <spanclass="math inline">\(B\)</span> 均为 <span class="math inline">\(m\times n\)</span> 矩阵, 并且 <span class="math inline">\(r_A =\mathrm{rank}(A), p = \min\{m,n\}\)</span></p><p>设矩阵 <span class="math inline">\(A\)</span> 的奇异值排列为</p><p><span class="math display">\[\sigma_{\mathrm{max}} = \sigma_1 \ge \sigma_2 \ge \cdots \ge\sigma_{p-1} \ge \sigma_p = \sigma_{\mathrm{min}} \ge 0 \tag{10}\]</span></p><p>并且用 <span class="math inline">\(\sigma_i(B)\)</span> 表示矩阵<span class="math inline">\(B\)</span> 的第 <spanclass="math inline">\(i\)</span> 个奇异值.</p><p>矩阵的各种变形与奇异值的变化有以下关系.</p><ul><li><p><span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的共轭转置 <spanclass="math inline">\(A^\mathrm{H}\)</span> 的奇异值分解为</p><p><span class="math display">\[  A^\mathrm{H} = V \Sigma^\mathrm{T} U^\mathrm{H} \tag{11}  \]</span></p><p>即 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(A^\mathrm{H}\)</span> 有完全相同的奇异值.</p></li><li><p><span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span> 分别为 <span class="math inline">\(m\times m\)</span> 和 <span class="math inline">\(n \times n\)</span>酉矩阵时, <span class="math inline">\(PAQ^\mathrm{H}\)</span>的奇异值分解由</p><p><span class="math display">\[  PAQ^\mathrm{H} = \bar{U} \Sigma \bar{V}^\mathrm{H} \tag{12}  \]</span></p><p>给出, 其中, <span class="math inline">\(\bar{U} = PU,\bar{V}=QV\)</span>. 就是说, 矩阵 <spanclass="math inline">\(PAQ^\mathrm{H}\)</span> 与 <spanclass="math inline">\(A\)</span> 具有相同的奇异值, 即奇异值具有酉不变性,但奇异向量不同. 这个性质和特征值、特征向量之间的关系非常相似.</p></li><li><p><span class="math inline">\(A^\mathrm{H}A, AA\mathrm{H}\)</span>的奇异值分解分别为</p><p><span class="math display">\[  AA^\mathrm{H} = V \Sigma^\mathrm{T}\Sigma V^\mathrm{H}, \quadAA^\mathrm{H} = U \Sigma\Sigma^\mathrm{T} U^\mathrm{H} \tag{13}  \]</span></p><p>其中</p><p><span class="math display">\[  \Sigma^\mathrm{T}\Sigma =\mathrm{diag}(\sigma_1^2,\sigma_2^2,\cdots,\sigma_r^2,\overbrace{0,\cdots,0}^{n- r个}) \tag{14}  \]</span></p><p><span class="math display">\[  \Sigma\Sigma^\mathrm{T} =\mathrm{diag}(\sigma_1^2,\sigma_2^2,\cdots,\sigma_r^2,\overbrace{0,\cdots,0}^{m- r个}) \tag{15}  \]</span></p></li><li><p><span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的奇异值分解与 <spanclass="math inline">\(n \times m\)</span> 维 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 广义逆矩阵 <spanclass="math inline">\(A^\dagger\)</span> 之间存在下列关系</p><p><span class="math display">\[  A^\dagger = V \Sigma^\dagger U^\mathrm{H} \tag{16}  \]</span></p><p>其中 <span class="math inline">\(\Sigma^\dagger = \begin{bmatrix}\Sigma^{-1}&amp; O\\ O&amp;O \end{bmatrix}\)</span></p></li></ul><h2 id="奇异值和矩阵性质之间的关系">2. 奇异值和矩阵性质之间的关系</h2><p>定理 3 : 令 <span class="math inline">\(A\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 其奇异值 <spanclass="math inline">\(\sigma_1 \ge \sigma_2 \ge \cdots \ge\sigma_r\)</span>, 其中, <span class="math inline">\(r =\min\{m,n\}\)</span>. 若 <span class="math inline">\(p \times q\)</span>矩阵 <span class="math inline">\(B\)</span> 是 <spanclass="math inline">\(A\)</span> 的子矩阵, 其奇异值 <spanclass="math inline">\(\gamma_1 \ge \gamma_2 \ge \cdots \ge\gamma_{\min\{p,q\}}\)</span> 则</p><p><span class="math display">\[\sigma_i \ge \gamma_i , \quad i=1,2,\cdots,\min\{p,q\} \tag{17}\]</span></p><p>并且</p><p><span class="math display">\[\gamma_i \ge \sigma_{i+(m-p)+(n-1)}, \quad i \le \min\{p+1-m,p+1-n\}\tag{18}\]</span></p><ol type="1"><li><p>奇异值与范数的关系</p><p>矩阵 <span class="math inline">\(A\)</span> 的谱范数等于 <spanclass="math inline">\(A\)</span> 的最大奇异值, 即</p><p><span class="math display">\[\lVert A \rVert_{\mathrm{spec}} = \sigma_1 \tag{19}\]</span></p><p>又有 <span class="math inline">\(\lVert U^{\mathrm{H}}AV\rVert_{\mathrm{F}} = \lVert A \rVert_{\mathrm{F}}\)</span>, 故有</p><p><span class="math display">\[\lVert A \rVert_{\mathrm{F}} = \left [ \sum_{i=1}^{m}\sum_{j=1}^{n}|a_{ij}|^2 \right ] ^{1/2} \tag{20}\]</span></p><p><span class="math display">\[\lVert A \rVert_{\mathrm{F}} =\sqrt{\sigma_1^2+\sigma_2^2+\cdots+\sigma_r^2} \tag{21}\]</span></p><p>考虑矩阵 <span class="math inline">\(A\)</span> 的秩 <spanclass="math inline">\(k\)</span> 近似, 并将其记作 <spanclass="math inline">\(A_k\)</span>, 其中, <span class="math inline">\(k&lt; r = \mathrm{rank}(A)\)</span>. 矩阵 <spanclass="math inline">\(A_k\)</span> 定义如下:</p><p><span class="math display">\[A_k = \sum_{i=1}^{k}\sigma_iu_iv_i^{\mathrm{H}}, \quad k &lt; r\]</span></p><p>则 <span class="math inline">\(A\)</span> 与秩为 <spanclass="math inline">\(k\)</span> 的任一矩阵 <spanclass="math inline">\(B\)</span> 之差的 <spanclass="math inline">\(l_1\)</span> 和 <spanclass="math inline">\(\mathrm{Frobineus}\)</span> 范数分别为</p><p><span class="math display">\[\min_{\mathrm{rank}(B)=k} \lVert A-B \rVert_1 = \lVert A-A_k \rVert_1=\sigma_{k+1} \tag{22}\]</span></p><p>和</p><p><span class="math display">\[\min_{\mathrm{rank}(B)=k} \lVert A-B \rVert_{\mathrm{F}}^2 = \lVertA-A_k \rVert_{\mathrm{F}}^2 =\sigma_{k+1}^2 + \sigma_{k+2}^2 + \cdots +\sigma_{r}^2 \tag{23}\]</span></p></li><li><p>奇异值与行列式的关系</p><p><span class="math display">\[|\mathrm{det}(A)| = |\mathrm{det}\Sigma| = \sigma_1 \sigma_2 \cdots\sigma_n \tag{24}\]</span></p><p>还有一些不等式关系, 对于一个 <span class="math inline">\(n \timesn\)</span> 矩阵 <span class="math inline">\(A\)</span></p><p><span class="math display">\[\left.\begin{matrix}     n\sigma_1 \ge \lVert A \rVert_{\mathrm{F}} \ge \sigma_1 \\     \sigma_1^n \ge \sigma_1^{n-1}\sigma_n \ge |\mathrm{det}(A)| \ge\sigma_n^n\\     \lVert A \rVert_{\mathrm{F}} \ge \sigma_1 \ge|\mathrm{det}(A)|^{1/n} \\     |\mathrm{det}(A)|^{1/n} \ge \sigma_n \ge |\mathrm{det}(A)| / \lVertA \rVert_{\mathrm{F}}^{n-1}\\     \lVert A \rVert_{\mathrm{F}}^n / |\mathrm{det}(A)| \ge \sigma_1 /\sigma_2 \ge \max \{1, \frac{1}{n} \lVert A \rVert_{\mathrm{F}}/|\mathrm{det}(A)|^{1/n}\}\end{matrix}\right\} \tag{25}\]</span></p></li><li><p>奇异值与条件数的关系</p><p>对于一个 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span>, 其条件数也可以利用奇异值定义为</p><p><span class="math display">\[\mathrm{cond}(A) = \sigma_1/\sigma_p, \quad p = \min\{m,n\} \tag{26}\]</span></p><p>条件数在之前也没有接触过, 就写到这里作罢.</p></li><li><p>奇异值与特征值的关系</p><p>设 <span class="math inline">\(n \times n\)</span> 对称方阵 <spanclass="math inline">\(A\)</span> 的特征值为 <spanclass="math inline">\(\lambda_1,\lambda_2,\cdots,\lambda_n (|\lambda_1|\ge |\lambda_2| \ge \cdots \ge |\lambda_n|)\)</span>, 奇异值为 <spanclass="math inline">\(\sigma_1,\sigma_2,\cdots,\sigma_n(\sigma_1 \ge\sigma_2 \ge \cdots \ge \sigma_n \ge 0)\)</span>, 则 <spanclass="math inline">\(\sigma_1 \ge |\lambda_i| \ge \sigma_n(i=1,2,\cdots,n), \mathrm{cond}(A) \ge |\lambda_1| /|\lambda_n|\)</span></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-5.3-共轭梯度与无约束最优化</title>
    <link href="/posts/e9155ee4/"/>
    <url>/posts/e9155ee4/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>更加详细的内容可以跳转网址 <ahref="https://zlearning.netlify.app/math/matrix/matrix-gradient.html">https://zlearning.netlify.app/math/matrix/matrix-gradient.html</a></p><h1 id="一标量函数的共轭梯度公式">一、标量函数的共轭梯度公式</h1><ol type="1"><li><p>若 <span class="math inline">\(f(x) = c\)</span> 为常数,则共轭梯度 <span class="math inline">\(\frac{\partial c}{\partial x^*} =0\)</span></p></li><li><p>线性法则: 若 <span class="math inline">\(f(x)\)</span> 和 <spanclass="math inline">\(g(x)\)</span> 分别是向量 <spanclass="math inline">\(x\)</span> 的实值函数, <spanclass="math inline">\(c_1\)</span> 和 <spanclass="math inline">\(c_2\)</span> 为复常数, 则</p></li></ol><p><span class="math display">\[\frac{\partial [c_1f(x) + c_2g(x)]}{\partial x^*} = c_1 \frac{\partialf(x)}{\partial x^*} + c_2 \frac{\partial g(x)}{\partial x^*} \tag{1}\]</span></p><ol start="3" type="1"><li><p>乘积法则</p><ul><li>若 <span class="math inline">\(f(x)\)</span> 和 <spanclass="math inline">\(g(x)\)</span> 都是向量 <spanclass="math inline">\(x\)</span> 的实值函数, 则</li></ul><p><span class="math display">\[\frac{\partial f(x)g(x)}{\partial x^*} = g(x) \frac{\partialf(x)}{\partial x^*} + f(x) \frac{\partial g(x)}{\partial x^*} \tag{2}\]</span></p><ul><li>若 <span class="math inline">\(f(x)\)</span> , <spanclass="math inline">\(g(x)\)</span> 和 <spanclass="math inline">\(h(x)\)</span> 都是向量 <spanclass="math inline">\(x\)</span> 的实值函数, 则</li></ul><p><span class="math display">\[\frac{\partial f(x)g(x)h(x)}{\partial x^*} = g(x)h(x) \frac{\partialf(x)}{\partial x^*} + f(x)h(x) \frac{\partial g(x)}{\partial x^*}+f(x)g(x) \frac{\partial h(x)}{\partial x^*} \tag{3}\]</span></p></li><li><p>商法则: 若 <span class="math inline">\(g(x) \neq 0\)</span>,则</p><p><span class="math display">\[\frac{\partial f(x)/g(x)}{\partial x^*} = \frac{1}{ {g^2} (x)} [ g(x)\frac{\partial f(x)}{\partial x^*} - f(x) \frac{\partial g(x)}{\partialx^*}] \tag{4}\]</span></p></li><li><p>链式法则: 若 <span class="math inline">\(y(x)\)</span> 是 <spanclass="math inline">\(x\)</span> 的复向量值函数, 则</p><p><span class="math display">\[\frac{\partial f(y(x))}{\partial x^*} = \frac{\partial[y(x)]^{\mathrm{T}}}{\partial x^*} \frac{\partial f(y)}{\partial y}\tag{5}\]</span></p><p>式子中, <span class="math inline">\(\frac{\partial[y(x)]^{\mathrm{T}}}{\partial x^*}\)</span> 为 <spanclass="math inline">\(n \times n\)</span> 矩阵.</p></li><li><p>若 <span class="math inline">\(n \times 1\)</span> 向量为 <spanclass="math inline">\(a\)</span> 与 <spanclass="math inline">\(x\)</span> 无关的常数向量, 则</p></li></ol><p><span class="math display">\[\frac{\partial a^{\mathrm{H}}x}{\partial x^*} = a, \quad \frac{\partialx^{\mathrm{H}}a}{\partial x^*} = a \tag{6}\]</span></p><p>( 此处的第一个式子存疑, 应该是 <span class="math inline">\(a\)</span>而不是书上所写的 0 )</p><ol start="7" type="1"><li>令 <span class="math inline">\(A\)</span> 是一个与向量 <spanclass="math inline">\(x\)</span> 无关的矩阵, 则</li></ol><p><span class="math display">\[\begin{aligned}\frac{\partial x^{\mathrm{H}}Ax}{\partial x} = A^{\mathrm{H}}x^*, \quad\frac{\partial x^{\mathrm{H}}Ax}{\partial x^*} = Ax \\\frac{\partial x^{\mathrm{H}}Ay}{\partial A} = x^*y^{\mathrm{T}}, \quad\frac{\partial x^{\mathrm{H}}Ax}{\partial A} = x^*x^{\mathrm{T}}\end{aligned} \tag{7}\]</span></p><h1 id="二例题解析">二、例题解析</h1><p>常见的迹函数的共轭梯度的常用公式</p><p><span class="math display">\[\begin{aligned}\frac{\partial \mathrm{tr}(yx^{\mathrm{H}})}{\partial x^*} &amp;=\frac{\partial \mathrm{tr}(x^{\mathrm{H}}y)}{\partial x^*} = y \\\frac{\partial \mathrm{tr}(BA^{\mathrm{H}})}{\partial A^*} &amp;=\frac{\partial \mathrm{tr}(A^{\mathrm{H}}B)}{\partial A^*} = B \\\frac{\partial \mathrm{tr}(A^{\mathrm{H}})}{\partial A^*} &amp;= I,\quad \frac{\partial \mathrm{tr}(A)}{\partial A^*} = O \\\frac{\partial \mathrm{tr}(A^{\mathrm{H}}WA)}{\partial A^*} &amp;= WA,\quad \frac{\partial \mathrm{tr}(AWA^{\mathrm{H}})}{\partial A^*} = AW\\\end{aligned} \tag{8}\]</span></p><p>在 <span class="math inline">\(\mathrm{CDMA}\)</span> 系统中,仍然共有 <span class="math inline">\(K\)</span> 个用户在通信,但每个用户的扩频波形向量变成复向量 <spanclass="math inline">\(s_k(t)\)</span>, 接受信号向量 <spanclass="math inline">\(y\)</span> 也为复向量. 此外, 设计多用户检测器<span class="math inline">\(M\)</span> 的目标函数变为</p><p><span class="math display">\[\begin{aligned}J(M) &amp;= E\{\lVert b - My \rVert_2^2\} \\&amp;= \mathrm{tr}(\mathrm{cov}(b - My)) \\&amp;= \mathrm{tr}(I) + \mathrm{tr}(M(RA^2R + \sigma^2R)M^{\mathrm{H}})- \mathrm{tr}(ARM^{\mathrm{H}}) - \mathrm{tr}(MRA)\end{aligned}\]</span></p><p>利用迹函数的共轭梯度常用公式可得</p><p><span class="math display">\[\frac{\partial J(M)}{\partial M^*} = M(RA^2R + \sigma^2R) - AR\]</span></p><p>令其等于零, 并假定 <span class="math inline">\(R\)</span> 非奇异,就有</p><p><span class="math display">\[M = A(RA^2 + \sigma^2I)^{-1}\]</span></p><h1 id="三总结">三、总结</h1><p>我不知道为什么这本书上在表达共轭梯度公式的时候要在分母的地方用向量或者矩阵右上角添加一个星号来表示.刚开始我就觉得这个是伴随矩阵,但是实际运算的时候和伴随矩阵一点关系都没有. 之后恍然大悟,原来是复共轭的符号.</p><p>在符号表示这方面其实还是存在着很多坑.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-4.7-QR分解及其应用-Section2</title>
    <link href="/posts/3da8742f/"/>
    <url>/posts/3da8742f/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一采用-mathrmgivens-旋转的-mathrmqr-分解">一、采用 <spanclass="math inline">\(\mathrm{Givens}\)</span> 旋转的 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解</h1><p><span class="math inline">\(\mathrm{Givens}\)</span>旋转也可以用来计算 <span class="math inline">\(\mathrm{QR}\)</span>分解. 这里以 <span class="math inline">\(4 \times 3\)</span> 矩阵为例,说明 <span class="math inline">\(\mathrm{Givens \ QR}\)</span>分解的思想.</p><p><span class="math display">\[\begin{aligned}  &amp; \begin{bmatrix}    \times &amp; \times &amp; \times \\    \times &amp; \times &amp; \times \\    \otimes &amp; \times &amp; \times\\    \otimes &amp; \times &amp; \times  \end{bmatrix} \overset{G(3,4)}{\longrightarrow} \begin{bmatrix}    \times &amp; \times &amp; \times \\    \otimes &amp; \times &amp; \times \\    \otimes &amp; \times &amp; \times\\    0 &amp; \times &amp; \times  \end{bmatrix} \overset{G(2,3)}{\longrightarrow} \begin{bmatrix}    \otimes &amp; \times &amp; \times \\    \otimes &amp; \times &amp; \times \\    0 &amp; \times &amp; \times\\    0 &amp; \times &amp; \times  \end{bmatrix} \overset{G(1,2)}{\longrightarrow} \begin{bmatrix}    \times &amp; \times &amp; \times \\    0 &amp; \times &amp; \times \\    0 &amp; \otimes &amp; \times\\    0 &amp; \otimes &amp; \times  \end{bmatrix} \overset{G(3,4)}{\longrightarrow} \\  &amp; \begin{bmatrix}    \times &amp; \times &amp; \times \\    0 &amp; \otimes &amp; \times \\    0 &amp; \otimes &amp; \times\\    0 &amp; 0 &amp; \times  \end{bmatrix} \overset{G(2,3)}{\longrightarrow} \begin{bmatrix}    \times &amp; \times &amp; \times \\    0 &amp; \times &amp; \times \\    0 &amp; 0 &amp; \otimes\\    0 &amp; 0 &amp; \otimes  \end{bmatrix} \overset{G(3,4)}{\longrightarrow} \begin{bmatrix}    \times &amp; \times &amp; \times \\    0 &amp; \times &amp; \times \\    0 &amp; 0 &amp; \times\\    0 &amp; 0 &amp; 0  \end{bmatrix}\end{aligned}\]</span></p><p>其中 <span class="math inline">\(\otimes\)</span> 代表用 <spanclass="math inline">\(\mathrm{Givens}\)</span> 旋转进行变换的元素.变换过程就是乘以箭头上用 <span class="math inline">\(G(i,j)\)</span>表示的 <span class="math inline">\(\mathrm{Givens}\)</span> 矩阵.</p><p>从上述说明中易得出结论: 如果令 <spanclass="math inline">\(G_j\)</span> 代表约化过程中的第 <spanclass="math inline">\(j\)</span> 次 <spanclass="math inline">\(\mathrm{Givens}\)</span> 旋转, 则 <spanclass="math inline">\(Q^{\mathrm{T}}A=R\)</span> 是上三角矩阵, 其中,<span class="math inline">\(Q = G_tG_{t-1} \cdots G_1\)</span>, 而 <spanclass="math inline">\(t\)</span> 是总的旋转次数.</p><p>归根到底还是为了解方程, 不论是有解还是最小二乘法, <spanclass="math inline">\(\mathrm{QR}\)</span> 分解都是一个不错的选择.</p><h1 id="二基于-mathrmqr-分解的参数估计问题">二、基于 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解的参数估计问题</h1><p>系统辨识问题的提法是: 已知系统输入 <spanclass="math inline">\(x(k)\)</span> 和输出观测值 <spanclass="math inline">\(y(k)\)</span>, 其中, <span class="math inline">\(k= 1,2,\cdots,n\)</span> 估计系统参数向量 <spanclass="math inline">\(\theta\)</span>. 在时变系统的辨识中,则要求在已估计 <span class="math inline">\(n\)</span> 时刻的系统参数向量<span class="math inline">\(\theta_n\)</span> 的情况下, 使用增加的 <spanclass="math inline">\(x(n+1),y(n+1)\)</span> 值, 通过简单的运算, 递推出<span class="math inline">\(n + 1\)</span> 时刻的系统参数向量 <spanclass="math inline">\(\theta_{n+1}\)</span>. <spanclass="math inline">\(n\)</span>时刻的系统辨识问题可以化为最小二乘问题.</p><p>看起来有点像预测方面的问题.</p><p><span class="math display">\[\min_{\theta_n} \lVert A_n\theta_n - y_n \rVert^2_2 \tag{1}\]</span></p><p>求解, 并且其解由 "法方程"</p><p><span class="math display">\[A_n^{\mathrm{T}}A_n\theta_n = A_n^{\mathrm{T}}y_n \ 或者 \R_{xx}\theta_n = r_n \tag{2}\]</span></p><p>确定. 式中, <span class="math inline">\(R_{xx} =A_n^{\mathrm{T}}A_n\)</span> 代表系统输入 <spanclass="math inline">\(x(k)\)</span> 的协方差矩阵, <spanclass="math inline">\(r_n = A_n^{\mathrm{T}}y_n\)</span>.</p><p>之间求解式 (2) 的方法叫做协方差方法.</p><p>引理 1: 若 <span class="math inline">\(A_n = Q_n \begin{bmatrix}R_n\\ O\end{bmatrix}, Q_n^{\mathrm{T}}y_n= \begin{bmatrix} \bar{y}_n\\\tilde{y}_n \end{bmatrix}\)</span>, 其中, <spanclass="math inline">\(Q_n\)</span> 是正交矩阵, <spanclass="math inline">\(R_n\)</span> 是上三角矩阵. 故有</p><p><span class="math display">\[\begin{aligned}\theta_{n+1} &amp;= \argmin_\theta \lVert A_{n+1}\theta - y_{n+1}\rVert^2_2&amp;= \argmin_\theta \bigg \lVert \begin{bmatrix} \lambda R_n\\x_{n+1}^{\mathrm{T}}\end{bmatrix}\theta - \begin{bmatrix} \lambda\bar{y}_n\\ y(n+1)\end{bmatrix} \bigg \rVert^2_2\end{aligned} \tag{3}\]</span></p><p>算法 1: 系统参数的自适应估计算法</p><p>Step 1 : 对矩阵 <span class="math inline">\(\bar{R} = \begin{bmatrix}\lambda R_n\\ x_{n+1}^{\mathrm{T}}\end{bmatrix}\)</span> 进行 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解, 得到</p><p><span class="math display">\[Q_{n+1}^{\mathrm{T}} \bar{R} = Q_{n+1}^{\mathrm{T}}\begin{bmatrix}\lambda R_n\\ x_{n+1}^{\mathrm{T}}\end{bmatrix} = \begin{bmatrix}R_{n+1}\\ O\end{bmatrix} \tag{4}\]</span></p><p>式子中, <span class="math inline">\(Q_{n+1}\)</span> 是 <spanclass="math inline">\((n+1) \times (n+1)\)</span> 正交矩阵, <spanclass="math inline">\(R_{n+1}\)</span> 为 <spanclass="math inline">\((p+1) \times (p+1)\)</span> 上三角矩阵, 且 <spanclass="math inline">\(O\)</span> 是 <span class="math inline">\((n-p)\times (p+1)\)</span> 零矩阵.</p><p>Step 2 : 进行分块运算</p><p><span class="math display">\[Q_{n+1}^{\mathrm{T}}y_{n+1} = \begin{bmatrix} \bar{y}_{n+1} \\\tilde{y}_{n+1}\end{bmatrix}\]</span></p><p>其中, <span class="math inline">\(\bar{y}_{n+1}\)</span> 为 <spanclass="math inline">\((p+1) \times 1\)</span> 向量, <spanclass="math inline">\(\tilde{y}_{n+1}\)</span> 为 <spanclass="math inline">\((n-p) \times 1\)</span> 向量</p><p>Step 3 : 求解三角矩阵方程 <spanclass="math inline">\(R_{n+1}\theta_{n+1} = \bar{y}_{n+1}\)</span> 得到<span class="math inline">\(\theta_{n+1}\)</span></p><h1 id="三基于-mathrmhouseholder-变换的快速时变参数估计">三、基于 <spanclass="math inline">\(\mathrm{Householder}\)</span>变换的快速时变参数估计</h1><p>考查 <span class="math inline">\(n \times (p+1)\)</span> 矩阵</p><p><span class="math display">\[A_n = \begin{bmatrix}  a_{11}&amp;  a_{12}&amp;  \cdots&amp; a_{1,p+1}\\  a_{21}&amp;  a_{22}&amp;  \cdots&amp; a_{2,p+1}\\  \vdots&amp;  \vdots&amp;  &amp;\vdots \\  a_{n1}&amp;  a_{n2}&amp;  \cdots&amp; a_{n,p+1}\end{bmatrix}\]</span></p><p>的 <span class="math inline">\(\mathrm{Householder \ QR}\)</span>分解, 即</p><p><span class="math display">\[H_nA_n = \begin{bmatrix}  a_{11}^*&amp;  a_{12}^*&amp;  \cdots&amp; a_{1,p+1}^*\\  0&amp;  a_{22}^*&amp;  \cdots&amp; a_{2,p+1}^*\\  \vdots&amp;  \vdots&amp;  &amp;\vdots \\  0 &amp; 0 &amp; \cdots &amp; a_{p+1,p+1}^*\\  0 &amp; 0 &amp; \cdots &amp; 0\\  \vdots&amp;  \vdots&amp;  &amp;\vdots \\  0 &amp; 0 &amp; \cdots &amp; 0\\\end{bmatrix} \tag{5}\]</span></p><p>为了得到上述 <span class="math inline">\(\mathrm{QR}\)</span> 分解,应该选择 <span class="math inline">\(H_n\)</span> 为 <spanclass="math inline">\(p\)</span> 个 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换矩阵之积, 即</p><p><span class="math display">\[H_n = H_n(p)H_n(p-1)\cdots H_n(1) \tag{6}\]</span></p><p>式中</p><p><span class="math display">\[H_n(j) = I - u_ju_j^{\mathrm{T}}/\sigma_j, \quad j = 1,2,\cdots,p\tag{7}\]</span></p><p>是对矩阵 <span class="math inline">\(A_n^{(j)} =H_n(j-1)H_n(2)H_n(1)A_n\)</span> 第 <spanclass="math inline">\(j\)</span> 列向量 <spanclass="math inline">\([a_{1j}^{(j)},a_{2j}^{(j)},\cdots,a_{nj}^{(j)}]^{\mathrm{T}}\)</span>进行的 <span class="math inline">\(\mathrm{Householder}\)</span>变换矩阵, 其参数选择方法为</p><p><span class="math display">\[\left.\begin{aligned}  \alpha_j &amp;= \sqrt{\sum_{i=j}^{n}[a_{ij}^{(j)}]^2} &amp; \quad\\  \sigma_j &amp;= \alpha_j(\alpha_j + |a_{jj}^{(j)}|) \\  u_j(i) &amp;= \left\{\begin{matrix}  0&amp; \ i &lt; j \\  a_{jj}^{(j)} + \mathrm{sgn}(a_{jj}^{(j)})\alpha_j&amp; \ j = i \\  a_{ij}^{(j)} &amp; i &gt; j\end{matrix}\right.\end{aligned}\right\}, \qquad j = 1,2,\cdots,p \tag{8}\]</span></p><p>其中</p><p><span class="math display">\[A_n^{(j+1)} = A_n^{(j)} - u_jq_j^{\mathrm{T}} \tag{9}\]</span></p><p>并且</p><p><span class="math display">\[q_j^{\mathrm{T}} = u_j^{\mathrm{T}}A_n^{(j)}/\sigma_j \tag{10}\]</span></p><p>算法 2: 基于 <span class="math inline">\(\mathrm{Householder} \QR\)</span> 分解的快速自适应参数估计算法</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022626150250.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022626150015.png" /></p><h1 id="四基于-mathrmgivens-旋转的时变参数估计">四、基于 <spanclass="math inline">\(\mathrm{Givens}\)</span> 旋转的时变参数估计</h1><p>递推求解 <span class="math inline">\(\sigma_n\)</span> 的变换量 <spanclass="math inline">\(\delta_n\)</span>, 而不是之间递推求 <spanclass="math inline">\(\sigma_{n+1}\)</span> 本身. 其式子应该为</p><p><span class="math display">\[\sigma_{n+1} = \sigma_{n} + \delta_n \tag{11}\]</span></p><p>问题的关键就在于更新 <spanclass="math inline">\(\delta_n\)</span></p><p>假定正交矩阵 <span class="math inline">\(\tilde{Q}\)</span> 为已知,满足</p><p><span class="math display">\[\tilde{Q} \begin{bmatrix} \lambda R_n\\x_{n+1}^{\mathrm{T}}\end{bmatrix} = \begin{bmatrix} R_{n+1}\\ O\end{bmatrix} \tag{12}\]</span></p><p>化简得到</p><p><span class="math display">\[\delta_n = \argmin_{\delta_n} \bigg \lVert \begin{bmatrix} R_{n+1}\\ O\end{bmatrix}\delta_n - \tilde{Q} \begin{bmatrix} 0\\ u(n+1)\end{bmatrix} \bigg \rVert \tag{13}\]</span></p><p>式中, <span class="math inline">\(u(n+1) = y(n+1) -x_{n+1}^{\mathrm{T}}\theta_n\)</span>. 因此, <spanclass="math inline">\(\delta_n\)</span> 可以从三角矩阵方程</p><p><span class="math display">\[R_{n+1}\delta_n = \bar{y}_{n+1} \tag{14}\]</span></p><p>解出, 其中, <span class="math inline">\(\bar{y}_{k+1}\)</span>满足</p><p><span class="math display">\[\begin{bmatrix} \bar{y}_{n+1}\\ r(n+1) \end{bmatrix} = \tilde{Q}\begin{bmatrix} 0\\ u(n+1) \end{bmatrix} \tag{15}\]</span></p><p>为求出 <span class="math inline">\(\tilde{Q}\)</span>,需要对增广矩阵</p><p><span class="math display">\[\begin{bmatrix}  \lambda R_n &amp; 0\\  x_{n+1}^{\mathrm{T}} &amp; u(n+1)\end{bmatrix} \tag{16}\]</span></p><p>( ! ! ! 在这个地方存疑, 不能很好的理解这个增广矩阵的由来 )</p><p>执行所需要的清零. 综上所述, 每一步递推更新需要的步骤如下</p><ol type="1"><li><p>计算预测误差 <span class="math inline">\(y_{k+1} -\phi_{k+1}^{\mathrm{T}}\theta_k\)</span></p></li><li><p>形成式子 (16) 中的 <span class="math inline">\((n+1) \times(n+1)\)</span> 矩阵</p></li><li><p>利用一系列 <span class="math inline">\(\mathrm{Givens}\)</span>旋转将上述矩阵最底一行的左边 <span class="math inline">\(n\)</span>个元素扫除为零</p></li><li><p>解上三角矩阵方程得到 <spanclass="math inline">\(\delta_k\)</span></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-4.7-QR分解及其应用</title>
    <link href="/posts/9c377384/"/>
    <url>/posts/9c377384/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一mathrmqr-分解的性质">一、<spanclass="math inline">\(\mathrm{QR}\)</span> 分解的性质</h1><p>定理 1 ( <span class="math inline">\(\mathrm{QR}\)</span> 分解 ): 若<span class="math inline">\(A \in R^{m \times n}\)</span>, 且 <spanclass="math inline">\(m \ge n\)</span>, 则存在列正交的矩阵 <spanclass="math inline">\(Q \in R^{m \times m}\)</span> 和上三角矩阵 <spanclass="math inline">\(R \in R^{m \times n}\)</span> 使得 <spanclass="math inline">\(A = QR\)</span></p><p>当 <span class="math inline">\(m = n\)</span> 时, <spanclass="math inline">\(Q\)</span> 是正交矩阵. 如果 <spanclass="math inline">\(A\)</span> 是非奇异的 <spanclass="math inline">\(n \times n\)</span> 矩阵, 则 <spanclass="math inline">\(R\)</span> 的所有对角线元素均为正,并且在这种情况下 <span class="math inline">\(Q\)</span> 和 <spanclass="math inline">\(R\)</span> 二者是唯一的. 若 <spanclass="math inline">\(A\)</span> 是复矩阵, 则 <spanclass="math inline">\(Q\)</span> 和 <spanclass="math inline">\(R\)</span> 取复值.</p><p>( 补充一个小知识: <span class="math inline">\(Q\)</span> 其实是源于orthogonal matrices 或 orthonormal basis, 为了避免 <spanclass="math inline">\(O \ 0\)</span> 不好区分的问题; <spanclass="math inline">\(R\)</span> 是指代 right triangular matrices )</p><p>引理 1 : 若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是任意两个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则</p><p><span class="math display">\[A^{\mathrm{H}}A = B^{\mathrm{H}}B \tag{1}\]</span></p><p>当且仅当存在一个 <span class="math inline">\(m \times m\)</span>酉矩阵 <span class="math inline">\(Q\)</span>, 使得</p><p><span class="math display">\[QA = B \tag{2}\]</span></p><h1 id="二采用修正-mathrmgram-schmidt-法的-mathrmqr-分解">二、采用修正<span class="math inline">\(\mathrm{Gram-Schmidt}\)</span> 法的 <spanclass="math inline">\(\mathrm{QR}\)</span> 分解</h1><p>矩阵 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(QR\)</span> 分解可以利用 <spanclass="math inline">\(\mathrm{Gram-Schmidt}\)</span> 正交化方法实现.</p><p>这个方法在之前就已经提到过, 这里就不再赘述了.我们最后要得到的就是一组标准正交基 <spanclass="math inline">\(q_1,q_2,\cdots,q_n\)</span></p><p>容易验证, <span class="math inline">\(q_i\)</span> 是标准正交基,即满足</p><p><span class="math display">\[q_i^{\mathrm{H}}q_j = \delta_{ij} \tag{3}\]</span></p><p>其中, <span class="math inline">\(\delta_{ij}\)</span> 为 <spanclass="math inline">\(\mathrm{Kronecker} \ \delta\)</span> 函数.简单说一下这个函数, 它和 <span class="math inline">\(\mathrm{Dirac} \\delta\)</span> 非常相似.</p><p><span class="math display">\[\delta_{ij} = \left\{\begin{matrix}  0&amp; \mathrm{if} \ i \neq j\\  1&amp; \mathrm{if} \ i = j\end{matrix}\right. \tag{4}\]</span></p><p>如果令 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的列向量为 <spanclass="math inline">\(a_1,a_2,\cdots,a_n\)</span>, 则以 <spanclass="math inline">\(q_1,q_2,\cdots,q_n\)</span> 为列向量的矩阵 <spanclass="math inline">\(Q\)</span> 与 <spanclass="math inline">\(A\)</span> 之间有下列关系:</p><p><span class="math display">\[A=QR \tag{5}\]</span></p><p>又由于 <span class="math inline">\(q_i\)</span> 组成标准正交基,所以</p><p><span class="math display">\[Q^{\mathrm{H}}Q=I_n\]</span></p><p>这里提出一种修正正交化算法, 之前是使上三角矩阵 <spanclass="math inline">\(R\)</span> 的元素不是按列, 而是按行计算.</p><p>和经典正交化算法不同的是, 经典算法是一个一个基计算,计算到某个基时就减去与之前求得的基相平行的分量.修正后的算法就是每算出一个基就对后面未正交化的基执行减去平行分量的操作.</p><p>修正后的正交化算法减小误差的效果更明显.</p><h1 id="三mathrmhouseholder-mathrmqr-分解">三、<spanclass="math inline">\(\mathrm{Householder}\)</span> <spanclass="math inline">\(\mathrm{QR}\)</span> 分解</h1><p><span class="math inline">\(\mathrm{Householder}\)</span>变换可以实现任意 <span class="math inline">\(m \times n\)</span> 矩阵<span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(QR\)</span> 分解, 其原理时使用变维向量的 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换,使得该向量除第一个元素外, 其他元素皆变成 0.</p><p>使一个 <span class="math inline">\(p\)</span> 维向量 <spanclass="math inline">\(x=[x_1,x_2,\cdots,x_p]^{\mathrm{T}}\)</span> 的第1 个元素后面的所有元素变为 0, 则 <span class="math inline">\(p\)</span>维的 <span class="math inline">\(\mathrm{Householder}\)</span>向量应取</p><p><span class="math display">\[\omega = \frac{x - \beta e_1}{\sqrt{\bar{\beta} (\beta - x_1)}} \tag{6}\]</span></p><p>式中</p><p><span class="math display">\[\bar{\beta} = - |x_1| \lVert x \rVert, \quad \beta = - \frac{x_1}{|x_1|}\lVert x \rVert \tag{7}\]</span></p><p>首先令 <spanclass="math inline">\(x=a_1=[a_{11},a_{21},\cdots,a_{m1}]^{\mathrm{T}}\)</span>,并取 <span class="math inline">\(p=m\)</span>, 按照式子 (6) 和式子 (7),可以计算得到 <span class="math inline">\(u_1=\omega_m\)</span>.此时,</p><p><span class="math display">\[H_1 = I - u_1 u_1^{\mathrm{T}} \to A_1 = H_1A =[a_1^{(1)},a_2^{(1)},\cdots,a_n^{(1)}] \tag{8}\]</span></p><p>变换后矩阵 <span class="math inline">\(A_1\)</span> 的第 1 列 <spanclass="math inline">\(a_1^{(1)}\)</span> 的第一个元素等于 <spanclass="math inline">\((a_{11}^2 + a_{21}^2 + \cdots +a_{m1}^2)^{1/2}\)</span> (像第二范数). 其他元素全为 0.</p><p>接下来就是针对矩阵 <span class="math inline">\(A_1\)</span> 的第 2 列<span class="math inline">\(a_2^{(1)}\)</span>, 令 <spanclass="math inline">\(p = m-1\)</span> 和</p><p><span class="math display">\[x = [a_{22}^{(1)},a_{32}^{(1)},\cdots,a_{m2}^{(1)}]^{\mathrm{T}}\]</span></p><p>按照式子 (6) 和式子 (7), 可以计算得到 <spanclass="math inline">\((m-1)\)</span> 维向量 <spanclass="math inline">\(\omega_{m-1}\)</span>. 此时, 取 <spanclass="math inline">\(u_2 = \begin{bmatrix} 0\\\omega_{m-1}\end{bmatrix}\)</span>, 又可得到</p><p><span class="math display">\[H_2 = I - u_2 u_2^{\mathrm{T}} \to A_2 = H_2A_1 = H_2H_1A =[a_1^{(1)},a_2^{(2)},\cdots,a_n^{(2)}] \tag{9}\]</span></p><p>可以发现矩阵 <span class="math inline">\(A_2\)</span> 的第 1 列与<span class="math inline">\(A_1\)</span> 的第 1 列相同, 而第 2 列 <spanclass="math inline">\(a_1^{(1)}\)</span> 的第一个元素等于 <spanclass="math inline">\(a_{12}^{(1)}\)</span>, 第二个元素等于 <spanclass="math inline">\([ |a_{22}^{(1)}|^2 + |a_{32}^{(1)}|^2 + \cdots +|a_{m2}^{(1)}|^2 ]^{1/2}\)</span> , 而该列的其他元素全部为 0,以此类推.</p><p>假定矩阵 <span class="math inline">\(A\)</span> 经过 <spanclass="math inline">\(k -1\)</span> 次 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换后, 已变成 <spanclass="math inline">\(A^{(k-1)}\)</span> 即有</p><p><span class="math display">\[\begin{aligned}A^{(k-1)} &amp;= H_{k-1}A^{(k-2)}=H_{k-1} \cdots H_1A&amp;= [a_1^{(k-1)},a_2^{(k-1)},\cdots,a_n^{(k-1)}], \quad k =2,3,\cdots\end{aligned}\]</span></p><p>并且其前 <span class="math inline">\(k-1\)</span>列具有以下变换结果:</p><p><span class="math display">\[a_j^{(k-1)} =[a_{1j}^{(k-1)},\cdots,a_{jj}^{(k-1),0,\cdots,0}]^{\mathrm{T}}, \quadj=1,2,\cdots,k-1\]</span></p><p>因此, 第 <span class="math inline">\(k\)</span> 次 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换的目的就是保证前<span class="math inline">\(k-1\)</span> 列不变, 实现 <spanclass="math inline">\(A^{(k-1)}\)</span> 的第 <spanclass="math inline">\(k\)</span> 列的下述变换:</p><p><span class="math display">\[\tilde{H_k}\begin{bmatrix}a_{k,k}^{(k-1)}\\a_{k+1,k}^{(k-1)}\\\vdots \\a_{m,k}^{(k-1)}\end{bmatrix} = \begin{bmatrix}a_{k,k}^{(k)}\\0\\\vdots \\0\end{bmatrix}\]</span></p><p>这相当于对矩阵 <span class="math inline">\(A^{(k-1)}\)</span> 进行<span class="math inline">\(\mathrm{Householder}\)</span> 变换 <spanclass="math inline">\(H_kA^{(k-1)}\)</span> 时取</p><p><span class="math display">\[H_k = \begin{bmatrix}I_{k-1} &amp; 0\\0 &amp; \tilde{H_k}\end{bmatrix}\]</span></p><p>取 <span class="math inline">\(n\)</span> 次 <spanclass="math inline">\(\mathrm{Householder}\)</span> 变换后, 即可实现<span class="math inline">\(\mathrm{QR}\)</span> 分解.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-4.4~4.6章节内容</title>
    <link href="/posts/7a56f122/"/>
    <url>/posts/7a56f122/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一矩阵分解的分类">一、矩阵分解的分类</h1><p>矩阵分解顾名思义就是通过线性变换把某个已知矩阵分解成多个矩阵,这多个矩阵之间的关系是怎样的呢?</p><p>一般情况下分解为两个或者三个标准型矩阵的乘积.个别情况是两个标准型矩阵之和.</p><p>这里提到的标准型矩阵就是若尔当标准型矩阵.</p><p>虽然在 《Introduction to Linear Algebra》附录中记载着十五种矩阵分解的方法,但是我们通过矩阵分解后得到的标准型据以及是对单个矩阵还是两个矩阵组成的矩阵束或矩阵对进行分解来划分矩阵的分解类别.</p><h2 id="单个矩阵的分解">1. 单个矩阵的分解</h2><p>根据矩阵 <span class="math inline">\(A\)</span> 分解后的标准型矩阵,可以分为以下四大类</p><ul><li><p>对角化分解</p><p>通过正交变换, 将矩阵 <span class="math inline">\(A\)</span>对角化的</p><ul><li><p>奇异值分解 (SVD) : <span class="math inline">\(A = U \SigmaV^{\mathrm{H}}\)</span> 或 <span class="math inline">\(U AV^{\mathrm{H}} = \Sigma\)</span>. 式中 <spanclass="math inline">\(U\)</span> 和 <spanclass="math inline">\(V\)</span> 二者为酉矩阵, <spanclass="math inline">\(\Sigma\)</span> 为对角矩阵.这也就是针对一般矩阵的对角化分解.</p></li><li><p>特征值分解 (EVD) : (考研数学线代部分的必备内容) <spanclass="math inline">\(A^{\mathrm{H}}A=V\Sigma V^{\mathrm{H}}\)</span> 或<span class="math inline">\(AA^{\mathrm{H}} = U \SigmaU^{\mathrm{H}}\)</span>. 针对对称矩阵的对角化分解.</p></li><li><p><span class="math inline">\(\mathrm{CS}\)</span> 分解 :可以看作正交矩阵分块的同时对角化分解.</p></li></ul></li><li><p>三角化分解</p><p>将矩阵 <span class="math inline">\(A\)</span>分解成正交矩阵与三角矩阵之积,或分解为一个上三角矩阵与一个下三角矩阵之积, 主要有三种形式.</p><ul><li><p><span class="math inline">\(\mathrm{Cholcsky}\)</span> 分解 :<span class="math inline">\(A = GG^{\mathrm{T}}\)</span>, 其中, <spanclass="math inline">\(G\)</span> 为下三角矩阵(针对对称正定矩阵的三角化分解)</p></li><li><p><span class="math inline">\(\mathrm{QR}\)</span> 分解 : <spanclass="math inline">\(A = QR\)</span> 或 <spanclass="math inline">\(Q^{\mathrm{T}}A = R\)</span>, 其中, <spanclass="math inline">\(Q\)</span> 是正交矩阵, 而 <spanclass="math inline">\(R\)</span> 是上三角矩阵(针对一般矩阵的三角化分解)</p></li><li><p><span class="math inline">\(\mathrm{LU}\)</span> 分解 : <spanclass="math inline">\(A=LU\)</span>, 其中, <spanclass="math inline">\(L\)</span> 是单位下三角矩阵, 而 <spanclass="math inline">\(U\)</span> 是上三角矩阵(针对非奇异矩阵的三角化分解)</p></li></ul></li><li><p>三角 - 对角化分解</p><p>把矩阵分解为三个标准型矩阵 (两个三角矩阵和一个对角矩阵) 之积,或分解为两个标准型矩阵 (对角矩阵和上三角矩阵) 之和.</p><ul><li><p><span class="math inline">\(\mathrm{LDM}^{\mathrm{T}}\)</span>分解 : <span class="math inline">\(A = LDM^{\mathrm{T}}\)</span>, 其中,<span class="math inline">\(L\)</span> 和 <spanclass="math inline">\(M\)</span> 为单位下三角矩阵, 而 <spanclass="math inline">\(D\)</span> 为对角矩阵 (针对非对称矩阵的三角 -对角化分解)</p></li><li><p><span class="math inline">\(\mathrm{LDL}^{\mathrm{T}}\)</span>分解 : <span class="math inline">\(A = LDL^{\mathrm{T}}\)</span>(针对对称矩阵的三角 - 对角化分解).</p></li><li><p><span class="math inline">\(\mathrm{Schur}\)</span> 分解 : <spanclass="math inline">\(Q^{\mathrm{H}}AQ=D+N\)</span>, 其中, <spanclass="math inline">\(Q\)</span> 是酉矩阵, <spanclass="math inline">\(D\)</span> 是对角矩阵, 而 <spanclass="math inline">\(N\)</span> 是严格上三角矩阵 (针对复矩阵的三角 -对角化分解).</p></li></ul></li><li><p>三对角化分解</p><p><span class="math inline">\(\mathrm{Householder}\)</span>三对角化分解 : <span class="math inline">\(H^{\mathrm{T}}AH=T\)</span>,其中, <span class="math inline">\(H = H_1H_2 \dots H_{n-2}\)</span> 为<span class="math inline">\(\mathrm{Householder}\)</span> 变换之积, 且<span class="math inline">\(T\)</span> 是三对角矩阵.</p></li></ul><p>总之就是有很多种方法来分解矩阵, 所得到的结果也可以有一定的规范性.</p><h2 id="矩阵束的分解">2. 矩阵束的分解</h2><p>矩阵束的分解主要用于求解矩阵束的广义特征值分解 (<spanclass="math inline">\(\mathrm{GEVD}\)</span>) 问题 <spanclass="math inline">\(Ax = \lambda Bx (x \neq 0)\)</span> 的 <spanclass="math inline">\(\mathrm{QZ}\)</span> 方法中,它涉及两个矩阵的同时分解. 这类分解的主要形式是广义 <spanclass="math inline">\(\mathrm{Schur}\)</span> 分解.</p><p><span class="math inline">\(\mathrm{Schur}\)</span> 分解 : <spanclass="math inline">\(Q^{\mathrm{H}}AZ=T\)</span> 和 <spanclass="math inline">\(Q^{\mathrm{H}}BZ=S\)</span>, 其中, <spanclass="math inline">\(Q\)</span> 和 <spanclass="math inline">\(Z\)</span> 为酉矩阵, 而 <spanclass="math inline">\(T\)</span> 和 <spanclass="math inline">\(S\)</span> 为上三角矩阵.</p><p>实现广义 <span class="math inline">\(\mathrm{Schur}\)</span>分解需要先使用 <span class="math inline">\(\mathrm{Hessenberg}\)</span>三对角化分解: <span class="math inline">\(Q^{\mathrm{T}}AZ=H\)</span> 和<span class="math inline">\(Q^{\mathrm{T}}BZ=T\)</span>, 其中, <spanclass="math inline">\(Q\)</span> 和 <spanclass="math inline">\(Z\)</span> 为正交矩阵, <spanclass="math inline">\(H\)</span> 为上 <spanclass="math inline">\(\mathrm{Hessenberg}\)</span> 矩阵, 而 <spanclass="math inline">\(T\)</span> 是上三角矩阵.</p><p>只能说是非常有趣了.</p><h1 id="二对角化分解">二、对角化分解</h1><p>定理 1 : (<span class="math inline">\(\mathrm{CS}\)</span> 分解) 若<span class="math inline">\((k + j) \times (k + j)\)</span> 矩阵</p><p><span class="math display">\[Q = \begin{bmatrix}  Q_{11}&amp; Q_{12}\\  Q_{21}&amp; Q_{22}\end{bmatrix}\]</span></p><p>是正交的, 其中, <span class="math inline">\(Q_{11}\)</span> 是 <spanclass="math inline">\(k \times k\)</span> 矩阵, 并且 <spanclass="math inline">\(k \ge j\)</span>; 则存在正交矩阵 <spanclass="math inline">\(U_1,V_1 \in R^{k \times k}\)</span> 和正交矩阵<span class="math inline">\(U_2,V_2 \in R^{j \times j}\)</span> 使得</p><p><span class="math display">\[\begin{bmatrix}  U_1&amp; O\\  O&amp; U_2\end{bmatrix}\begin{bmatrix}  Q_{11}&amp; Q_{12}\\  Q_{21}&amp; Q_{22}\end{bmatrix}\begin{bmatrix}  V_1&amp; O\\  O&amp; V_2\end{bmatrix}=\begin{bmatrix}  I_{k-j}&amp; O &amp; O\\  O&amp; C &amp; S\\  O&amp; -S&amp; C\end{bmatrix} \tag{1}\]</span></p><p>其中</p><p><span class="math display">\[C = \mathrm{diag}(c_1,c_2,\dots,c_j), \quad c_i = \cos \theta_i \tag{2}\]</span></p><p><span class="math display">\[S = \mathrm{diag}(s_1,s_2,\dots,s_j), \quad s_i = \sin \theta_i \tag{3}\]</span></p><p>且 <span class="math inline">\(0 \le \theta_1 \le \theta_2 \le \cdots\le \theta_j \le \pi / 2\)</span>.</p><p>简而言之就是将一个正交矩阵的各个分块同时对角化.</p><h1 id="三mathrmcholcsky-分解与-mathrmlu-分解">三、<spanclass="math inline">\(\mathrm{Cholcsky}\)</span> 分解与 <spanclass="math inline">\(\mathrm{LU}\)</span> 分解</h1><p>三角化分解的两种形式</p><h2 id="mathrmcholcsky-分解">1. <spanclass="math inline">\(\mathrm{Cholcsky}\)</span> 分解</h2><p>定理 2 : (<span class="math inline">\(\mathrm{Cholesky}\)</span>分解) 如果 <span class="math inline">\(A \in R^{n \times n}\)</span>是对称正定矩阵, 则 <spanclass="math inline">\(\mathrm{Cholesky}\)</span> 分解 <spanclass="math inline">\(A = GG^{\mathrm{T}}\)</span> 是唯一的, 其中,下三角矩阵 <span class="math inline">\(G \in R^{n \times n}\)</span>的非零元素由式 <span class="math inline">\(g_{ij} = v(i)/g_{jj} =v(i)/\sqrt{v(j)}\)</span> 决定.</p><p>下三角矩阵 <span class="math inline">\(G\)</span> 称为 <spanclass="math inline">\(\mathrm{Cholesky}\)</span> 三角. 另外, <spanclass="math inline">\(\mathrm{Cholesky}\)</span> 分解也谓之平方根方法,因为下三角矩阵 <span class="math inline">\(G\)</span> 可以视为矩阵 <spanclass="math inline">\(A\)</span> 的 "平方根".</p><p>一个非奇异矩阵 <span class="math inline">\(A\)</span> 的逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 可以通过 <spanclass="math inline">\(\mathrm{Cholesky}\)</span> 分解求得, 即有</p><p><span class="math display">\[A^{-1} = G^{\mathrm{-T}}G^{-1} \tag{4}\]</span></p><p>其中 <span class="math inline">\(G^{\mathrm{-T}}=(G^{\mathrm{-T}})^{-1}\)</span>.</p><h2 id="mathrmlu-分解">2. <spanclass="math inline">\(\mathrm{LU}\)</span> 分解</h2><p>在线性代数中这应该是学到的第一个矩阵分解算法了.该矩阵分解算法的本质就是消元, 需要分解的矩阵 <spanclass="math inline">\(A\)</span> 通过左乘一系列消元矩阵 <spanclass="math inline">\(E_1,E_2,\cdots,E_n\)</span> (统称为 <spanclass="math inline">\(E\)</span>) 得到上三角矩阵 <spanclass="math inline">\(U\)</span>, 式子两边同时左乘 <spanclass="math inline">\(E^{-1}\)</span> 就得到 <spanclass="math inline">\(A = E^{-1}U\)</span>. 这里的 <spanclass="math inline">\(E^{-1}\)</span> 被写作 <spanclass="math inline">\(L\)</span>, 同时它也是下三角矩阵. 那么 <spanclass="math inline">\(\mathrm{LU}\)</span> 分解就是如此.</p><p>求解线性方程组 <span class="math inline">\(LUx=b\)</span>, 令 <spanclass="math inline">\(y = Ux\)</span>.</p><p>具体算法如下:</p><p>Step 1 : 计算 <span class="math inline">\(A = LU\)</span></p><p>Step 2 : 用前向回代法求解下三角矩阵方程 <spanclass="math inline">\(Ly=b\)</span></p><p>Step 3 : 用后向回代法求解下三角矩阵方程 <spanclass="math inline">\(Ux=y\)</span></p><p>这个算法推广到线性矩阵方程 <span class="math inline">\(AX=B\)</span>的求解, 其中, <span class="math inline">\(A \in R^{n \times n}\)</span>非奇异, <span class="math inline">\(B,X \in R^{n \times p}\)</span>.</p><p>就是拆开一列一列地计算.</p><p><span class="math inline">\(\mathrm{LU}\)</span>分解在这里单纯没有意义, 主要目的还是为了求解线性方程组.</p><p>定理 3 (<span class="math inline">\(\mathrm{LU}\)</span>): 如果 <spanclass="math inline">\(A \in R^{n \times n}\)</span> 非奇异, 并且其 <spanclass="math inline">\(\mathrm{LU}\)</span> 分解存在的话, 则 <spanclass="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{LU}\)</span> 分解是唯一的, 且 <spanclass="math inline">\(\mathrm{det}(A)=u_{11} u_{22} \cdotsu_{nn}\)</span></p><p>算法很简单, 就是高斯消元法用消元矩阵表示,然后再将一系列消元矩阵求它的逆矩阵. 在这一小段的开头已经简单提到.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.10-Hadamard积与Kronecker积</title>
    <link href="/posts/1f0a122c/"/>
    <url>/posts/1f0a122c/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><h1 id="一矩阵的直和">一、矩阵的直和</h1><h2 id="直和定义">1. 直和定义</h2><p>定义 1: <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 与 <span class="math inline">\(n \timesn\)</span> 矩阵 <span class="math inline">\(B\)</span> 的直和记作 <spanclass="math inline">\(A \oplus B\)</span>, 它是一个 <spanclass="math inline">\((m+n) \times (m+n)\)</span> 的矩阵, 定义为</p><p><span class="math display">\[A \oplus B = \begin{bmatrix}  A&amp; O_{m \times n}\\  O_{n \times m}&amp; B\end{bmatrix} \tag{1}\]</span></p><p>只是在对角线上堆加元素, 和求和并无关系, 有点像分块矩阵那种感觉.当然也可以定义多个矩阵的直和.</p><p><span class="math display">\[B = \underset{i=0}{\overset{N-1}{\oplus}} A_i = A_0 \oplus A_1 \oplus\dots \oplus A_{N-1} = \begin{bmatrix}  A_0&amp;  &amp;  &amp; \\  &amp;  A_1&amp;  &amp; \\  &amp;  &amp;  \ddots&amp; \\  &amp;  &amp;  &amp; A_{N-1}\end{bmatrix} \tag{2}\]</span></p><h2 id="直和性质">2. 直和性质</h2><p>根据定义直和有一些性质:</p><ul><li><p>若 <span class="math inline">\(c\)</span> 是常数, 则 <spanclass="math inline">\(c(A \oplus B) = cA \oplus cB\)</span></p></li><li><p>若 <span class="math inline">\(A \neq B\)</span>, 则 <spanclass="math inline">\(A \oplus B \neq B \oplus A\)</span></p></li><li><p>矩阵直和的复共轭、转置、复共轭转置与逆矩阵</p></li></ul><p><span class="math display">\[\begin{aligned}(A \oplus B)^* &amp;= A^* \oplus B^* \\(A \oplus B)^{\mathrm{T}} &amp;= A^{\mathrm{T}} \oplus B^{\mathrm{T}} \\(A \oplus B)^{\mathrm{H}} &amp;= A^{\mathrm{H}} \oplus B^{\mathrm{H}} \\(A \oplus B)^{-1} &amp;= A^{-1} \oplus B^{-1}, \quad A,B 可逆\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(A,B\)</span> 为 <spanclass="math inline">\(m \times m\)</span> 矩阵, 且 <spanclass="math inline">\(C,D\)</span> 为 <span class="math inline">\(n\times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\begin{aligned}(A \pm B) \oplus (C \pm D) &amp;= (A \oplus C) \pm (B \oplus D) \\(A \oplus C)(B \oplus D) &amp;= AB \oplus CD\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(A,B,C\)</span> 分别是 <spanclass="math inline">\(m \times m , n \times n , p \times p矩阵\)</span>, 则</li></ul><p><span class="math display">\[A \oplus (B \oplus C) = (A \oplus B) \oplus C = A \oplus B \oplus C\]</span></p><ul><li>矩阵直和的迹、秩、行列式:</li></ul><p><span class="math display">\[\begin{aligned}\mathrm{tr}(\underset{i=0}{\overset{N-1}{\oplus}}A_i) &amp;=\sum_{i=0}^{N-1}\mathrm{tr}(A_i)\\\mathrm{rank}(\underset{i=0}{\overset{N-1}{\oplus}}A_i) &amp;=\sum_{i=0}^{N-1}\mathrm{rank}(A_i) \\\mathrm{det}(\underset{i=0}{\overset{N-1}{\oplus}}A_i) &amp;=\prod_{i=0}^{N-1}\mathrm{det}(A_i)\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(A,B\)</span> 分别是 <spanclass="math inline">\(m \times m , n \times n\)</span> 正交矩阵, 则<span class="math inline">\(A \oplus B\)</span> 是 <spanclass="math inline">\((m + n) \times (m + n)\)</span> 正交矩阵.</li></ul><h1 id="二mathrmhadamard-积">二、<spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积</h1><h2 id="mathrmhadamard-积定义">1. <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积定义</h2><p>定义 2: <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A = [a_{ij}]\)</span> 与 <spanclass="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(B = [b_{ij}]\)</span> 的 <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积记作 <spanclass="math inline">\(A \odot B\)</span>, 它仍是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 定义为</p><p><span class="math display">\[A \odot B = [a_{ij}b_{ij}] \tag{3}\]</span></p><p>不得不说这比矩阵乘法简单多了.</p><p>定理 1: 若 <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A,B\)</span> 是正定 (或半正定) 的, 则它们的 <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积 <spanclass="math inline">\(A \odot B\)</span> 也是正定 (或半正定) 的.</p><p>推论 1(<span class="math inline">\(\mathrm{Fejer}\)</span> 定理): 令<span class="math inline">\(A\)</span> 是一个 <spanclass="math inline">\(m \times m\)</span> 矩阵, 则 <spanclass="math inline">\(A\)</span> 是半正定矩阵, 当且仅当</p><p><span class="math display">\[\sum_{i=1}^{m}\sum_{j=1}^{m}a_{ij}b_{ij} \ge 0\]</span></p><p>对所有 <span class="math inline">\(m \times m\)</span> 半正定矩阵<span class="math inline">\(B\)</span> 成立.</p><p>定理 2: 令 <span class="math inline">\(A,B,C\)</span> 为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 并且 <spanclass="math inline">\(\mathbf{1} = [1,1,\dots,1]^{\mathrm{T}}\)</span>为 <span class="math inline">\(n \times 1\)</span> 求和向量, <spanclass="math inline">\(D = \mathrm{diag}(d_1,d_2,\dots,d_m)\)</span>,其中, <span class="math inline">\(d_i = \sum_{j=1}^{n}a_{ij}\)</span>,则</p><p><span class="math display">\[\mathrm{tr} \left ( A^{\mathrm{T}}(B \odot C) \right ) =\mathrm{tr}\left ( (A^{\mathrm{T}}\odot B^{\mathrm{T}}) C \right )\tag{4}\]</span></p><p>和</p><p><span class="math display">\[\mathbf{1}^{\mathrm{T}}A^{\mathrm{T}}(B \odot C)\mathbf{1} =\mathrm{tr}(B^{\mathrm{T}}DC) \tag{5}\]</span></p><p>定理 3: 令 <span class="math inline">\(A,B\)</span> 为 <spanclass="math inline">\(n \times n\)</span> 正方矩阵, 并且 <spanclass="math inline">\(\mathbf{1} = [1,1,\dots,1]^{\mathrm{T}}\)</span>为 <span class="math inline">\(n \times 1\)</span> 求和向量. 假定 <spanclass="math inline">\(M\)</span> 是一个 <span class="math inline">\(n\times n\)</span> 对角矩阵 <span class="math inline">\(M =\mathrm{diag}(\mu_1,\mu_2,\dots,\mu_n)\)</span>, 而 <spanclass="math inline">\(m = M\mathbf{1}\)</span> 为 <spanclass="math inline">\(n \times 1\)</span> 向量, 则有</p><p><span class="math display">\[\mathrm{tr}(AMB^{\mathrm{T}}M) = m^{\mathrm{T}}(A \odot B)m \tag{6}\]</span></p><p><span class="math display">\[\mathrm{tr}(AB^{\mathrm{T}}) = \mathbf{1}^\mathrm{T}(A \odotB)\mathbf{1} \tag{7}\]</span></p><p><span class="math display">\[MA \odot B^{\mathrm{T}}M = M(A \odot B^{\mathrm{T}})M \tag{8}\]</span></p><h2 id="mathrmhadamard-积性质">2. <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积性质</h2><ul><li>若 <span class="math inline">\(A,B\)</span> 均为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\begin{aligned}A \odot B &amp;= B \odot A \\(A \odot B)^{\mathrm{T}} &amp;= A^{\mathrm{T}} \odot B^{\mathrm{T}} \\(A \odot B)^{\mathrm{H}} &amp;= A^{\mathrm{H}} \odot B^{\mathrm{H}} \\(A \odot B)^* &amp;= A^{*}\odot B^{*}\end{aligned}\]</span></p><ul><li><p>任何一个 <span class="math inline">\(m \times n\)</span> 矩阵<span class="math inline">\(A\)</span> 与 <span class="math inline">\(m\times n\)</span> 零矩阵 <span class="math inline">\(O_{m \timesn}\)</span> 的 <span class="math inline">\(\mathrm{Hadamard}\)</span>积等于 <span class="math inline">\(m \times n\)</span> 零矩阵, 即 <spanclass="math inline">\(A \odot O_{m \times n} = O_{m \times n} \odot A =O_{m \times n}\)</span></p></li><li><p>若 <span class="math inline">\(c\)</span> 为常数, 则</p></li></ul><p><span class="math display">\[c(A \odot B) = (cA) \odot B = A \odot (cB)\]</span></p><ul><li>矩阵 <span class="math inline">\(A_{m \times m} = [a_{ij}]\)</span>与单位矩阵 <span class="math inline">\(I_m\)</span> 的 <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积为 <spanclass="math inline">\(m \times m\)</span> 对角矩阵, 即</li></ul><p><span class="math display">\[A \odot I_m = I_m \odot A = \mathrm{diag}(A) =\mathrm{diag}(a_{11},a_{22},\dots,a_{mm})\]</span></p><ul><li>若 <span class="math inline">\(A,B,C,D\)</span> 均为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\begin{aligned}A \odot (B \odot C) &amp;= (A \odot B)\odot C = A \odot B \odot C \\(A \pm B)\odot C &amp;= A \odot C \pm B \odot C \\(A + B) \odot (C + D) &amp;= A \odot C + A \odot D + B \odot C + B \odotD\end{aligned}\]</span></p><ul><li>若 <span class="math inline">\(A,C\)</span> 为 <spanclass="math inline">\(m \times m\)</span> 矩阵, 并且 <spanclass="math inline">\(B,D\)</span> 为 <span class="math inline">\(n\times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[(A \odot B) \odot (C \odot D) = (A \odot C) \odot (B \odot D)\]</span></p><ul><li>若 <span class="math inline">\(A,B,C\)</span> 为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\mathrm{tr}(A^{\mathrm{T}}(B \odot C)) = \mathrm{tr}((A^{\mathrm{T}}\odot B^{\mathrm{T}})C)\]</span></p><ul><li>若 <span class="math inline">\(A,B,D\)</span> 为 <spanclass="math inline">\(m \times m\)</span> 矩阵, 则</li></ul><p><span class="math display">\[D 为对角矩阵 \Longrightarrow (DA) \odot (BD) = D(A \odot B) D\]</span></p><ul><li>若 <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A,B\)</span> 是正定 (或半正定) 的, 则它们的 <spanclass="math inline">\(\mathrm{Hadamard}\)</span> 积 <spanclass="math inline">\(A \odot B\)</span> 也是正定 (或半正定) 的.</li></ul><p>书上的例子是关于盲信号分离的问题, 还是先把这部分搁置了吧.</p><h1 id="三矩阵化函数和向量化函数">三、矩阵化函数和向量化函数</h1><p>矩阵和向量之间存在相互转换的函数</p><p>定义 3: 一个 <span class="math inline">\(mn \times 1\)</span> 向量<span class="math inline">\(a =[a_1,a_2,\dots,a_{mn}]^{\mathrm{T}}\)</span> 的矩阵化函数 <spanclass="math inline">\(\mathrm{unver}_{m,n}\)</span> 是一个将 <spanclass="math inline">\(mn\)</span> 个元素的列向量转化为 <spanclass="math inline">\(m \times n\)</span> 矩阵的算子, 即</p><p><span class="math display">\[\mathrm{unver}_{m,n}(a) = A_{m \times n} = \begin{bmatrix}  a_1&amp;  a_{m+1}&amp;  \cdots&amp; a_{m(n-1)+1}\\  a_2&amp;  a_{m+2}&amp;  \cdots&amp; a_{m(n-1)+2}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  a_m&amp;  a_{2m}&amp; \cdots &amp; a_{mn}\end{bmatrix} \tag{9}\]</span></p><p>相反, 若 <span class="math inline">\(A = [a_{ij}]\)</span> 是一个<span class="math inline">\(m \times n\)</span> 矩阵, 则 <spanclass="math inline">\(A\)</span> 的向量化函数 <spanclass="math inline">\(\mathrm{vec}(A)\)</span> 是一个 <spanclass="math inline">\(mn \times 1\)</span> 向量, 其元素是 <spanclass="math inline">\(A\)</span> 的元素的字典式排序, 即</p><p><span class="math display">\[\mathrm{vec}(A) =\begin{bmatrix}  a_{11}&amp;\\  \vdots&amp;\\  a_{m1}&amp;\\  \vdots&amp;\\  a_{1n}&amp;\\  \vdots&amp;\\  a_{mn}&amp;  \end{bmatrix} \tag{10}\]</span></p><p>矩阵元素的字典式排序也叫做按列堆栈.</p><p>所以两者一结合就可以得到</p><p><span class="math display">\[\mathrm{unver}_{m,n}(a) = A_{m \times n} \Longrightarrow \mathrm{vec}(A)= a \tag{11}\]</span></p><p>当然除了按列堆栈还可以按行堆栈, 记作 <spanclass="math inline">\(\mathrm{rvec}(A)\)</span>,结果就是一行一行取数据来构成向量.</p><p>存在一个唯一的 <span class="math inline">\(mn \times mn\)</span>置换矩阵, 可以将 <span class="math inline">\(\mathrm{vec}(A)\)</span>变换为 <spanclass="math inline">\(\mathrm{vec}(A^{\mathrm{T}})\)</span>.这个置换矩阵叫做交换矩阵, 记作 <spanclass="math inline">\(K_{mn}\)</span>, 满足如下等式</p><p><span class="math display">\[K_{mn}\mathrm{vec}(A) = \mathrm{vec}(A^{\mathrm{T}}) \tag{12}\]</span></p><p>交换矩阵有这样的性质</p><p><span class="math display">\[K_{mn}^{\mathrm{T}} = K_{mn}^{-1} = K_{nm} \tag{13}\]</span></p><p>构造方法想一想矩阵的初等变换.</p><h1 id="四mathrmkronecker-积">四、<spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积</h1><h2 id="mathrmkronecker-积定义">1. <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积定义</h2><p>一个 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 和一个 <span class="math inline">\(p\times q\)</span> 矩阵 <span class="math inline">\(B\)</span> 的 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 记作 <spanclass="math inline">\(A \otimes B\)</span>, 这是一个 <spanclass="math inline">\(mp \times nq\)</span> 矩阵.</p><p>定义 4 (右 <span class="math inline">\(\mathrm{Kronecker}\)</span> ): <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 和 <span class="math inline">\(p \timesq\)</span> 矩阵 <span class="math inline">\(B\)</span> 的右 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> <spanclass="math inline">\(A \otimes B\)</span> 定义为</p><p><span class="math display">\[A \otimes B = [a_{ij}B] = \begin{bmatrix}  a_{11}B&amp;  a_{12}B&amp;  \cdots&amp; a_{1n}B\\  a_{21}B&amp;  a_{22}B&amp;  \cdots&amp; a_{2n}B\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  a_{m1}B&amp;  a_{m2}B&amp;  \cdots&amp; a_{mn}B\end{bmatrix} \tag{14}\]</span></p><p>定义 5 (左 <span class="math inline">\(\mathrm{Kronecker}\)</span> ): <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 和 <span class="math inline">\(p \timesq\)</span> 矩阵 <span class="math inline">\(B\)</span> 的左 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> <spanclass="math inline">\(A \otimes B\)</span> 定义为</p><p><span class="math display">\[[A \otimes B]_{\mathrm{left}} = [Ab_{ij}] = \begin{bmatrix}  Ab_{11}&amp;  Ab_{12}&amp;  \cdots&amp; Ab_{1q}\\  Ab_{21}&amp;  Ab_{22}&amp;  \cdots&amp; Ab_{2q}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  Ab_{p1}&amp;  Ab_{p2}&amp;  \cdots&amp; Ab_{pq}\end{bmatrix} \tag{15}\]</span></p><p><span class="math inline">\(\mathrm{Kronecker}\)</span> 积也称直积或者张量积</p><p>若矩阵 <span class="math inline">\(A_{m \times n} =ab^{\mathrm{T}}\)</span>, 则</p><p><span class="math display">\[\mathrm{vec}(ab^{\mathrm{T}}) = b \otimes a \tag{16}\]</span></p><p>定理 4: 令 <span class="math inline">\(A_{m \times p}, B_{p \timesq}, C_{q \times n}\)</span>, 则</p><p><span class="math display">\[\mathrm{vec}(ABC) = (C^{\mathrm{T}} \otimes A)\mathrm{vec}(B) \tag{17}\]</span></p><p>定理 4 的两个特例.</p><ul><li>若 <span class="math inline">\(A\)</span> 为单位矩阵 <spanclass="math inline">\(I_m\)</span>, 而 <span class="math inline">\(B \inR^{m \times q}, C \in R^{q \times n}\)</span>, 则</li></ul><p><span class="math display">\[\mathrm{vec}(BC) = (C^{\mathrm{T}} \otimes I_m)\mathrm{vec}(B) =(C^{\mathrm{T}} \otimes B)\mathrm{vec}(I_q) = (I_n \otimesB)\mathrm{vec}(C) \tag{18}\]</span></p><ul><li>若 <span class="math inline">\(C=d\)</span> 为 <spanclass="math inline">\(q\)</span> 向量, 则</li></ul><p><span class="math display">\[ABd = \mathrm{vec}(ABd) = (d^{\mathrm{T}} \otimes A)\mathrm{vec}(B) = (A\otimes d^{\mathrm{T}})\mathrm{vec}(B^{\mathrm{T}}) \tag{19}\]</span></p><h2 id="mathrmkronecker-积性质">2. <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积性质</h2><p>然后就是一大堆性质:</p><ul><li><p>对矩阵 <span class="math inline">\(A_{m \times n}\)</span> 和<span class="math inline">\(B_{p \times q}\)</span>, 一般有 <spanclass="math inline">\(A \otimes B \neq B \otimes A\)</span></p></li><li><p>任意矩阵与零矩阵的 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积等于零矩阵</p></li><li><p><span class="math inline">\(\alpha \beta\)</span> 为常数</p><p><span class="math display">\[\alpha A \otimes \beta B = \alpha \beta (A \otimes B) \tag{20}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{n \timesk},C_{l \times p},D_{p \times q}\)</span> 有</p><p><span class="math display">\[AB \otimes CD = (A \otimes C)(B \otimes D) \tag{21}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq},C_{p \times q}\)</span> 有</p><p><span class="math display">\[A \otimes (B \pm C) = A \otimes B \pm A \otimes C \tag{22}\]</span></p><p><span class="math display">\[(B \pm C) \otimes A = B \otimes A \pm C \otimes A \tag{23}\]</span></p></li><li><p>若矩阵 <span class="math inline">\(A,B\)</span> 有广义逆矩阵<span class="math inline">\(A^{\dagger},B^{\dagger}\)</span>, 则</p><p><span class="math display">\[(A \otimes B)^{\dagger} = A^{\dagger} \otimes B^{\dagger} \tag{24}\]</span></p><p>特别地, 若 <span class="math inline">\(A,B\)</span> 是可逆方阵, 则<span class="math display">\[(A \otimes B)^{-1} = A^{-1} \otimes B^{-1} \tag{25}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq}\)</span> 有</p><p><span class="math display">\[(A \otimes B)^{\mathrm{T}} = A^{\mathrm{T}} \otimes B^{\mathrm{T}}\tag{26}\]</span></p><p><span class="math display">\[(A \otimes B)^{\mathrm{H}} = A^{\mathrm{H}} \otimes B^{\mathrm{H}}\tag{27}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq}\)</span> 有</p><p><span class="math display">\[\mathrm{rank}(A \otimes B) = \mathrm{rank}(A)\mathrm{rank}(B) \tag{28}\]</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 是 <spanclass="math inline">\(m \times m\)</span> 矩阵, <spanclass="math inline">\(B\)</span> 是 <span class="math inline">\(n \timesn\)</span> 矩阵, 则</p><p><span class="math display">\[\mathrm{det}(A \otimes B) = (\mathrm{det}(A))^n(\mathrm{det}(B))^n\tag{29}\]</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 是 <spanclass="math inline">\(m \times m\)</span> 矩阵, <spanclass="math inline">\(B\)</span> 是 <span class="math inline">\(n \timesn\)</span> 矩阵, 则</p><p><span class="math display">\[\mathrm{tr}(A \otimes B) = \mathrm{tr}(A)\mathrm{tr}(B) \tag{30 }\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{n \timesk},C_{p \times q},D_{p \times q}\)</span> 有</p><p><span class="math display">\[(A+B) \otimes (C+D) = A \otimes C + A \otimes D + B \otimes C + B\otimes D \tag{31}\]</span></p><p>更一般地, 有 <span class="math display">\[\bigg[ \sum_{i=1}^{M}A(i) \bigg] \otimes \bigg[ \sum_{j=1}^{N}B(j)\bigg] = \sum_{i=1}^{M}\sum_{j=1}^{N}[A(i) \otimes B(j)] \tag{32}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{k \timesl},C_{p \times q},D_{r \times s}\)</span> 有</p><p><span class="math display">\[(A \otimes B) \otimes (C \otimes D) = A \otimes B \otimes C \otimes D\tag{33}\]</span></p></li><li><p>若 <span class="math inline">\(\alpha_i\)</span> 是矩阵 <spanclass="math inline">\(A\)</span> 与特征值 <spanclass="math inline">\(\lambda_i\)</span> 对应的特征向量, <spanclass="math inline">\(\beta_i\)</span> 是矩阵 <spanclass="math inline">\(B\)</span> 与特征值 <spanclass="math inline">\(\mu_i\)</span> 对应的特征向量, 则 <spanclass="math inline">\(\alpha_i \otimes \beta_i\)</span> 是矩阵 <spanclass="math inline">\(A \otimes B\)</span> 与特征值 <spanclass="math inline">\(\lambda_i\mu_i\)</span> 对应的特征向量,也是与特征值 <span class="math inline">\(\lambda_i + \mu_i\)</span>对应的特征向量.</p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq},C_{k \times l}\)</span> 有</p><p><span class="math display">\[(A \otimes B) \otimes C = A \otimes (B \otimes C) \tag{34}\]</span></p><p>即 $ A B C$ 的结果是无模糊的.</p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq},C_{n \times r},D_{q \times s}\)</span> 有</p><p><span class="math display">\[(A \otimes B)(C \otimes D) = AC \otimes BD \tag{35}\]</span></p><p>更一般地, 有 <span class="math display">\[\prod_{i=1}^{N}[A(i) \otimes B(j)] =\bigg[\prod_{i=1}^{N}A(i)\bigg]\otimes \bigg[\prod_{i=1}^{N} B(i)\bigg]\tag{36}\]</span></p></li><li><p>对矩阵 <span class="math inline">\(A_{m \times n},B_{p \timesq}\)</span> 有</p><p><span class="math display">\[\mathrm{exp}(A \otimes B) = \mathrm{exp}(A) \otimes \mathrm{exp}(B)\tag{37}\]</span></p></li><li><p>若 <span class="math inline">\(B = I_p\)</span> 和 <spanclass="math inline">\(C = I_q\)</span>, 则</p><p><span class="math display">\[A \otimes D = (AI_p) \otimes (I_qD) = (A \otimes I_q)(I_p \otimes D)\tag{38}\]</span></p><p>式子中, <span class="math inline">\(I_p \otimes D\)</span>是块对角矩阵 (对应右 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积) 或稀疏矩阵 (对应左<span class="math inline">\(\mathrm{Kronecker}\)</span> 积). <spanclass="math inline">\(A \otimes I_q\)</span> 是稀疏矩阵 (对应右 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积) 或块对角矩阵(对应左 <span class="math inline">\(\mathrm{Kronecker}\)</span>积).</p></li></ul><h2 id="mathrmkhatri-rao-积的定义">3. <spanclass="math inline">\(\mathrm{Khatri-Rao}\)</span> 积的定义:</h2><p>如果 <span class="math inline">\(G\)</span> 是 <spanclass="math inline">\(t \times u\)</span> 矩阵, <spanclass="math inline">\(F\)</span> 是 <span class="math inline">\(q \timesu\)</span> 矩阵, 这两个矩阵的 <spanclass="math inline">\(\mathrm{Khatri-Rao}\)</span> 积记为 <spanclass="math inline">\(F * G\)</span>, 定义为</p><p><span class="math display">\[F * G = [f_1 \otimes g_1, f_2 \otimes g_2, \dots , f_u \otimes g_u]\tag{39}\]</span></p><h2 id="广义-mathrmkronecker-积">4. 广义 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积</h2><p>定义 6 : 给定 <span class="math inline">\(N\)</span> 个 <spanclass="math inline">\(m \times r\)</span> 矩阵 <spanclass="math inline">\(A_i,i = 1,2,\dots,N\)</span>, 它们组成矩阵组 <spanclass="math inline">\(\{A\}_N\)</span>. 该矩阵组与 <spanclass="math inline">\(N \times l\)</span> 矩阵 <spanclass="math inline">\(B\)</span> 的 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积称为广义 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积, 定义为</p><p><span class="math display">\[\{ A \}_N \otimes B = \begin{bmatrix}A_1 \otimes b_1\\A_2 \otimes b_2\\\vdots\\A_N \otimes b_N\end{bmatrix} \tag{40}\]</span></p><p>式中, <span class="math inline">\(b_i\)</span> 是矩阵 <spanclass="math inline">\(B\)</span> 的第 <spanclass="math inline">\(i\)</span> 个行向量.</p><h2 id="广义-mathrmkronecker-积的性质">5. 广义 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积的性质</h2><ul><li>若 <span class="math inline">\(\{A\}\)</span> 的每一个矩阵为 <spanclass="math inline">\(m_1 \times n_1\)</span> 矩阵, <spanclass="math inline">\(\{B\}\)</span> 的每一个矩阵为 <spanclass="math inline">\(m_2 \times n_2\)</span> 矩阵, 并且 <spanclass="math inline">\(\{C\}\)</span> 的每一个矩阵为 <spanclass="math inline">\(m_3 \times n_3\)</span>, 则</li></ul><p><span class="math display">\[(\{A\} \otimes \{B\}) \otimes \{C\} = \{A\} \otimes (\{B\} \otimes\{C\})\]</span></p><ul><li>广义 <span class="math inline">\(\mathrm{Kronecker}\)</span>积与矩阵直和之间存在关系</li></ul><p><span class="math display">\[\{A\}_N \otimes I_N = \underset{i=0}{\overset{N}{\oplus}}A_i\]</span></p><ul><li><p>若</p><p><span class="math display">\[\{A\} E = \begin{bmatrix}  A_1 E\\  A_2 E\\  \vdots\\  A_N E\end{bmatrix}\]</span></p><p>则 <span class="math display">\[(\{A\} E) \otimes (\{B\} F) = (\{A\} \otimes \{B\})(E \otimes F)\]</span></p></li><li><p>令 <spanclass="math inline">\(\{A^{(0)}\},\{A^{(1)}\},\dots,\{A^{(p-1)}\}\)</span>为 <span class="math inline">\(p\)</span> 个矩阵组, 并且第 <spanclass="math inline">\(k\)</span> 个矩阵组有 <spanclass="math inline">\(N_k = m^k\)</span> 个矩阵, 即 <spanclass="math inline">\(\{A^{(k)}\}_{N_k}\)</span>. 定义</p><p><span class="math display">\[R = \{A^{(p-1)}\}_{m^{p-1}} \otimes \{A^{(p-2)}\}_{m^{p-2}} \otimes\dots \otimes \{A^{(1)}\}_{m} \otimes A^{(0)}\]</span></p><p>则矩阵 <span class="math inline">\(R\)</span>具有稀疏矩阵分解形式</p><p><span class="math display">\[R = \prod_{k=0}^{p-1} \bigg[\underset{i=0}{\overset{m^{p-k-1}-1}{\oplus}} (I_{n^k} \otimesA_i^{(p-k-1)})\bigg]\]</span></p></li><li><p>若每一个矩阵 <span class="math inline">\(A_i^{(k)}\)</span> 为酉(或者仿酉) 矩阵, 则 <span class="math inline">\(R\)</span> 是酉(或者仿酉) 矩阵.</p></li><li><p>若 <span class="math inline">\(m = n\)</span>, 使得 <spanclass="math inline">\(A_i^{(k)}, i = 0,1,\dots,m^k-1, k =0,1,\dots,p-1\)</span> 均为正方矩阵, 则</p><p><span class="math display">\[\mathrm{det}(R) = \prod_{k=0}^{p-1}\prod_{i=0}^{m^k-1}[\mathrm{det}(A_i^{(k)})]^{m^k}\]</span></p></li></ul><h2 id="向量化函数mathrmkronecker-乘幂和-mathrmkhatri-rao-积的性质.">6.向量化函数、<span class="math inline">\(\mathrm{Kronecker}\)</span>乘幂和 <span class="math inline">\(\mathrm{Khatri-Rao}\)</span>积的性质.</h2><ul><li>矩阵之和向量化</li></ul><p><span class="math display">\[\mathrm{vec}(A+B) = \mathrm{vec}(A) + \mathrm{vec}(B) \tag{41}\]</span></p><ul><li>转置矩阵的向量化</li></ul><p><span class="math display">\[\mathrm{vec}(A^{\mathrm{T}}) = K_{pq}\mathrm{vec}(A) \tag{42}\]</span></p><ul><li>两个矩阵 <span class="math inline">\(A_{m \times n}, B_{n \timesp}\)</span> 的向量化</li></ul><p><span class="math display">\[\mathrm{vec}(AB) = (I_s \otimes A)\mathrm{vec}(B)=(B^{\mathrm{T}}\otimes I_p)\mathrm{vec}(A) = (B^{\mathrm{T}} \otimesA)\mathrm{vec}(I_q) \tag{43}\]</span></p><ul><li>三个矩阵 <span class="math inline">\(A_{m \times n}, B_{n \times p},C_{p \times q}\)</span> 的向量化</li></ul><p><span class="math display">\[\mathrm{vec}(ABC) = (C^{\mathrm{T}} \otimes A)\mathrm{vec}(B) \tag{44}\]</span></p><ul><li>矩阵的 <span class="math inline">\(\mathrm{Kronecker}\)</span>乘幂</li></ul><p><span class="math display">\[A^{[k+1]} = A \otimes A^{[k]} \tag{45}\]</span></p><ul><li>矩阵乘积的 <span class="math inline">\(\mathrm{Kronecker}\)</span>乘幂</li></ul><p><span class="math display">\[(AB)^{[k]} = A^{[k]} \otimes B^{[k]} \tag{46}\]</span></p><ul><li>三个矩阵乘积的迹</li></ul><p><span class="math display">\[\mathrm{tr}(ABC) = (\mathrm{vec}(A))^{\mathrm{T}}(I_p \otimesB)\mathrm{vec}(C) \tag{47}\]</span></p><ul><li>四个矩阵乘积的迹</li></ul><p><span class="math display">\[\mathrm{tr}(ABCD) =(\mathrm{vec}(D^{\mathrm{T}}))^{\mathrm{T}}(C^{\mathrm{T}} \otimesA)\mathrm{vec}(B) = (\mathrm{vec}(D))^{\mathrm{T}}(A \otimesC^{\mathrm{T}})\mathrm{vec}(B^{\mathrm{T}}) \tag{48}\]</span></p><ul><li>矩阵内积的迹等于两个矩阵的向量化函数的内积</li></ul><p><span class="math display">\[\mathrm{tr}(A^{\mathrm{T}}D) =(\mathrm{vec}(A))^{\mathrm{T}}\mathrm{vec}(D) \tag{49}\]</span></p><ul><li><span class="math inline">\(\mathrm{Khatri-Rao}\)</span>积的结合律</li></ul><p><span class="math display">\[A * (D * F) = (A * D) * F \tag{50}\]</span></p><ul><li><span class="math inline">\(\mathrm{Khatri-Rao}\)</span> 积 <spanclass="math inline">\(A*B\)</span> 与 <spanclass="math inline">\(B*A\)</span> 之间的关系</li></ul><p><span class="math display">\[A * B = K_{nn}(B*A) \tag{51}\]</span></p><ul><li><span class="math inline">\(\mathrm{Kronecker}\)</span> 积与 <spanclass="math inline">\(\mathrm{Khatri-Rao}\)</span> 积的乘积</li></ul><p><span class="math display">\[(A \otimes B)(F \otimes G) = AF * BG \tag{52}\]</span></p><h1 id="五mathrmkronecker-积的应用">五、<spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积的应用</h1><p>最直接的应用就是求解矩阵方程组</p><p><span class="math display">\[AXB = C \tag{53}\]</span></p><p>式中, <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(X\)</span> 分别是 <span class="math inline">\(m\times n\)</span> 和 <span class="math inline">\(n \times p\)</span>矩阵, 而 <span class="math inline">\(B\)</span> 和 <spanclass="math inline">\(C\)</span> 维数分别是 <spanclass="math inline">\(p \times q\)</span> 和 <spanclass="math inline">\(m \times q\)</span></p><p>利用向量化算符, 定义 <span class="math inline">\(x =\mathrm{vec}(X)\)</span> 和 <span class="math inline">\(c =\mathrm{vec}(C)\)</span>, 则上述方程组可以用 <spanclass="math inline">\(\mathrm{Kronecker}\)</span> 积改写为</p><p><span class="math display">\[(A \otimes B^{\mathrm{T}})x = c \tag{54}\]</span></p><p>解出向量 <span class="math inline">\(x\)</span> 就可利用向量 <spanclass="math inline">\(x\)</span> 的矩阵化算符得到原矩阵方程组的解矩阵<span class="math inline">\(X = \mathrm{unvec}(x)\)</span></p><p>还可以用于向量过程的累积量以及推导出多信道 <spanclass="math inline">\(BBR\)</span> 公式</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.9-Moore-Penrose逆矩阵-Section3</title>
    <link href="/posts/6ca5c076/"/>
    <url>/posts/6ca5c076/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1id="一非一致方程的最小范数最小二乘解">一、非一致方程的最小范数最小二乘解</h1><p>我们在之前广义逆矩阵一节中讲到了一致方程的最小范数解和非一致方程的最小二乘解.但是我们要注意, 最小二乘解非唯一, 我们要在其中找到一个范数最小的解,我们将其称为非一致方程的最小范数最小二乘解 ( minimun norm least squaressolution ), 我们也称其为半范数 ( seminorm ) 最小二乘解</p><p>定义 1: 对于非一致方程 <span class="math inline">\(A_{m \times n}x_{n \times 1} = y_{m \times 1}\)</span> , 如果矩阵 <spanclass="math inline">\(G\)</span> 满足条件:</p><p><span class="math display">\[\lVert Gy \rVert _n \leq \lVert \hat{x} \rVert _n ,其中 \forall \hat{x}\in \lbrace \hat{x}: \lVert A\hat{x}-y \rVert _m \leq \lVert Az-y \rVert_m \quad \forall y \in R^m, z \in R \rbrace \tag{1}\]</span></p><p>式子中, <span class="math inline">\(\lVert \cdot \rVert_n\)</span> 和<span class="math inline">\(\lVert \cdot \rVert_m\)</span> 分别是在<span class="math inline">\(R^n\)</span> 和 <spanclass="math inline">\(R^m\)</span> 空间的范数 (半范数); 花括号 <spanclass="math inline">\(\{ \cdot \}\)</span> 表示 <spanclass="math inline">\(\hat{x}\)</span> 是非一直方程 <spanclass="math inline">\(Ax=y\)</span> 的最小二乘解, 而 <spanclass="math inline">\(\lVert Gy \rVert_n \leq \lVert \hat{x}\rVert_n\)</span> 表示 <span class="math inline">\(Gy\)</span>是在所有的最小二乘解中具有最小范数的那个解.</p><p>定理 1: 矩阵 <span class="math inline">\(G\)</span> 使得 <spanclass="math inline">\(Gy\)</span> 是非一致方程 <spanclass="math inline">\(Ax=y\)</span> 的最小范数最小二乘解, 当且仅当 <spanclass="math inline">\(G\)</span> 满足条件:</p><p><span class="math display">\[AGA = A, \quad (AG)^{\sharp} = AG, \quad GAG = G, \quad (GA)^{\sharp} =GA \tag{2}\]</span></p><p>式子中, <span class="math inline">\(A^{\sharp}\)</span> 是 <spanclass="math inline">\(A\)</span> 的伴随矩阵.</p><p>该定理也可以等价表述为: 矩阵 <span class="math inline">\(G\)</span>使得 <span class="math inline">\(Gy\)</span> 是非一致方程 <spanclass="math inline">\(Ax = y\)</span> 的最小范数最小二乘解, 当且仅当<span class="math inline">\(G\)</span> 是 <spanclass="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵.</p><h1 id="二广义逆矩阵的阶数递推计算">二、广义逆矩阵的阶数递推计算</h1><p>系统辨识? 想必又是信号处理那方面的内容. 确实看起来有点打脑壳,也不知道它的目的是什么. 就直接提出左、右伪逆矩阵的阶数递推计算方法.</p><h2 id="左伪逆矩阵的阶数递推">1. 左伪逆矩阵的阶数递推</h2><p>考虑 <span class="math inline">\(n \times m\)</span> 矩阵 <spanclass="math inline">\(F_m\)</span>, 并设 <spanclass="math inline">\(F^{\dagger}=(F_m^{\mathrm{H}}F_m)^{-1}F_m^{\mathrm{H}}\)</span>是 <span class="math inline">\(F_m\)</span> 的左伪逆矩阵.</p><p>定理 2: 令</p><p><span class="math display">\[F_m = \begin{bmatrix}  F_{m-1}&amp; f_m\end{bmatrix} \tag{3}\]</span></p><p>式子中, <span class="math inline">\(f_m\)</span> 是矩阵 <spanclass="math inline">\(F_m\)</span> 的第 <spanclass="math inline">\(m\)</span> 列, 且 <spanclass="math inline">\(\mathrm{rank}(F_m)=m\)</span>, 则计算 <spanclass="math inline">\(F_m^{\dagger}\)</span> 的递推公式由下可得:</p><p><span class="math display">\[F_m^{\dagger} = \begin{bmatrix}F_{m-1}^{\dagger} - F_{m-1}^{\dagger}f_me_m^{\mathrm{H}}\Delta_m^{-1}\\e_m^{\mathrm{H}}\Delta_m^{-1}\end{bmatrix} \tag{4}\]</span></p><p>式子中,</p><p><span class="math display">\[e_m = [I_n - F_{m-1}F_{m-1}^{\dagger}] f_m \tag{5}\]</span></p><p><span class="math display">\[\Delta_m^{-1} = [f_m^{\mathrm{H}}e_m]^{-1} \tag{6}\]</span></p><p>且初始值为</p><p><span class="math display">\[F_1^{\dagger} = f_1^{\mathrm{H}}/(f_1^{\mathrm{H}}f_1) \tag{7}\]</span></p><h2 id="右伪逆矩阵的阶数递推">2. 右伪逆矩阵的阶数递推</h2><p>考虑矩阵 <span class="math inline">\(F_m \in C^{n \times m}, \ n &lt;m\)</span>.</p><p>定理 3: 记 <span class="math inline">\(F_m = [F_{m-1}, f_m]\)</span>,则右伪逆矩阵 <spanclass="math inline">\(F_m^{\dagger}=F_m^{\mathrm{H}}(F_mF_m^{\mathrm{H}})^{-1}\)</span>具有以下递推公式:</p><p><span class="math display">\[F_m^{\dagger} = \begin{bmatrix}F_{m-1}^{\dagger} - \Delta_mF_{m-1}^{\dagger}f_mc_m\\\Delta_m c_m^{\mathrm{H}}\end{bmatrix} \tag{8}\]</span></p><p>式中, <span class="math inline">\(c_m^{\mathrm{H}} =f_m^{\mathrm{H}}(I_n - F_{m-1}F_{m-1}^{\dagger}), \ \Delta_m =c_m^{\mathrm{H}}f_m\)</span>. 递推的初始值为 <spanclass="math inline">\(F_1^{\dagger} =f_1^{\mathrm{H}}/(f_1^{\mathrm{H}}f_1)\)</span>.</p><h1 id="三超定二维超越方程的求解">三、超定二维超越方程的求解</h1><p>这部分就真的是完全看不懂. 从二维信号处理中的一个基本问题:辨识二维实自回归 —— 移动平均 (<spanclass="math inline">\(\mathrm{ARMA}\)</span>) 模型的移动平均 (<spanclass="math inline">\(\mathrm{MA}\)</span>) 参数.</p><p>关于 <span class="math inline">\(\mathrm{ARMA}\)</span>常用作经济计量和工程预测. 本质上还是统计学, 和机器学习内核是一样的.</p><p>令 <spanclass="math inline">\(\mathrm{ARMA}(p_1,p_2;q_1,q_2)\)</span> 模型为</p><p><span class="math display">\[\sum_{i=0}^{p_1}\sum_{j=0}^{p_2}a_{ij}x(n_1 - i, n_2 - j) =\sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}e(n_1 - i, n_2 - j) \tag{9}\]</span></p><p>不失一般性, 假定 <span class="math inline">\(a_{00} = 1, q_1 \le p_1,q_2 \le p_2\)</span>, 且不可观测的实输入激励 <spanclass="math inline">\(e(n_1,n_2)\)</span> 为二维正态白噪声, 其均值为零,方差等于 <span class="math inline">\(\sigma^2\)</span>. 二维 <spanclass="math inline">\(\mathrm{ARMA}\)</span> 过程 <spanclass="math inline">\(\{ x(n_1,x_2) \}\)</span>的功率谱密度由下式给出:</p><p><span class="math display">\[P(\omega_1,\omega_2) =\frac{B(z_1,z_2)B(z_1^{-1},z_2^{-1})}{A(z_1,z_2)A(z_1^{-1},z_2^{-1})}\sigma^2\bigg|_{z_1=e^{i\omega_1},z_2=e^{j\omega_2}} \tag{10}\]</span></p><p>式中</p><p><span class="math display">\[A(z_1,z_2) = \sum_{i=0}^{p_1}\sum_{j=0}^{p_2}a_{ij}z_1^iz_2^j, \quadB=(z_1,z_2) \sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}z_1^iz_2^j\]</span></p><p>注意, 多项式 <spanclass="math inline">\(B(z_1,z_2)B(z_1^{-1},z_2^{-1})\)</span> 中的 <spanclass="math inline">\(z_1^kz_2^m\)</span> 和 <spanclass="math inline">\(z_1^{-k}z_2^{-m}\)</span> 项的系数相同, <spanclass="math inline">\(z_1^kz_2^{-m}\)</span> 和 <spanclass="math inline">\(z_1^{-k}z_2^m\)</span> 的系数相同. 所以可以将式子(10) 的分子写作</p><p><span class="math display">\[B(z_1,z_2)B(z_1^{-1},z_2^{-1})\sigma^2=C(z_1,z_2) + D(z_1,z_2^{-1}) +D(z_1^{-1},z_2) + C(z_1^{-1},z_2^{-1}) \tag{11}\]</span></p><p>式中</p><p><span class="math display">\[C(z_1,z_2) = \sum_{i=0}^{q_1}\sum_{j=0}^{q_2}c_{ij}z_1^iz_2^j, \quadD=(z_1,z_2^{-1}) \sum_{i=0}^{q_1}\sum_{j=0}^{q_2}d_{ij}z_1^iz_2^{-j}\]</span></p><p>比较式 (11) 两边相同幂次项的系数, 立即得</p><p><span class="math display">\[c_{00}=\frac{\sigma^2}{2}\sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}^2\tag{12}\]</span></p><p><span class="math display">\[c_{km}=\sigma^2\sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}b_{i+k,j+m}, \quadk = 0,1,\dots,q_1, \ m = 0,1,\dots,q_2, (k,m) \neq (0,0) \tag{13}\]</span></p><p><span class="math display">\[d_{km}=\sigma^2\sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}b_{i-k,j+m}, \quadk = 0,1,\dots,q_1, \ m = 1,2,\dots,q_2  \tag{14}\]</span></p><p>上述方程称为超定二维超越方程. 二维 <spanclass="math inline">\(\mathrm{ARMA}\)</span> 模型的 <spanclass="math inline">\(\mathrm{MA}\)</span> 参数辨识问题的提法是:已知二维 <span class="math inline">\(\mathrm{MA}\)</span> 谱参数 <spanclass="math inline">\(c_{km}\)</span> 和 <spanclass="math inline">\(d_{km}\)</span>, 求解超定二维超越方程式 (12) ~(13), 即得到二维 <span class="math inline">\(\mathrm{MA}\)</span> 参数<span class="math inline">\(b_{ij}\)</span>.</p><p>定义估计误差</p><p><span class="math display">\[f_{0,0} = \sum_{i=0}^{q_1}\sum_{j=0}^{q_2}b_{ij}^2 - 2c_{0,0} \tag{15}\]</span></p><p><span class="math display">\[f_{k,m} = \sum_{i=0}^{q_1-k}\sum_{j=0}^{q_2-m}b_{i,j}b_{i+k,j+m} -c_{k,m} \quad k = 0,1,\dots,q_1, \ m = 0,1,\dots,q_2, (k,m) \neq (0,0)\tag{16}\]</span></p><p><span class="math display">\[f_{k,m} = \sum_{i=0}^{q_1-k}\sum_{j=0}^{q_2-m}b_{i,j}b_{i+k,j+m} -d_{k,m} \quad k = 1,2,\dots,q_1, \ m = 1,2,\dots,q_2, (k,m) \tag{17}\]</span></p><p>记</p><p><span class="math display">\[\begin{aligned}f &amp;= [f_{0,0} \ , \dots,f_{q_1,q_2} \ , f_{q_1+1,q_2+1} \ , \dots,f_{2q_1,2q_2}]^{\mathrm{T}} \\b &amp;= [b_{0,0} \ , b_{0,1} \, \dots, b_{0,q_2} \ \dots \ , b_{q_1,0}\ , b_{q_1,1} \dots, b_{q_1,q_2}]^{\mathrm{T}}\end{aligned}\]</span></p><p>则梯度矩阵为</p><p><span class="math display">\[F = \frac{\partial f}{\partial b^{\mathrm{T}}}=\begin{bmatrix}  \frac{\partial f_{0,0}}{\partial b_{0,0}}&amp; \dots &amp;\frac{\partial f_{0,0}}{\partial b_{0,q_2}}&amp;  \dots&amp;  \frac{\partial f_{0,0}}{\partial b_{q_1,0}}&amp;\dots &amp; \frac{\partial f_{0,0}}{\partial b_{q_1,q_2}}\\  \vdots&amp;  &amp;  \vdots&amp;  &amp;  \vdots&amp;  &amp; \vdots\\  \frac{\partial f_{q_1,q_2}}{\partial b_{0,0}}&amp; \dots &amp;\frac{\partial f_{q_1,q_2}}{\partial b_{0,q_2}}&amp;  \dots&amp;  \frac{\partial f_{q_1,q_2}}{\partial b_{q_1,0}}&amp;\dots &amp; \frac{\partial f_{q_1,q_2}}{\partial b_{q_1,q_2}}\\  \frac{\partial f_{q_1+1,q_2+1}}{\partial b_{0,0}}&amp; \dots &amp;\frac{\partial f_{q_1+1,q_2+1}}{\partial b_{0,q_2}}&amp;  \dots&amp;  \frac{\partial f_{q_1+1,q_2+1}}{\partialb_{q_1,0}}&amp; \dots &amp; \frac{\partial f_{q_1+1,q_2+1}}{\partialb_{q_1,q_2}}\\  \vdots&amp;  &amp;  \vdots&amp;  &amp;  \vdots&amp;  &amp; \vdots\\  \frac{\partial f_{2q_1,2q_2}}{\partial b_{0,0}}&amp; \dots &amp;\frac{\partial f_{2q_1,2q_2}}{\partial b_{0,q_2}}&amp;  \dots&amp;  \frac{\partial f_{2q_1,2q_2}}{\partialb_{q_1,0}}&amp; \dots &amp; \frac{\partial f_{2q_1,2q_2}}{\partialb_{q_1,q_2}}\\\end{bmatrix} \tag{18}\]</span></p><p>定义矩阵</p><p><span class="math display">\[B_i = \begin{bmatrix}  b_{i,0}&amp;  \dots&amp;  b_{i,q_2-1}&amp; b_{i,q_2}\\  b_{i,1}&amp;  \dots&amp;  b_{i,q_2}&amp; 0\\  \vdots&amp;  &amp;\vdots  &amp; \vdots\\  b_{i,q_2}&amp;  \dots&amp;  0&amp; 0\end{bmatrix} \tag{19}\]</span></p><p><span class="math display">\[\bar{B_i} = \begin{bmatrix}  b_{i,0}&amp;  b_{i,1}&amp;  \dots&amp; b_{i,q_2}\\  0&amp;  b_{i,0}&amp;  \dots&amp; b_{i,q_2-1}\\  \vdots&amp;  &amp;\vdots  &amp; \vdots\\  0&amp;  \dots&amp;  0&amp; b_{i,0}\end{bmatrix} \tag{20}\]</span></p><p>和</p><p><span class="math display">\[A_i = \begin{bmatrix}  0&amp;  b_{i,0}&amp;  b_{i,1}&amp; \dots &amp; b_{i,q_2-1}\\  0&amp;  0&amp;  b_{i,0}&amp; \dots &amp; b_{i,q_2-2}\\  \vdots&amp;  &amp;\vdots  &amp; \vdots &amp; \vdots\\  0&amp;  \dots&amp;  0&amp; 0 &amp; b_{i,0}\end{bmatrix} \tag{21}\]</span></p><p><span class="math display">\[\bar{A_i} = \begin{bmatrix}  b_{i,1}&amp;  \dots&amp;  b_{i,q_2-1}&amp; b_{i,q_2} &amp; 0\\  b_{i,2}&amp;  \dots&amp;  b_{i,q_2}&amp; 0 &amp; 0\\  \vdots&amp;  &amp;\vdots  &amp; \vdots &amp; \vdots\\  b_{i,q_2}&amp;  0&amp;  \dots&amp; 0 &amp; 0\end{bmatrix} \tag{22}\]</span></p><p>矩阵 <span class="math inline">\(F\)</span> 具有下列形式:</p><p><span class="math display">\[F=\begin{bmatrix}  B_0&amp;  \dots&amp;  B_{q_1-1}&amp; B_{q_1}\\  B_1&amp;  \dots&amp;  B_{q_1}&amp; O\\  \vdots&amp;  &amp;  \vdots&amp; \vdots\\  B_{q_1}&amp;  \dots&amp;  O&amp; O\\  A_1&amp;  \dots&amp;  A_{q_1}&amp; O\\  A_2&amp;  \dots&amp;  O&amp; O\\  \vdots&amp;  &amp;  \vdots&amp; \vdots\\  A_{q_1}&amp;  \dots&amp; O &amp; O\end{bmatrix} + \begin{bmatrix}  \bar{B_0}&amp;  \bar{B_1}&amp;  \dots&amp; \bar{B_{q_1}}\\  O&amp;  \bar{B_0}&amp; \dots&amp; \bar{B_{q_1-1}}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  O&amp;  O&amp;  \dots&amp; \bar{B_0}\\  O&amp;  \bar{A_0}&amp;  \dots&amp; \bar{A_{q_1-1}}\\  O&amp;  O&amp;  \dots&amp; \bar{A_{q_1-2}}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  O&amp; O&amp; O &amp; \bar{A_0}\end{bmatrix} \tag{23}\]</span></p><p>我们就能求解, 若第 <span class="math inline">\(i\)</span>步迭代估计的 <span class="math inline">\(\mathrm{MA}\)</span>参数向量记为 <span class="math inline">\(b^{(i)}\)</span>, 则第 <spanclass="math inline">\((i+1)\)</span> 步的估计 <spanclass="math inline">\(b^{(i+1)}\)</span> 由下式给出:</p><p><span class="math display">\[b^{(i+1)} = b^{(i)} - F^{\dagger}f \tag{24}\]</span></p><p>式子中, <span class="math inline">\(F^{\dagger}\)</span> 是矩阵 <spanclass="math inline">\(F\)</span> 的广义逆矩阵.</p><p>算法 1: (二维 <span class="math inline">\(\mathrm{MA}\)</span>参数估计)</p><ul><li><p><b>Step1</b> : 取初始值 <span class="math inline">\(b_{0,0} =\sqrt{2c_{0,0}}\)</span> 和 <span class="math inline">\(b_{i,j}=0, \(i,j) \neq (0,0)\)</span></p></li><li><p><b>Step2</b> : 利用式子 (15)~(17) 计算拟合误差 <spanclass="math inline">\(f_{k,m}\)</span>, 然后利用式子 (23) 构造矩阵 <spanclass="math inline">\(F\)</span></p></li><li><p><b>Step3</b> : 根据式子 (24) 更新二维 <spanclass="math inline">\(\mathrm{MA}\)</span> 参数向量估计 <spanclass="math inline">\(b^{(i+1)}\)</span></p></li><li><p><b>Step4</b> : 返回 <b>Step2</b>, 并重复以上步骤, 知道所有 <spanclass="math inline">\(\mathrm{MA}\)</span> 参数估计值 <spanclass="math inline">\(b_{k,m}\)</span> 都收敛为止. 例如, 当</p><p><span class="math display">\[  \bigg| \frac{b_{km}^{(i+1)}-b_{km}^{(i)}}{b_{km}^{(i+1)}} \le 0.05\bigg| \tag{25}  \]</span></p><p>对所有 <span class="math inline">\(k = 0,1,\dots,q_1,m=0,1,\dots,q_2\)</span> 成立时, 即认可参数估计已经收敛.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.9-Moore-Penrose逆矩阵-Section2</title>
    <link href="/posts/1ba2f0e0/"/>
    <url>/posts/1ba2f0e0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="moore-penrose-逆矩阵的计算"><spanclass="math inline">\(Moore-Penrose\)</span> 逆矩阵的计算</h1><p>假设 <span class="math inline">\(A_{m \times n}\)</span> 秩为 <spanclass="math inline">\(r\)</span> , 且 <span class="math inline">\(r \leq\min(m,n)\)</span> , 我们在此介绍矩阵 <spanclass="math inline">\(A^{\dagger}\)</span> 求解的四种方法.</p><h2 id="方程求解法">1. 方程求解法</h2><p>首先求解矩阵方程</p><p><span class="math display">\[\begin{aligned}    AA^{\mathrm{H}} X^{\mathrm{H}} &amp;= A \\    A^{\mathrm{H}}AY &amp;= A^{\mathrm{H}} \\\end{aligned}\]</span></p><p>我们得到了 <span class="math inline">\(X^{\mathrm{H}}\)</span> 和<span class="math inline">\(Y\)</span></p><p>然后我们就能计算出广义逆矩阵 <span class="math inline">\(A^{\dagger}= XAY\)</span></p><p>若我们知道这个是一个 <spanclass="math inline">\(\mathrm{Hermitian}\)</span> 矩阵,则我们可以将上面的方程简化为一个:</p><p><span class="math display">\[A^2 X^{\mathrm{H}} = A\]</span></p><p>而此时的 <span class="math inline">\(\mathrm{Moore-Penrose}\)</span>矩阵化为: <span class="math inline">\(A ^{\dagger} =XAX^{\mathrm{H}}\)</span></p><p>我们由此可以得到两种解法：</p><p>解法一 :</p><ul><li><p>计算矩阵 <span class="math inline">\(B =AA^{\mathrm{H}}\)</span></p></li><li><p>求解矩阵方程 <span class="math inline">\(B^2 X^{\mathrm{H}} =B\)</span></p></li><li><p>计算 <span class="math inline">\(B\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵 <spanclass="math inline">\(B^{\dagger} = (AA^{\mathrm{H}}) ^{\dagger} =XBX^{\mathrm{H}}\)</span></p></li><li><p>计算矩阵 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵 <spanclass="math inline">\(A^{\dagger} = A^{\mathrm{H}} (AA^{\mathrm{H}})^{\dagger} = A^{\mathrm{H}} B^{\dagger}\)</span></p></li></ul><p>解法二 :</p><ul><li><p>计算矩阵 <span class="math inline">\(B =A^{\mathrm{H}}A\)</span></p></li><li><p>求解矩阵方程 <span class="math inline">\(B^2 X^{\mathrm{H}} =B\)</span></p></li><li><p>计算 <span class="math inline">\(B\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵 <spanclass="math inline">\(B^{\dagger} = (A^{\mathrm{H}}A) ^{\dagger} =XBX^{\mathrm{H}}\)</span></p></li><li><p>计算矩阵 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵 <spanclass="math inline">\(A^{\dagger} = (A^{\mathrm{H}}A) ^{\dagger}A^{\mathrm{H}} = B^{\dagger} A^{\mathrm{H}}\)</span></p></li></ul><p>具体选哪个看 <span class="math inline">\(AA^{\mathrm{H}}\)</span> 和<span class="math inline">\(A^{\mathrm{H}}A\)</span>两个哪一个的维数更小, 选小的那个</p><h2 id="mathrmkl-分解法">2. <spanclass="math inline">\(\mathrm{KL}\)</span> 分解法</h2><p>我们在前面的广义逆矩阵中单边逆矩阵的唯一解一节中提到了矩阵满秩分解的命题:</p><p>若 <span class="math inline">\(A = KL\)</span> 是矩阵 <spanclass="math inline">\(A_{m \times n}\)</span> 的满秩分解, 则:</p><p><span class="math display">\[G = L^H (K^H A L^H) ^{-1} K^H\]</span></p><p>满足 <span class="math inline">\(\mathrm{Moore-Penrose}\)</span>逆矩阵的四个条件, 为 <span class="math inline">\(A_{m \times n}\)</span>的 <span class="math inline">\(\mathrm{Moore-Penrose}\)</span>逆矩阵</p><h2 id="递推法">3. 递推法</h2><p>对矩阵 <span class="math inline">\(A_{m \times n}\)</span> 的前 <spanclass="math inline">\(k\)</span> 列进行分块, <spanclass="math inline">\(A_{k} = [A_{k-1}, a_k]\)</span> ,我们可以通过这个依次递推 <span class="math inline">\(A_{k-1}^{\dagger},\quad A_{k}^{\dagger}\)</span></p><p>我们将其称为 <span class="math inline">\(\mathrm{Greville}\)</span>算法:</p><p>初始值: <span class="math inline">\(A_{1}^{\dagger} = a_{1}^{\dagger}= (a_1^H a_1)^{-1} a_1^H\)</span></p><p>递推: 令 <span class="math inline">\(k = 2,3,\cdots , n\)</span> ,有以下:</p><p><span class="math display">\[\begin{aligned}d_k &amp;= A_{k-1}^{\dagger} a_k \\b_k &amp;=\begin{aligned}\left \{    \begin{array}{l}    (1+d_k^H d_k)^{-1} d_k^H A_{k-1}^{\dagger} , \quad d_k^Hd_k \neq -1\\    (a_k-A_{k-1}d_k) ^{\dagger} d_k^Hd_k = -1\\    \end{array} \right.\end{aligned} \\A_k^{\dagger} &amp;= \begin{bmatrix}        A_{k-1}^{\dagger} - d_k b_k \\        b_k \\    \end{bmatrix}\end{aligned}\]</span></p><h2 id="迹方法">4. 迹方法</h2><p>我们已知矩阵 <span class="math inline">\(A_{m \times n}\)</span>的秩为 <span class="math inline">\(r\)</span> , 我们有下列的求 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span>逆矩阵的迹方法:</p><ul><li><p>计算 <span class="math inline">\(B =AA^\mathrm{T}\)</span></p></li><li><p>令 <span class="math inline">\(C_1 = I\)</span></p></li><li><p>计算 <span class="math inline">\(C_{i+1} = \frac{1}{i}tr(C_i,B)I-C_iB , \qquad i = 1,2,\cdots,r-1\)</span></p></li><li><p>计算 <span class="math inline">\(A^{\dagger} = \frac{r}{tr(C_iB)}C_iA^\mathrm{T}\)</span> ( 注意此时有 <spanclass="math inline">\(C_{i+1}B = O \ 且 \ tr(C_iB) \neq 0\)</span>)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.9-Moore-Penrose逆矩阵-Section1</title>
    <link href="/posts/82aba15a/"/>
    <url>/posts/82aba15a/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>我们之前一节的广义逆矩阵已经包含了逆矩阵、左逆矩阵和右逆矩阵</p><p>我们现在面临一个问题: 最小二乘解是非唯一的, 其会有通解.这就会引申出两个问题</p><ul><li><p>是否存在某种意义下的唯一解?</p></li><li><p>若存在唯一解，那么广义逆矩阵 <span class="math inline">\(AGA =A\)</span> 是否仍旧有效？</p></li></ul><p>为此, 我们引入了涵义更为广泛的广义逆矩阵: <spanclass="math inline">\(Moore-Penrose\)</span> 逆矩阵</p><h1 id="moore-penrose-逆矩阵的定义与性质"><spanclass="math inline">\(Moore-Penrose\)</span> 逆矩阵的定义与性质</h1><p>我们用 <span class="math inline">\(P_S\)</span> 表示到向量空间 <spanclass="math inline">\(S\)</span> 上的正交投影. 明显的, 有 <spanclass="math inline">\(P_Sx\)</span> 在空间 <spanclass="math inline">\(S\)</span> 上,且 <spanclass="math inline">\(x-P_Sx\)</span> 与子空间 <spanclass="math inline">\(S\)</span> 正交.</p><p>对于任意一个 <span class="math inline">\(m \times n\)</span> 的复矩阵<span class="math inline">\(G\)</span> 我们使用 <spanclass="math inline">\(Range(G)\)</span> 来表示其值域空间.</p><p><span class="math inline">\(\mathrm{Moore}\)</span> 则证明出了, 矩阵<span class="math inline">\(G\)</span> 的广义逆矩阵 <spanclass="math inline">\(G^{\dagger}\)</span> 必须满足条件:</p><p><span class="math display">\[GG^{\dagger} = P_{Range(G)},\qquad G^{\dagger}G = P_{Range(G^H)} \tag{1}\]</span></p><p>我们将上述两条件称为 <spanclass="math inline">\(\mathrm{Moore}\)</span> 条件, 而满足 <spanclass="math inline">\(\mathrm{Moore}\)</span> 条件的矩阵 <spanclass="math inline">\(G^{\dagger}\)</span> 被称为 <spanclass="math inline">\(\mathrm{Moore}\)</span> 逆矩阵</p><p>此外, 由于上述条件不好使用, <spanclass="math inline">\(\mathrm{Penrose}\)</span> 提出的另外一组条件</p><h2 id="moore-penrose-条件">1. <spanclass="math inline">\(Moore-Penrose\)</span> 条件</h2><p>定义 1: 令A是任意的 <span class="math inline">\(m \times n\)</span>矩阵, 若称矩阵 <span class="math inline">\(G\)</span> 是 <spanclass="math inline">\(A\)</span> 的广义逆矩阵, 则需要满足下面四个条件(<span class="math inline">\(\mathrm{Moore-Penrose}\)</span> 条件):</p><ul><li><p><span class="math inline">\((1) \ AGA = A\)</span></p></li><li><p><span class="math inline">\((2) \ GAG = G\)</span></p></li><li><p><span class="math inline">\((3) \ AG\)</span> 为 <spanclass="math inline">\(\mathrm{Hermitian}\)</span> 矩阵, 即 <spanclass="math inline">\((AG)^{\mathrm{H}} = AG\)</span></p></li><li><p><span class="math inline">\((4) \ GA\)</span> 为 <spanclass="math inline">\(\mathrm{Hermitian}\)</span> 矩阵, 即 <spanclass="math inline">\((GA)^H = GA\)</span></p></li></ul><p>然后 <span class="math inline">\(\mathrm{Rado}\)</span> 证明了 <spanclass="math inline">\(\mathrm{Penrose}\)</span> 的定义与 <spanclass="math inline">\(\mathrm{Moore}\)</span> 的定义等价.</p><h2 id="以条件满足数目分类">2. 以条件满足数目分类</h2><ul><li><p>自反广义逆矩阵: 只满足条件 (1) 和 (2) 的矩阵 <spanclass="math inline">\(G=A^{\dagger}\)</span> 称为 <spanclass="math inline">\(A\)</span> 的自反广义矩阵.</p></li><li><p>正规化广义逆矩阵: 只满足条件(1)、(2) 和 (3) 的矩阵 <spanclass="math inline">\(A^{\dagger}\)</span> 称为 <spanclass="math inline">\(A\)</span> 的正规化广义逆矩阵.</p></li><li><p>弱广义逆矩阵: 只满足条件(1)、(2) 和 (4) 的矩阵 <spanclass="math inline">\(A^{\dagger}\)</span> 称为 <spanclass="math inline">\(A\)</span> 的弱广义逆矩阵.</p></li><li><p><span class="math inline">\(Moore-Penrose\)</span> 逆矩阵: 满足 4个条件</p></li></ul><h2 id="一般广义矩阵的特性">3. 一般广义矩阵的特性</h2><p>定理 1:</p><p>若 <span class="math inline">\(A^g\)</span> 是矩阵 <spanclass="math inline">\(A\)</span> 的任意一种广义逆矩阵, 则有:</p><p><span class="math display">\[\mathrm{rank}(A^g) \geq \mathrm{rank}(A) = \mathrm{rank}(A^gA) =\mathrm{rank}(AA^g)\]</span></p><p>秩 <span class="math inline">\(\mathrm{rank}(A^g) =\mathrm{rank}(A)\)</span> 的一个充要条件：<spanclass="math inline">\(A^g\)</span> 是 <spanclass="math inline">\(A\)</span> 的自反广义逆矩阵</p><p>我们上面的 <span class="math inline">\(Moore-Penrose\)</span>条件可以引申到下面的几条性质：</p><ul><li><p><span class="math inline">\((A^H) ^{\dagger} = (A^{\dagger})^H\)</span></p></li><li><p><span class="math inline">\(A^{\dagger} AA^H = A^H AA^{\dagger} =A^H\)</span></p></li><li><p><span class="math inline">\(AA^H (A^H) ^{\dagger} = (A^H)^{\dagger} A^HA = A\)</span></p></li><li><p><span class="math inline">\(AA^{\dagger} ,\ A^{\dagger}A ,\(I-AA^{\dagger}) ,\ (I-A^{\dagger}A)\)</span> 均为幂等矩阵</p></li></ul><p>之前几篇博客里的广义逆矩阵的特例</p><ul><li><p><span class="math inline">\(n \times n\)</span> 的正方非奇异矩阵<span class="math inline">\(A_{n \times n}\)</span> 的逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 满足 4 个条件</p></li><li><p><span class="math inline">\(m \times n\)</span> 的 <spanclass="math inline">\(A_{m \times n} (m &gt; n)\)</span> 的左伪逆矩阵<span class="math inline">\((A^HA) ^{-1} A^H\)</span> 满足 4个条件</p></li><li><p><span class="math inline">\(m \times n\)</span> 的 <spanclass="math inline">\(A_{m \times n} (m &lt; n)\)</span> 的右伪逆矩阵<span class="math inline">\(A^H (AA^H) ^{-1}\)</span> 满足 4个条件</p></li><li><p>满足 <span class="math inline">\(LA_{m \times n} = I_n\)</span>的一般左逆矩阵 <span class="math inline">\(L_{n \times m}\)</span> 满足(1), (2)和 (4) 条件, 是弱广义逆矩阵</p></li><li><p>满足 <span class="math inline">\(A_{m \times n}R = I_m\)</span>的一般右逆矩阵 <span class="math inline">\(R_{n \times m}\)</span> 满足(1), (2)和 (3)条件, 是正规化广义逆矩阵</p></li><li><p>广义逆矩阵 <span class="math inline">\(A^{-}\)</span> 只满足条件(1)</p></li></ul><p>不同于左逆矩阵 <span class="math inline">\(L\)</span> 右逆矩阵 <spanclass="math inline">\(R\)</span> 和广义逆矩阵 <spanclass="math inline">\(A^{-}\)</span> 的多值性, <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span>逆矩阵定义唯一.</p><p>一般的, 我们使用广义逆矩阵直接当作 <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵的简称, 使用<span class="math inline">\(A^{\dagger}\)</span> 表示.</p><p>而原来的广义逆矩阵 (即只用条件 (1) <span class="math inline">\(AGA =A\)</span> 定义的) 广义逆矩阵只用 <spanclass="math inline">\(A^{-}\)</span> 表示.</p><p>一般情况下, <span class="math inline">\(A^{\dagger}\)</span>并不满足逆矩阵的性质 <span class="math inline">\((AB)^{-1} = B^{-1}A^{-1}\)</span>, 即有:</p><p><span class="math display">\[(AB)^{\dagger} \neq B^{\dagger} A^{\dagger}\]</span></p><p>定理 2:</p><p>若 <span class="math inline">\(A,B\)</span> 均为使得矩阵 <spanclass="math inline">\(AB\)</span> 存在的任意矩阵, 则 <spanclass="math inline">\((AB)^{\dagger} = B^{\dagger} A^{\dagger}\)</span>的充要条件为以下之一:</p><ul><li><p>$A^{}AB B^H A^H = BB^H A^H $ 和 $ BB^{} A^HAB = A^HAB$</p></li><li><p><span class="math inline">\(A^{\dagger} ABB^H\)</span> 和 <spanclass="math inline">\(A^HA BB^{\dagger}\)</span> 都是 <spanclass="math inline">\(\mathrm{Heritian}\)</span> 矩阵</p></li><li><p><span class="math inline">\(A^{\dagger}A BB^H A^HA BB^{\dagger} =BB^H A^HA\)</span></p></li><li><p><span class="math inline">\(A^{\dagger}AB =B(AB)^{\dagger}AB\)</span> 且 <span class="math inline">\(BB^{\dagger}A^H = A^HAB (AB)^{\dagger}\)</span></p></li></ul><h2 id="mathrmmoore-penrose-逆矩阵-adagger-的性质">4. <spanclass="math inline">\(\mathrm{Moore-Penrose}\)</span> 逆矩阵 <spanclass="math inline">\(A^{\dagger}\)</span> 的性质</h2><ul><li><p>广义逆矩阵 <span class="math inline">\(A^{\dagger}\)</span>唯一</p></li><li><p><span class="math inline">\((A^H) ^{\dagger} = (A^{\dagger}) ^H =A^{\dagger H} = A^{H \dagger}\)</span></p></li><li><p><span class="math inline">\((A^{\dagger}) ^{\dagger} =A\)</span></p></li><li><p>若 $c $，则有 $ (cA)^{} = A^{}$</p></li><li><p>若 <span class="math inline">\(D =diag(d_{11},d_{22},\cdots,d_{nn})\)</span> 为 <spanclass="math inline">\(n \times n\)</span> 对角矩阵, 则 <spanclass="math inline">\(D^{\dagger} = diag(d_{11}^{\dagger},d_{22}^{\dagger}, \cdots, d_{nn}^{\dagger})\)</span> (其中 <spanclass="math inline">\(d_{ii}^{\dagger} = d_{ii}^{-1}\)</span> 或 <spanclass="math inline">\(d_{ii}^{\dagger} = 0\)</span> )</p></li><li><p>零矩阵的广义逆矩阵为零矩阵, 即: <span class="math inline">\(O_{m\times n}^{\dagger} = O_{n \times m}\)</span></p></li><li><p>向量 $ x $ 的Moore-Penrose逆矩阵为: <spanclass="math inline">\(x^{\dagger} = (x^Hx) ^{-1} x^H\)</span></p></li><li><p>关于几个真假的判断:</p><ul><li><p><span class="math inline">\(AA^{\dagger} \neqI_{m}\)</span></p></li><li><p><span class="math inline">\(A^{\dagger}A \neqI_{n}\)</span></p></li><li><p><span class="math inline">\(A^H (A^H) ^{\dagger} \neqI_{n}\)</span></p></li><li><p><span class="math inline">\((A^H) ^{\dagger} A^H \neqI_{m}\)</span></p></li><li><p><span class="math inline">\(A^{\dagger}A A^H =A^H\)</span></p></li><li><p><span class="math inline">\(A^{H} AA^{\dagger} =A^{H}\)</span></p></li><li><p><span class="math inline">\(A^{H} AA^{\dagger} =A^{H}\)</span></p></li><li><p><span class="math inline">\(A^{H} A^{\dagger}A =A^{H}\)</span></p></li><li><p><span class="math inline">\(A A^{\dagger} (A^{\dagger}) ^H =(A^{\dagger}) ^H\)</span></p></li><li><p><span class="math inline">\((A^{\dagger}) ^H A^{\dagger} A =(A^{\dagger}) ^H\)</span> 这里存疑。。。</p></li><li><p><span class="math inline">\((A^H) ^{\dagger} A^H A =A\)</span></p></li><li><p><span class="math inline">\(A A^H (A^H) ^{\dagger} =A\)</span></p></li><li><p><span class="math inline">\(A^H (A^{\dagger}) ^H A^{\dagger} =A^{\dagger}\)</span></p></li><li><p><span class="math inline">\(A^{\dagger} (A^{\dagger}) ^H A^H =A^{\dagger}\)</span></p></li></ul></li><li><p>任何矩阵 <span class="math inline">\(A_{m \times n}\)</span>的广义逆矩阵都可以用 <span class="math inline">\(A^{\dagger} = (A^H A)^{\dagger} A^H\)</span> 或者 <span class="math inline">\(A^{\dagger} =A^H (AA^H) ^{\dagger}\)</span> 确定, 且他们有特殊情况:</p><ul><li><p>若 <span class="math inline">\(A\)</span> 列满秩, 则 <spanclass="math inline">\(A^{\dagger} = (A^HA) ^{-1} A^{\dagger}\)</span> ,此时退化为左伪逆矩阵</p></li><li><p>若 <span class="math inline">\(A\)</span> 行满秩, 则 <spanclass="math inline">\(A^{\dagger} = A^H (AA^H) ^{-1}\)</span> ,此时退化为右伪逆矩阵</p></li><li><p>若 <span class="math inline">\(A\)</span> 为非奇异的正方矩阵, 则<span class="math inline">\(A^{\dagger} = A^{-1}\)</span> ,此时退化为逆矩阵</p></li></ul></li><li><p>若 <span class="math inline">\(A^H A = PDP^H\)</span> , 其中<span class="math inline">\(PP^H = P^HP = I\)</span> , 且 <spanclass="math inline">\(D\)</span> 为对角矩阵 , 则 <spanclass="math inline">\(A^{\dagger} = PD^{\dagger} P^HA^H\)</span></p></li><li><p>若 <span class="math inline">\(A = BC\)</span> , 且 <spanclass="math inline">\(B\)</span> 列满秩 , <spanclass="math inline">\(C\)</span> 行满秩, 则有:</p></li></ul><p><span class="math display">\[A^{\dagger} = C^{\dagger} B^{\dagger} = C^H (CC^H) ^{-1} (B^HB) ^{-1}B^H\]</span></p><ul><li><p>若 $A^H = A $ ，其 $ A^2 = A $ ，则 $ A^{} = A$</p></li><li><p>如矩阵 <span class="math inline">\(A_{i}\)</span> 相互正交, 即<span class="math inline">\(A_i^H A_j = O\)</span> , 则我们有:</p></li></ul><p><span class="math display">\[(A_1 + A_2 + \cdots + A_m) ^{\dagger} = A_1^{\dagger} + A_2^{\dagger} +\cdots + A_m^{\dagger}\]</span></p><ul><li><p><span class="math inline">\((AA^H) ^{\dagger} = (A^{\dagger}) ^HA^{\dagger}\)</span></p></li><li><p><span class="math inline">\((AA^H) ^{\dagger} (AA^H) =AA^{\dagger}\)</span></p></li><li><p>一般来说 <span class="math inline">\((A^m) ^{\dagger} \neq(A^{\dagger}) ^m\)</span> , 但只要 <span class="math inline">\(AA^H =A^HA\)</span> , 则有 <span class="math inline">\((A^m) ^{\dagger} =(A^{\dagger}) ^m\)</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 为 <spanclass="math inline">\(m \times n\)</span> 矩阵，则有:</p></li></ul><p><span class="math display">\[\begin{bmatrix}    A_{m \times n} &amp; O_{m \times q} \\    O_{p \times n} &amp; O_{p \times q} \\\end{bmatrix}^{\dagger} = \begin{bmatrix}    (A^{\dagger})_{n \times m} &amp; O_{n \times p} \\    O_{q \times m} &amp; O_{q \times p} \\\end{bmatrix}\]</span></p><p><span class="math display">\[\begin{bmatrix}    O_{p \times q} &amp; O_{p \times n} \\    O_{m \times q} &amp; A_{m \times n} \\\end{bmatrix}^{\dagger} = \begin{bmatrix}    O_{q \times p} &amp; O_{q \times m} \\    O_{m \times q} &amp; (A^{\dagger})_{n \times m} \\\end{bmatrix}\]</span></p><ul><li>对于广义逆矩阵的秩, 有:</li></ul><p><span class="math display">\[\begin{aligned}\mathrm{rank}(A^{\dagger}) &amp; = \mathrm{rank}(A) = \mathrm{rank}(A^H)\\&amp;= \mathrm{rank}(A^{\dagger}A) = \mathrm{rank}(AA^{\dagger}) \\&amp;= \mathrm{rank}(AA^{\dagger}A) =\mathrm{rank}(A^{\dagger}AA^{\dagger}) \\\end{aligned}\]</span></p><ul><li><p>广义逆矩阵 <span class="math inline">\(A^{\dagger}\)</span> 和<span class="math inline">\(A^H\)</span> 的行空间相同(即他们的行空间都互相包含)</p></li><li><p>广义逆矩阵 <span class="math inline">\(A^{\dagger}\)</span> 和<span class="math inline">\(A^H\)</span> 的列空间相同 ( 即 <spanclass="math inline">\(\mathrm{Span}(A^{\dagger}) =\mathrm{Span}(A^H)\)</span> 或者 <spanclass="math inline">\(\mathrm{Range}(A^{\dagger}) =\mathrm{Range}(A^H)\)</span> )</p></li><li><p>对于 <span class="math inline">\(m &gt; n\)</span> , 且 <spanclass="math inline">\(\mathrm{rank}(A) = n\)</span> 时, 我们有广义逆矩阵(左伪逆矩阵) <span class="math inline">\(A^{\dagger} = (A^HA) ^{-1}A^H\)</span></p><ul><li><p><span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(AA^{\dagger}\)</span> 的列空间相同</p></li><li><p><span class="math inline">\((I_m -AA^{\dagger})\)</span>的列空间是矩阵 <span class="math inline">\(A\)</span>的列空间的正交补</p></li><li><p><span class="math inline">\(AA^{\dagger} = A(A^HA) ^{-1}A^H\)</span> 是幂等矩阵</p></li><li><p><span class="math inline">\(I_m-AA^{\dagger}\)</span>是幂等矩阵</p></li></ul></li><li><p>对于 <span class="math inline">\(m &lt; n\)</span> , 且 <spanclass="math inline">\(\mathrm{rank}(A) = m\)</span> 时, 我们有广义逆矩阵(右伪逆矩阵) <span class="math inline">\(A^{\dagger} = A^H (AA^H)^{-1}\)</span></p><ul><li><p><span class="math inline">\(A^{\dagger}\)</span> 和 <spanclass="math inline">\(A^{\dagger}A\)</span> 的列空间相同</p></li><li><p><span class="math inline">\((I_n -A^{\dagger}A)\)</span>的列空间是矩阵 <span class="math inline">\(A^H\)</span>的列空间的正交补</p></li><li><p><span class="math inline">\(A^{\dagger}A = A^H (AA^H) ^{-1}A\)</span> 是幂等矩阵</p></li><li><p><span class="math inline">\(I_n - A^{\dagger}A\)</span>是幂等矩阵</p></li></ul></li><li><p>若 <span class="math inline">\(A_{m \times n} , B_{m \timesp}\)</span> , 则我们有:</p><p><span class="math display">\[  \begin{bmatrix}  A,&amp; B \\  \end{bmatrix}  ^{\dagger} = \begin{bmatrix}  A^{\dagger} - A^{\dagger} B (C^{\dagger}+D) \\  C^{\dagger}+D  \end{bmatrix}  \]</span></p><p>其中, 我们有 <span class="math inline">\(C = (I_m -AA^{\dagger})B\)</span> , 且 <span class="math inline">\(D = (I_p -C^{\dagger}C) [I_p + (I_p-C^{\dagger}C) B^H (A^{\dagger}) ^H B (I_p -C^{\dagger}C)] ^{-1} B^H (A^{\dagger}) ^H (I_m -BC^{\dagger})\)</span></p></li><li><p>若 <span class="math inline">\(A_{m \times n} , B_{p \timesn}\)</span> , 则我们有:</p><p><span class="math display">\[  \begin{bmatrix}  A \\  B \\  \end{bmatrix}  ^{\dagger} = \begin{bmatrix}  A^{\dagger} - TBA^{\dagger}, &amp;T  \end{bmatrix}  \]</span></p><p>其中, 我们有 <span class="math inline">\(T = E^{\dagger} + (I_n-E^{\dagger}B) A^{\dagger} (A^{\dagger}) ^H B^HK(I_p-EE^{\dagger})\)</span> , 且 <span class="math inline">\(K = [I_p +(I_p - EE^{\dagger}) BA^{\dagger} (A^{\dagger}) ^H B^H (I_p -EE^{\dagger})]^{-1}\)</span></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.8-广义逆矩阵</title>
    <link href="/posts/ed973ab3/"/>
    <url>/posts/ed973ab3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>之前说的逆矩阵都是在方阵的条件下进行讨论的,然后这部分内容将方阵推广到一般矩阵.</p><h1 id="一左逆矩阵与右逆矩阵">一、左逆矩阵与右逆矩阵</h1><h2 id="左逆矩阵与右逆矩阵的存在性">1. 左逆矩阵与右逆矩阵的存在性</h2><p>从广义角度来讲, 对于任意矩阵 <span class="math inline">\(A\)</span>,只要有一个矩阵 <span class="math inline">\(L\)</span> 使得 <spanclass="math inline">\(LA=I\)</span>, 那么矩阵 <spanclass="math inline">\(L\)</span> 就是 <spanclass="math inline">\(A\)</span> 的逆矩阵. 那么 <spanclass="math inline">\(L\)</span> 存在着三种情况.</p><ul><li><p><span class="math inline">\(L\)</span> 存在且唯一</p></li><li><p><span class="math inline">\(L\)</span> 存在但不唯一</p></li><li><p><span class="math inline">\(L\)</span> 不存在</p></li></ul><p>定义 1: 满足 <span class="math inline">\(LA = I\)</span>, 但不满足<span class="math inline">\(AL=I\)</span> 的矩阵 <spanclass="math inline">\(L\)</span> 称为矩阵 <spanclass="math inline">\(A\)</span> 的左逆矩阵. 同理, 满足 <spanclass="math inline">\(AR=I\)</span>, 但不满足 <spanclass="math inline">\(RA=I\)</span> 的矩阵称为矩阵 <spanclass="math inline">\(A\)</span> 的右逆矩阵.</p><p>定理 1: 仅当 <span class="math inline">\(m \ge n\)</span> 时, 矩阵<span class="math inline">\(A \in C^{m \times n}\)</span>可能有左逆矩阵. (证明方法是把矩阵转换成分块矩阵)</p><p>定理 2: 仅当 <span class="math inline">\(m \le n\)</span> 时, 矩阵<span class="math inline">\(A \in C^{m \times n}\)</span>可能有右逆矩阵. (证明方法同定理 1 类似)</p><p>特别地, 方阵的左逆矩阵和右逆矩阵相等, 那么这个方阵就是非奇异的.它的逆矩阵即使左逆矩阵, 又是右逆矩阵.</p><h2 id="左逆矩阵与右逆矩阵的唯一解">2. 左逆矩阵与右逆矩阵的唯一解</h2><p>对给定的 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span>, 考察 <span class="math inline">\(m&gt; n\)</span> 且 <span class="math inline">\(A\)</span> 具有满列秩(<span class="math inline">\(\mathrm{rank}A=n\)</span>) 的情况.易得,</p><p><span class="math display">\[L=(A^{\mathrm{H}}A)^{-1}A^{\mathrm{H}} \tag{1}\]</span></p><p>满足左逆矩阵的定义 <span class="math inline">\(LA=I\)</span>,这种左逆矩阵是唯一的, 常称为左伪逆矩阵.</p><p>考察 <span class="math inline">\(m &lt; n\)</span> 且 <spanclass="math inline">\(A\)</span> 具有满行秩 (<spanclass="math inline">\(\mathrm{rank}A=m\)</span>) 的情况. 此时, <spanclass="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(AA^{\mathrm{H}}\)</span> 是可逆的, 定义</p><p><span class="math display">\[R = A^{\mathrm{H}}(AA^{\mathrm{H}})^{-1} \tag{2}\]</span></p><p>满足右逆矩阵的定义 <span class="math inline">\(AR=I\)</span>,这种右逆矩阵是唯一的, 常称为右伪逆矩阵.</p><p>左伪逆矩阵与超定方程的最小二乘解密切相关,而右伪逆矩阵则与欠定方程的最小二乘和最小范数解密切联系.</p><h1 id="二广义逆矩阵的定义及性质">二、广义逆矩阵的定义及性质</h1><h2 id="一致性方程">1. 一致性方程</h2><p>一致性方程：</p><p>定义 2: 若矩阵 <span class="math inline">\(A\)</span>行之间存在的线性关系同时也存在于向量 <spanclass="math inline">\(y\)</span> 的对应元素之间, 则称 <spanclass="math inline">\(A_{m \times n}x_{n \times 1}=y_{m \times1}\)</span> 为一致性方程.</p><p>定理 3: 当且仅当方程为一致性方程时, 这线性方程组可以求解.</p><p>定理 4: 线性方程 <span class="math inline">\(Ax=y\)</span> 是一致的,当且仅当增广矩阵 <span class="math inline">\([A,y]\)</span> 的秩等于矩阵A 的秩, 即：</p><p><span class="math display">\[rank([A,y]) = rank(A)\]</span></p><h2 id="广义逆矩阵-g">2. 广义逆矩阵 <spanclass="math inline">\(G\)</span></h2><p>广义逆矩阵 <span class="math inline">\(G\)</span>:</p><p>定义 3: 若 <span class="math inline">\(A\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 且具有任意秩. 即矩阵<span class="math inline">\(A\)</span> 的广义逆矩阵是一个 <spanclass="math inline">\(n \times m\)</span> 矩阵 <spanclass="math inline">\(G\)</span>, 并且使得当 <spanclass="math inline">\(Ax = y\)</span> 为一致性方程时, <spanclass="math inline">\(x = Gy\)</span> 是线性方程 <spanclass="math inline">\(Ax=y\)</span> 的解.</p><p>定理 5: 当且仅当 <span class="math inline">\(AGA = A\)</span>时,一致性方程 <span class="math inline">\(Ax = y\)</span> 对于 <spanclass="math inline">\(y \neq 0\)</span> 有解 <spanclass="math inline">\(x = Gy\)</span>.</p><p>命题 1: 方程 <span class="math inline">\(Ax=0\)</span>的解与矩阵A的任意行正交, 并且线性无关.</p><p>证明:</p><p>我们知道 <span class="math inline">\(Ax=0\)</span> 是一个一致性方程,即矩阵 <span class="math inline">\(A\)</span> 之中行之间的关系存在于 0向量中. 线性方程也一定是有解的. 用 <spanclass="math inline">\(a^T\)</span> 表示矩阵中的任意一行, <spanclass="math inline">\(\tilde{x}\)</span> 表示方程的一个解,即有 <spanclass="math inline">\(a^T \tilde{x}=0\)</span>, 即解与 <spanclass="math inline">\(A\)</span> 中任意一行正交.</p><p><span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的广义逆矩阵 <spanclass="math inline">\(G\)</span> 用符号 <spanclass="math inline">\(A^-\)</span> 表示, 即 <spanclass="math inline">\(G = A^-\)</span></p><p>引理 1: <span class="math inline">\(A^-\)</span> 存在 <spanclass="math inline">\(\Leftrightarrow AA^-A=A\)</span></p><p>证明 :</p><p><span class="math inline">\(\Rightarrow\)</span> 的证明</p><p>令 <span class="math inline">\(y = Az\)</span> 且 <spanclass="math inline">\(z\)</span> 是一个 <span class="math inline">\(n\times 1\)</span> 的任意向量, 即有 <span class="math inline">\(Ax =y\)</span> 是一致性方程.</p><p>在这里, 广义逆矩阵 <span class="math inline">\(A^-\)</span> 存在的话,就意味着:</p><p><span class="math display">\[A(A^-Az) = A(A^- y) = Az , \quad \forall z \quad \Rightarrow AA^-A=A\]</span></p><p><span class="math inline">\(\Leftarrow\)</span> 的证明</p><p>若 <span class="math inline">\(AGA = A\)</span>, 我们需要证明 <spanclass="math inline">\(G\)</span> 就是矩阵 <spanclass="math inline">\(A\)</span> 的广义逆矩阵 <spanclass="math inline">\(A^-\)</span></p><p>若 <span class="math inline">\(Ax = y\)</span> 是一致性方程, 则 <spanclass="math inline">\(\exists\)</span> 解向量 <spanclass="math inline">\(w\)</span> 满足 <span class="math inline">\(Aw =y\)</span> 。</p><p>由于 <span class="math inline">\(AGA = A\)</span>, 即 <spanclass="math inline">\(AGAw = Aw \Rightarrow AGy = Aw = y\)</span>.即我们看到 <span class="math inline">\(Gy\)</span> 满足线性方程 <spanclass="math inline">\(Ax = y\)</span>.</p><p>即 $ Gy $ 是 $ Ax = y $ 的一个解向量，即 $ G = A^- $</p><p>引理 2: 下面结论为真</p><ul><li><p><span class="math inline">\(A^-\)</span> 存在 <spanclass="math inline">\(\Leftrightarrow H=A^-A\)</span> 为幂等矩阵 (即<span class="math inline">\(H^2 = H\)</span>) 和 <spanclass="math inline">\(\mathrm{rank}(H)=\mathrm{rank}(A)\)</span>.</p></li><li><p><span class="math inline">\(A^-\)</span> 存在 <spanclass="math inline">\(\Leftrightarrow F=AA^-\)</span> 为幂等矩阵 (即<span class="math inline">\(F^2 = F\)</span>) 和 <spanclass="math inline">\(\mathrm{rank}(F)=\mathrm{rank}(A)\)</span>.</p></li></ul><p>而对于 <span class="math inline">\(\Rightarrow\)</span> 的证明:</p><p>这个我们用上面的 <span class="math inline">\(AA^-A = A\)</span>同时左乘一个 <span class="math inline">\(A^-\)</span> 即可证明 <spanclass="math inline">\(H^2 = H\)</span></p><p>而矩阵性质: <span class="math inline">\(\mathrm{rank}(AB) \leq\mathrm{rank}(A)\)</span> 或者 <spanclass="math inline">\(\mathrm{rank}(AB) \leq \mathrm{rank}(B)\)</span>，</p><p>又有 <span class="math inline">\(H = A^-A\)</span> 以及 <spanclass="math inline">\(AH = AA^-A = A\)</span></p><p>即我们有: <span class="math inline">\(\mathrm{rank}(A) \geq\mathrm{rank}(H) \geq \mathrm{rank}(AH) \geq\mathrm{rank}(A)\)</span></p><p>得证 <span class="math inline">\(\mathrm{rank}(H) =\mathrm{rank}(A)\)</span></p><p>而对于 <span class="math inline">\(\Leftarrow\)</span> 的证明:</p><p>我们假定 <span class="math inline">\(H = A^-A\)</span> 是幂等矩阵, 且<spanclass="math inline">\(\mathrm{rank}(H)=\mathrm{rank}(A)\)</span></p><p>即我们有 <span class="math inline">\(H(I-H) = O \Rightarrow A^-A(I-A^-A) = O \Rightarrow A(I-A^-A) = O \Rightarrow AA^-A =A\)</span></p><p>类似可证明另一个结论.</p><h2 id="广义逆矩阵的其他两种定义">3. 广义逆矩阵的其他两种定义</h2><p>定义 4: <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的广义逆矩阵是一个满足</p><p><span class="math display">\[AA^-A = A\]</span></p><p>的 <span class="math inline">\(n \times m\)</span> 矩阵 <spanclass="math inline">\(A^-\)</span>.</p><p>定义 5: <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的广义逆矩阵是满足下列两个条件之一的<span class="math inline">\(n \times m\)</span> 的矩阵 <spanclass="math inline">\(A^-\)</span></p><ul><li><span class="math inline">\(A^-A\)</span> 为幂等矩阵, 且 <spanclass="math inline">\(\mathrm{rank}(A^-A) =\mathrm{rank}(A)\)</span></li><li><span class="math inline">\(AA^-\)</span> 为幂等矩阵, 且 <spanclass="math inline">\(\mathrm{rank}(AA^-) =\mathrm{rank}(A)\)</span></li></ul><p>验证:</p><p>若矩阵 <span class="math inline">\(A_{m \times n}\)</span>有一个主子矩阵 <span class="math inline">\(A_{11}\)</span> 且其秩 <spanclass="math inline">\(r = \mathrm{rank}(A)\)</span>, 且 <spanclass="math inline">\(A\)</span> 的分块形式为:</p><p><span class="math display">\[A = \begin{bmatrix}  A_{11} &amp; A_{12} \\  A_{21} &amp; A_{22} \\\end{bmatrix} , \qquad 且 \ A_{22} = A_{21}A^{-1}_{11}A_{12}\]</span></p><p>则其广义逆矩阵 <span class="math inline">\(A^{-}\)</span> 为：</p><p><span class="math display">\[A^{-} = \begin{bmatrix}  A_{11}^{-1} &amp; O \\  O &amp; O \\\end{bmatrix}\]</span></p><h1 id="三广义逆矩阵的计算">三、广义逆矩阵的计算</h1><h2 id="满秩分解">1. 满秩分解</h2><p>定义 6: 令 <span class="math inline">\(A_{m \times n}\)</span> 具有秩<span class="math inline">\(r\)</span>. 将其分解为 <spanclass="math inline">\(A = FG\)</span>, 其中 <spanclass="math inline">\(F_{m \times r}\)</span> 和 <spanclass="math inline">\(G_{r \times n}\)</span> 均具有秩 <spanclass="math inline">\(r\)</span>, 则称这是矩阵的满秩分解.</p><p>我们可以通过矩阵的相似对角化去证明出来.</p><p>为此我们得到了满秩分解算法:</p><ul><li>利用初等行变换将矩阵 <span class="math inline">\(A\)</span>化为阶梯形:</li></ul><p><span class="math display">\[\begin{bmatrix}  G_{r \times n} \\  O_{(m-r) \times n} \\\end{bmatrix}\]</span></p><ul><li><p>对单位矩阵 <span class="math inline">\(I\)</span>进行第一步的逆初等行变换得到 <spanclass="math inline">\(P^{-1}\)</span></p></li><li><p>利用 <span class="math inline">\(P^{-1}\)</span> 的前 <spanclass="math inline">\(r\)</span> 列构造矩阵 <spanclass="math inline">\(F\)</span></p></li><li><p>书写满秩分解结果 <span class="math inline">\(A =FG\)</span></p></li></ul><p>引理 3: 若矩阵 <span class="math inline">\(A_{m \times n}\)</span>具有秩 <span class="math inline">\(r\)</span>, 且其满秩分解为 <spanclass="math inline">\(A = F_{m \times r}G_{r \times n}\)</span>,则我们知道其广义逆矩阵为:</p><p><span class="math display">\[A^- = G^T(F^TAG^T)^{-1}F^T \tag{3}\]</span></p><p>证明也很简单, 带入 <span class="math inline">\(AA^-A = A\)</span>就能证明了.</p><h2 id="广义逆矩阵的计算">2. 广义逆矩阵的计算</h2><ul><li>假设 <span class="math inline">\(A_{m \times n}\)</span>, 且 <spanclass="math inline">\(u_{m \times 1 }\)</span> 和 <spanclass="math inline">\(v_{n \times 1}\)</span> 是两个一维向量, 则有:</li></ul><p><span class="math display">\[(A + uv^T)^- = A^- - \frac{(A^-u)(u^TA^-)}{1 + u^TA^-u} \tag{4}\]</span></p><ul><li><p>分块矩阵的广义逆矩阵计算公式:</p><p>若</p><p><span class="math display">\[M = \begin{bmatrix}  A &amp; C \\  C^H &amp; B \\\end{bmatrix} \tag{5}\]</span></p><p>其中 <span class="math inline">\(A = X^H_1X_1\)</span>, <spanclass="math inline">\(B = X^H_2X_2\)</span>, <spanclass="math inline">\(C = X^H_1X_2\)</span>, 若设 <spanclass="math inline">\(D = B - C^H A^-C\)</span>, 则我们有 <spanclass="math inline">\(M^-\)</span>:</p><p><span class="math display">\[M^- = \begin{bmatrix}  A^- + A^-CD^-C^HA^- &amp; -A^-CD^- \\  -D^-C^HA^- &amp; D^- \\\end{bmatrix} \tag{6}\]</span></p></li><li><p>矩阵之和的广义逆矩阵的计算公式：</p><p>若 <span class="math inline">\(AA^-UBV = UBV\)</span> (即 <spanclass="math inline">\(UBV\)</span> 的列空间是 <spanclass="math inline">\(A\)</span> 的列空间的子集) 与 <spanclass="math inline">\(UBVA^-A = UBV\)</span> (即 <spanclass="math inline">\(UBV\)</span> 的行空间是 <spanclass="math inline">\(A\)</span> 的行空间的子集), 则我们有 <spanclass="math inline">\(G = A + UBV\)</span> 的广义逆矩阵 <spanclass="math inline">\(G^-\)</span> 存在几种求法:</p></li></ul><p><span class="math display">\[\begin{aligned}G^-_1 &amp;= A^- -A^-(A^- + A^-UBVA^-)^-A^-UBVA^- \\G^-_2 &amp;= A^- -A^-U(U + UBVA^-U)^-UBVA^- \\G^-_3 &amp;= A^- -A^-UB(B + BVA^-UB)^-BVA^- \\G^-_4 &amp;= A^- -A^-UBV(V + VA^-UBV)^-VA^- \\G^-_5 &amp;= A^- -A^-UBVA^-(A^- + A^-UBVA^-)^-A^- \\\end{aligned}\]</span></p><h1 id="四一致方程的最小范数解">四、一致方程的最小范数解</h1><h2 id="通解">1. 通解</h2><p>定理 6: 若 <span class="math inline">\(n \times m\)</span> 矩阵 <spanclass="math inline">\(A^-\)</span> 是　<span class="math inline">\(A_{m\times n}\)</span> 的任意一个广义逆矩阵, 则有:</p><ul><li><p>齐次方程 <span class="math inline">\(Ax = 0\)</span> 的一个通解是<span class="math inline">\(x = (I-A^-A)z\)</span>, 其中 <spanclass="math inline">\(z\)</span> 是任意的 <span class="math inline">\(n\times 1\)</span> 的向量 (容易证明吧, 和上面引理 2 思想一样)</p></li><li><p>非齐次方程 <span class="math inline">\(Ax = y\)</span>为一致方程的充要条件为:</p></li></ul><p><span class="math display">\[AA^-y = y \tag{7}\]</span></p><ul><li><p>非齐次方程 $ Ax = y $ 的一个通解为：</p><p><span class="math display">\[x = A^-y + (I-A^-A)z \tag{8}\]</span></p><p>式中, <span class="math inline">\(z\)</span> 为 <spanclass="math inline">\(n \times 1\)</span> 任意向量.</p></li></ul><h2 id="最小范数解">2. 最小范数解</h2><p>对一个一致方程 <span class="math inline">\(Ax=y\)</span></p><p>最小范数条件:</p><p><span class="math display">\[\min_{Ax = y} \lVert x \rVert = \lVert Gy \rVert \tag{9}\]</span></p><p>此时称矩阵 <span class="math inline">\(G\)</span>为最小范数广义逆矩阵</p><h2 id="伴随矩阵-区别于常规的伴随矩阵">3. 伴随矩阵(区别于常规的伴随矩阵)</h2><p>为此我们定义 <span class="math inline">\(A_{m \times n}\)</span>伴随矩阵的符号为 <span class="math inline">\(A_{n \timesm}^{\sharp}\)</span> , 且有两向量 <span class="math inline">\(x_{n\times 1},y_{m \times 1}\)</span>. <span class="math inline">\(\langleAx,y \rangle\)</span> 是 <span class="math inline">\(m\)</span>阶向量空间的内积, 记作 <span class="math inline">\(\langle Ax,y\rangle_m\)</span> . 而我们定义将 <span class="math inline">\(m\)</span>阶向量空间的内积等价变换为 <span class="math inline">\(n\)</span>阶向量的内积的一个映射:</p><p><span class="math display">\[\langle Ax,y \rangle _m = \langle x,A^{\sharp}y \rangle _n \tag{10}\]</span></p><p>此外如果 <span class="math inline">\(A^{\sharp} = A\)</span> ,我们称其为自伴随矩阵. (当然, 我们一般更熟悉他的另一个名字 <spanclass="math inline">\(\mathrm{Hermitian}\)</span>)</p><p>这里的伴随矩阵和之前我们说的 (比如在逆矩阵一节里那个) <spanclass="math inline">\(\mathrm{adj}\)</span> 定义有所不同.</p><p>在此，还有些性质:</p><ul><li><span class="math inline">\((A^{\sharp}) ^{\sharp} = A\)</span></li><li><span class="math inline">\((AB)^{\sharp} = B^{\sharp}A^{\sharp}\)</span></li><li><span class="math inline">\(\langle Ax,By \rangle , \forall x,y\Leftrightarrow A^{\sharp}B = 0\)</span></li><li><span class="math inline">\(A^{\sharp} = A^T\)</span> (<spanclass="math inline">\(A\)</span> 为实矩阵) 或 <spanclass="math inline">\(A^{\sharp} = A^H\)</span> (<spanclass="math inline">\(A\)</span> 为复矩阵)</li></ul><h2 id="最小范数解的求取">4. 最小范数解的求取</h2><p>定理 7: 若 <span class="math inline">\(Gy\)</span> 是一致方程 <spanclass="math inline">\(Ax = y\)</span> 的最小范数解, 当且仅当:</p><p><span class="math display">\[AGA=A ,\quad (GA)^{\sharp} = GA \tag{11}\]</span></p><p>前一个条件很容易就能看出来, 是定义所决定的.</p><p>至于第二个条件, 我们已经知道通解是 <span class="math inline">\(x =A^-y + (I-A^-A)z\)</span>, 即 <span class="math inline">\(x = Gy +(I-GA)z\)</span> ( 由定理 6 可得 ), 我们只需证明:</p><p><span class="math display">\[\lVert Gy \rVert \leq \lVert Gy + (I-GA)z \rVert , \quad \forall z\]</span></p><p>或者：</p><p><span class="math display">\[\begin{aligned}  &amp; \lVert GAb \rVert \leq \lVert GAb + (I-GA)z \rVert , \quad\forall b,z \\  \Leftrightarrow &amp; \langle GAb,(I-GA)z \rangle = 0 , \quad \forallb,z \\ \Leftrightarrow &amp; (GA)^{\sharp}(I-GA) = O \\  \Leftrightarrow &amp; (GA)^{\sharp} = (GA)^{\sharp}GA \\\end{aligned}\]</span></p><p>因为我们最后要得到 <span class="math inline">\((GA)^{\sharp} =GA\)</span> , 即我们易知:</p><p><span class="math display">\[(GA)^{\sharp}GA = GAGA = GA = (GA)^{\sharp}\]</span></p><p>使用 <span class="math inline">\(AGA = A\)</span>, 易知</p><p><span class="math display">\[(GA)^{\sharp}GA=GA \Rightarrow GAGA \neq GA \Rightarrow GA  \neq GA\]</span></p><p>这样就使用了反证法得出结果.</p><h2 id="注释">5. 注释</h2><p>关于最小范数解还有两点需要强调的:</p><ul><li><p>充要条件 <span class="math inline">\(AGA = A , \quad(GA)^{\sharp} = GA\)</span> , 我们能够写成等价形式 <spanclass="math inline">\(GAA^{\sharp} = A^{\sharp}\)</span></p></li><li><p>令 <span class="math inline">\(G_1,G_2\)</span> 是矩阵 <spanclass="math inline">\(A\)</span> 的两个不同的广义逆矩阵, 由上得知 <spanclass="math inline">\(G_iAA^{\sharp} = A^{\sharp}\)</span>,即有:</p></li></ul><p><span class="math display">\[(G_1-G_2)AA^{\sharp} = O \Leftrightarrow (G_1-G_2)AA^{\sharp} = O\Leftrightarrow G_1A = G_2A\]</span></p><p>由于 <span class="math inline">\(Ax = y\)</span> 是一致方程, 即有<span class="math inline">\(\mathrm{rank}([A, y]) =\mathrm{rank}(A)\)</span> , 我们因此可以将 <spanclass="math inline">\(y\)</span> 写作 <spanclass="math inline">\(Ab\)</span> , 其中 <spanclass="math inline">\(b\)</span> 是一个非零向量 , 即有：</p><p><span class="math display">\[G_1Ab=G_2Ab \Rightarrow G_1y = G_2y\]</span></p><p>我们可以看到最小范数解是唯一的.</p><h2 id="特别情况">6. 特别情况</h2><p>我们讨论 <span class="math inline">\(A_{m \times n}\)</span>具有满行秩 <span class="math inline">\(m\)</span> 时, 线性方程 <spanclass="math inline">\(Ax = y\)</span> 的最小范数解.</p><p>我们知道 <span class="math inline">\(A\)</span> 满行秩,即是有增广矩阵 <span class="math inline">\(\mathrm{rank}([A, y]) =\mathrm{rank}(A)\)</span> , 即线性方程 <span class="math inline">\(Ax =y\)</span> 是一致方程. 此外, 又因为矩阵乘积 <spanclass="math inline">\(AA^H\)</span> 可逆, 故存在右伪逆矩阵 <spanclass="math inline">\(A^H (A A^H) ^{-1}\)</span></p><p>即我们与之对应的解为：</p><p><span class="math display">\[x^{\circ} = A^H(AA^H)^{-1}y \tag{12}\]</span></p><p>但它是否是最小范数解呢？</p><p>我们简单的证明一下：</p><p>假设 <span class="math inline">\(x\)</span>是不同的任意解，则有：</p><p><span class="math display">\[\lVert x \rVert ^2 = \lVert x^{\circ} + x - x^{\circ} \rVert ^2 = \lVertx^{\circ} \rVert ^2 + \lVert x -x^{\circ} \rVert ^2 +2(x^{\circ})^H(x-x^{\circ}) \tag{13}\]</span></p><p>带入 <span class="math inline">\(x^{\circ} = A^H(A A^H) ^{-1}y =A^H(A A^H) ^{-1}Ax\)</span> 的值, 我们得到:</p><p><span class="math display">\[\begin{aligned}  (x^{\circ})^H(x-x^{\circ}) &amp;= y^H(AA^H)^{-1}A [I-A^H(AA^H)^{-1}A]x\\  &amp;= y^H[(AA^H)^{-1}A-(AA^H)^{-1}A]x = 0\end{aligned}\]</span></p><p>即, 我们可以化简得到：</p><p><span class="math display">\[\lVert x \rVert ^2 = \lVert x^{\circ} \rVert ^2 + \lVert x -x^{\circ}\rVert ^2\]</span></p><p>由于向量范数的非负性, 我们得到:</p><p><span class="math display">\[\lVert x \rVert ^2 \geq \lVert x^{\circ} \rVert ^2\]</span></p><p>即 <span class="math inline">\(x^{\circ}\)</span>确实为最小范数解。</p><p>右伪逆矩阵满足最小范数解</p><p>右伪逆矩阵 <span class="math inline">\(G = A^{H} (AA^H)^{-1}\)</span> 满足最小范数解的条件 <span class="math inline">\(AGA = A,\quad (GA)^{\sharp} = GA\)</span></p><p>用伴随矩阵特性 <span class="math inline">\(B^{\sharp} = B^H\)</span>就能证明</p><h1 id="五非一致方程的最小二乘解">五、非一致方程的最小二乘解</h1><p>对于非一致方程, 其没有严格满足方程的解, 即只能有近似解.我们需要寻找一个使得方程两边的误差平方和最小的解.我们称这个解为非一致方程的最小二乘解.</p><p>我们使用 <span class="math inline">\(\hat{x}\)</span>表示最小二乘解.</p><p>而它满足条件:</p><p><span class="math display">\[\lVert A\hat{x}-y \rVert = \inf_{x} \lVert Ax-y \rVert \tag{14}\]</span></p><p>我们用 $ $ 表示函数的下确界</p><h2 id="最小二乘解的条件">1. 最小二乘解的条件</h2><p>定理 8: 令 <span class="math inline">\(G\)</span> 为某个矩阵, 要使得<span class="math inline">\(\hat{x} = Gy\)</span> 是非一致方程 $Ax = y$的最小二乘解, 当且仅当:</p><p><span class="math display">\[A^{\sharp}AG = A^{\sharp} \tag{15}\]</span></p><p>或者等价于:</p><p><span class="math display">\[AGA = A, \quad (AG)^{\sharp} = AG \tag{16}\]</span></p><p>我们注意其与上面所讲的一致方程的最小范数解之间的区别</p><p>为此, 我们对这个也给予证明:</p><p>我们已知前提:</p><p><span class="math display">\[\lVert A\hat{x} - y \rVert \leq \lVert Ax - y \rVert , \quad \forall x,y\]</span></p><p>而带入 <span class="math inline">\(\hat{x} = Gy\)</span></p><p>我们有:</p><p><span class="math display">\[\begin{aligned}  \lVert AGy - y \rVert &amp;\leq \lVert Ax - y \rVert , \quad \forallx,y\\  &amp;\leq \lVert AGy - y + Aw \rVert , \quad \forall x,w = x - Gy \\  &amp;\Leftrightarrow \langle Aw,(AG-I)y \rangle = 0 , \quad \forally,w \\  &amp;\Leftrightarrow A^{\sharp}(AG-I) = O \\  &amp;\Leftrightarrow A^{\sharp}AG = A^{\sharp}\end{aligned}\]</span></p><p>我们看得出来,这个证明过程和之前的一致方程的最小范数解的证明很相似.</p><ul><li><p>上面两边同时右乘 $ A $ ，即有：</p><p><span class="math display">\[A^{\sharp}(AGA) = A^{\sharp}A\]</span></p><p>要使得对所有矩阵 $ A $ 都存在，即我们有：</p><p><span class="math display">\[ AGA = A \]</span></p></li><li><p>上面两边同时左乘矩阵 <spanclass="math inline">\(G^{\sharp}\)</span> , 我们能够得到:</p><p><span class="math display">\[G^{\sharp}A^{\sharp}AG = (AG)^{\sharp}AG = (AG)^{\sharp}\]</span></p><p>我们可以使用之前的方式证明其充要条件是:</p><p><span class="math display">\[(AG)^{\sharp} = AG\]</span></p></li></ul><h2 id="注释-1">2. 注释</h2><ul><li><p>非一致方程的最小二乘解有可能不是唯一的,但是不同的最小二乘解得到的 <span class="math inline">\(Ax\)</span> 和<span class="math inline">\(Ax - y\)</span> 是唯一的.</p></li><li><p>非一致方程的最小二乘解的通解形式为:</p><p><span class="math display">\[  \hat{x} = Gy + (I-GA)z , \quad \forall z \tag{17}\]</span></p></li></ul><h2 id="特别情况-1">3. 特别情况</h2><p>当非一致方程 <span class="math inline">\(Ax = y\)</span> 的矩阵 <spanclass="math inline">\(A\)</span> 有满列秩的特殊情况, 此时 <spanclass="math inline">\(A^HA\)</span> 显然是非奇异的.</p><p>而此时解:</p><p><span class="math display">\[x^{\circ} = (A^HA)^{-1}A^Hy \tag{18}\]</span></p><p>是一个最小二乘解</p><h2 id="左伪逆矩阵满足最小二乘解">4. 左伪逆矩阵满足最小二乘解</h2><p>左伪逆矩阵 <span class="math inline">\(G = (AA^H) ^{-1}A^{H}\)</span> 满足最小二乘解的条件 <span class="math inline">\(AGA = A,\quad (AG)^{\sharp} = AG\)</span></p><p>用伴随矩阵特性 <span class="math inline">\(B^{\sharp} = B^H\)</span>就能证明</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.7-逆矩阵</title>
    <link href="/posts/7c6bed7/"/>
    <url>/posts/7c6bed7/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>这部分内容与线性代数的内容重合, 讲述的是逆矩阵的一些性质.</p><h1 id="一逆矩阵的定义与性质">一、逆矩阵的定义与性质</h1><p>对于一个 <span class="math inline">\(n \times n\)</span> 的矩阵,要是它具有 <span class="math inline">\(n\)</span> 个线性无关的列向量和<span class="math inline">\(n\)</span> 个线性无关的行向量,我们就把这个矩阵叫做非奇异矩阵. 在之前也提到过这个概念,非奇异说的就是不特别, 具有很多良好的性质.矩阵可逆就是这诸多性质中的一种.</p><p>从线性系统的观点出发: 一线性变换或正方矩阵 <spanclass="math inline">\(A\)</span> 只对零输入产生零输出, 就是非奇异的.反之就是奇异的. 非奇异矩阵必定有逆矩阵, 奇异矩阵必没有逆矩阵.</p><p>一个 <span class="math inline">\(n \times n\)</span> 的正方矩阵 <spanclass="math inline">\(B\)</span> 满足 <spanclass="math inline">\(BA=AB=I\)</span> 时, 就称矩阵 <spanclass="math inline">\(B\)</span> 是矩阵 <spanclass="math inline">\(A\)</span> 的逆矩阵, 记作 <spanclass="math inline">\(A^{-1}\)</span>.</p><p>在之前也提到过非奇异矩阵的行列式是不为 <spanclass="math inline">\(0\)</span> 的,这里就从这一方面入手来详细解释一下.</p><p>这里又提到了初学线代时提到的一个概念, 叫做伴随矩阵.</p><p>若一个正方矩阵 <span class="math inline">\(A\)</span> 的所有元素<span class="math inline">\(a_{ij}\)</span> 分别由它们的余子式 <spanclass="math inline">\(A_{ij}\)</span> 代替, 然后转置, 所得到的矩阵称为<span class="math inline">\(A\)</span> 的伴随矩阵, 记作 <spanclass="math inline">\(adj(A)\)</span> 或者 <spanclass="math inline">\(A^*\)</span>, 就有式子:</p><p><span class="math display">\[\mathrm{adj}(A) = \begin{bmatrix}  A_{11}&amp;  A_{21}&amp;  \cdots&amp; A_{n1}\\  A_{12}&amp;  A_{22}&amp;  \cdots&amp; A_{n2}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  A_{1n}&amp;  A_{2n}&amp;  \cdots&amp; A_{nn}\end{bmatrix} \tag{1}\]</span></p><p>若行列式 <span class="math inline">\(\mathrm{det}(A) \neq 0\)</span>,则矩阵 <span class="math inline">\(A\)</span> 的逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 存在, 并且唯一. 逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 由下式给出:</p><p><span class="math display">\[A^{-1} = \frac{1}{\mathrm{det}(A)}\mathrm{adj}(A) =\frac{1}{|A|}\begin{bmatrix}  A_{11}&amp;  A_{21}&amp;  \cdots&amp; A_{n1}\\  A_{12}&amp;  A_{22}&amp;  \cdots&amp; A_{n2}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  A_{1n}&amp;  A_{2n}&amp;  \cdots&amp; A_{nn}\end{bmatrix} \tag{2}\]</span></p><p>伴随矩阵具有下面的性质:</p><p>矩阵 <span class="math inline">\(A_{n \times n}\)</span> 的伴随矩阵<span class="math inline">\(\mathrm{adj}(A)\)</span> 的转置等于 <spanclass="math inline">\(A\)</span> 的转置的伴随矩阵, 即 <spanclass="math inline">\([\mathrm{adj}(A)]^{\mathrm{T}} =\mathrm{adj}(A^{\mathrm{T}})\)</span>.分别按照顺序列出式子就可以很轻易证明出等式了.</p><p>若矩阵 <span class="math inline">\(A \in C^{n \times n}\)</span>的逆矩阵存在, 则称矩阵 <span class="math inline">\(A\)</span>是非奇异的或可逆的. 关于矩阵的奇异性或可逆性, 下列叙述等价:</p><ul><li><p><span class="math inline">\(A\)</span> 非奇异</p></li><li><p><span class="math inline">\(A^{-1}\)</span> 存在</p></li><li><p><span class="math inline">\(\mathrm{rank}(A) =n\)</span></p></li><li><p><span class="math inline">\(A\)</span> 的行线性无关</p></li><li><p><span class="math inline">\(A\)</span> 的列线性无关</p></li><li><p><span class="math inline">\(\mathrm{det}(A) \neq0\)</span></p></li><li><p><span class="math inline">\(A\)</span> 的值域的维数是 <spanclass="math inline">\(n\)</span></p></li><li><p><span class="math inline">\(A\)</span> 的零空间的维数是 <spanclass="math inline">\(0\)</span></p></li><li><p><span class="math inline">\(Ax=b\)</span> 对每一个 <spanclass="math inline">\(b \in C^n\)</span> 都是一致方程.(一致方程指至少有一个解)</p></li><li><p><span class="math inline">\(Ax=b\)</span> 对每一个 <spanclass="math inline">\(b\)</span> 有唯一的解.</p></li><li><p><span class="math inline">\(Ax=0\)</span> 只有平凡解 <spanclass="math inline">\(x=0\)</span></p></li></ul><p>对 <span class="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 具有以下性质.</p><ul><li><p><span class="math inline">\(A^{-1}A=AA^{-1}=I\)</span>.假定另一个矩阵 <span class="math inline">\(P\)</span> 满足 <spanclass="math inline">\(AP=I\)</span> 来证明.</p></li><li><p><span class="math inline">\(A^{-1}\)</span> 是唯一的.</p></li><li><p>逆矩阵的行列式等于原矩阵行列式的倒数, 即 <spanclass="math inline">\(|A^{-1}|=\frac{1}{|A|}\)</span>.证明的时候需要先了解一下拉普拉斯定理, 得到 <spanclass="math inline">\(|AB|=|A||B|\)</span>,然后再对这个性质证明.</p></li><li><p>逆矩阵是非奇异的. 证明自然就是式子 <spanclass="math inline">\(|A^{-1}|=\frac{1}{|A|} \neq 0\)</span>.</p></li><li><p><span class="math inline">\((A^{-1})^{-1}=A\)</span></p></li><li><p>复共轭转置矩阵 <spanclass="math inline">\(A^{\mathrm{H}}\)</span> 的逆矩阵等于逆矩阵 <spanclass="math inline">\(A^{-1}\)</span> 的复共轭转置, 即 <spanclass="math inline">\((A^{\mathrm{H}})^{-1}=(A^{-1})^{\mathrm{H}}\)</span>.逆矩阵的复共轭转置常采用符号 <spanclass="math inline">\(A^{\mathrm{-H}}=(A^{-1})^{\mathrm{H}}\)</span>简化.</p></li><li><p>若 <span class="math inline">\(A^{\mathrm{H}}=A\)</span>, 则<spanclass="math inline">\((A^{-1})^{\mathrm{H}}=A^{-1}\)</span></p></li><li><p><spanclass="math inline">\((A^*)^{-1}=(A^{-1})^*\)</span></p></li><li><p>如果 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 都是可逆的, 则有:</p></li></ul><p><span class="math display">\[(AB)^{-1}=B^{-1}A^{-1} \tag{3}\]</span></p><p>更一般的有</p><p><span class="math display">\[(ABC)^{-1}=C^{-1}B^{-1}A^{-1} \tag{4}\]</span></p><ul><li>若 <span class="math inline">\(A =\mathrm{diag}(a_1,a_2,\dots,a_m)\)</span> 为对角矩阵, 则其逆矩阵</li></ul><p><span class="math display">\[A^{-1} = \mathrm{diag}(a_1^{-1},a_2^{-1},\dots,a_m^{-1})\]</span></p><ul><li>若 <span class="math inline">\(A\)</span> 非奇异, 则有</li></ul><p><span class="math display">\[A 为正交矩阵 \Longleftrightarrow A^{-1} = A^{\mathrm{T}} \\A 为酉矩阵 \Longleftrightarrow A^{-1} = A^{\mathrm{H}}\]</span></p><h1 id="二矩阵求逆引理">二、矩阵求逆引理</h1><p>引理 1: (<spanclass="math inline">\(\mathrm{Sherman-Morrison}\)</span> 公式) 令 <spanclass="math inline">\(A\)</span> 是一个 <span class="math inline">\(n\times n\)</span> 的可逆矩阵, 并且 <spanclass="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 是两个 <span class="math inline">\(n\times 1\)</span> 向量, 使得 <spanclass="math inline">\((A+xy^{\mathrm{H}})\)</span> 可逆, 则</p><p><span class="math display">\[(A + xy^{\mathrm{H}})^{-1} = A^{-1} -\frac{A^{-1}xy^{\mathrm{H}}A^{-1}}{1+y^{\mathrm{H}}A^{-1}x} \tag{5}\]</span></p><p>证明过程中需要用到两个公式</p><ul><li><p>若 <span class="math inline">\((I+B)\)</span> 可逆, 并且 <spanclass="math inline">\(B \neq I\)</span>, 则 <spanclass="math inline">\((I+B)^{-1} = I -B+B^2-B^3+\dots\)</span>.</p></li><li><p><spanclass="math inline">\(\frac{1}{1-x}=1+x+x^2+\dots+x^n+\dots(-1&lt;x&lt;1)\)</span></p></li></ul><p>矩阵求逆引理可以推广为矩阵之和的求逆公式, 也叫 <spanclass="math inline">\(\mathrm{Woodbury}\)</span> 公式</p><p><span class="math display">\[\begin{aligned}(A+UBV)^{-1} &amp;= A^{-1} - A^{-1}UB(B+BVA^{-1}UB)^{-1}BVA^{-1} \\&amp;= A^{-1} - A^{-1}U(I+BVA^{-1}U)^{-1}BVA^{-1}\end{aligned} \tag{6}\]</span></p><p>或</p><p><span class="math display">\[(A-UV)^{-1} = A^{-1}+A^{-1}U(I-VA^{-1}U)^{-1}VA^{-1} \tag{7}\]</span></p><p>矩阵 <span class="math inline">\(I-VA^{-1}U\)</span>有时被称为容量矩阵.</p><p>当 <span class="math inline">\(U = u, B=b\)</span> 和 <spanclass="math inline">\(V = v^{\mathrm{H}}\)</span> 时, <spanclass="math inline">\(\mathrm{Woodbury}\)</span> 公式给出结果</p><p><span class="math display">\[(A+buv^{\mathrm{H}})^{-1}=A^{-1} -\frac{b}{1+bv^{\mathrm{H}}A^{-1}u}A^{-1}uv^{\mathrm{H}}A^{-1} \tag{8}\]</span></p><p><span class="math inline">\(Duncan-Guttman\)</span> 求逆公式</p><p><span class="math display">\[(A - UD^{-1}V)^{-1} = A^{-1}+A^{-1}U(D-VA^{-1}U)^{-1}VA^{-1} \tag{9}\]</span></p><p>除了以上的公式外, 矩阵之和的逆矩阵还有下面的形式</p><p><span class="math display">\[\begin{aligned}(A+UBV)^{-1} &amp;= A^{-1} - A^{-1}(I+UBVA^{-1})^{-1}UBVA^{-1} \\&amp;= A^{-1} - A^{-1}UB(I+VA^{-1}UB)^{-1}VA^{-1} \\&amp;= A^{-1} - A^{-1}UBV(I+A^{-1}UBV)^{-1}A^{-1} \\&amp;= A^{-1} - A^{-1}UBVA^{-1}(I+UBVA^{-1})^{-1}\end{aligned} \tag{10}\]</span></p><p>然后就是分块矩阵求逆公式.</p><ul><li>矩阵 <span class="math inline">\(A\)</span> 可逆时, 为</li></ul><p><span class="math display">\[\begin{bmatrix}  A&amp; U\\  V&amp; D\end{bmatrix}^{-1}=\begin{bmatrix}  A^{-1}+A^{-1}U(D-VA^{-1}U)^{-1}VA^{-1}&amp;-A^{-1}U(D-VA^{-1}U)^{-1}\\  -(D-VA^{-1}U)^{-1}VA^{-1}&amp; (D-VA^{-1}U)^{-1}\end{bmatrix} \tag{11}\]</span></p><ul><li>矩阵 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(D\)</span> 可逆时, 为</li></ul><p><span class="math display">\[\begin{bmatrix}  A&amp; U\\  V&amp; D\end{bmatrix}^{-1}=\begin{bmatrix}  (A-UD^{-1}V)^{-1}&amp; -A^{-1}U(D-VA^{-1}U)^{-1}\\  -D^{-1}V(A-UD^{-1}V)^{-1}&amp; (D-VA^{-1}U)^{-1}\end{bmatrix} \tag{12}\]</span></p><ul><li>矩阵 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(D\)</span> 可逆时, 为</li></ul><p><span class="math display">\[\begin{bmatrix}  A&amp; U\\  V&amp; D\end{bmatrix}^{-1}=\begin{bmatrix}  (A-UD^{-1}V)^{-1}&amp; -(A-UD^{-1}V)^{-1}UD^{-1}\\  -(D-VA^{-1}U)^{-1}VA{-1}&amp; (D-VA^{-1}U)^{-1}\end{bmatrix} \tag{13}\]</span></p><p>或者</p><p><span class="math display">\[\begin{bmatrix}  A&amp; U\\  V&amp; D\end{bmatrix}^{-1}=\begin{bmatrix}  (A-UD^{-1}V)^{-1}&amp; -(V-DU^{-1}A)^{-1}\\  (U-AV^{-1}D)^{-1}&amp; (D-VA^{-1}U)^{-1}\end{bmatrix} \tag{14}\]</span></p><p><span class="math inline">\(\mathrm{Hermitian}\)</span>矩阵的求逆引理, 令 <spanclass="math inline">\(\mathrm{Hermitian}\)</span> 矩阵的分块形式为</p><p><span class="math display">\[R_{m+1} = \begin{bmatrix}  R_m&amp; r_m\\  r_m^{\mathrm{H}}&amp; \rho_m\end{bmatrix} \tag{15}\]</span></p><p>考虑使用 <span class="math inline">\(R_m^{-1}\)</span> 逆推 <spanclass="math inline">\(R_{m+1}^{-1}\)</span>, 令</p><p><span class="math display">\[Q_{m+1} = \begin{bmatrix}  Q_m&amp; q_m\\  q_m^{\mathrm{H}}&amp; \alpha_m\end{bmatrix} \tag{16}\]</span></p><p>于是就有</p><p><span class="math display">\[R_{m+1}Q_{m+1} = \begin{bmatrix}  R_m&amp; r_m\\  r_m^{\mathrm{H}}&amp; \rho_m\end{bmatrix} \begin{bmatrix}  Q_m&amp; q_m\\  q_m^{\mathrm{H}}&amp; \alpha_m\end{bmatrix} = \begin{bmatrix}  I_m&amp; 0_m\\  0_m^{\mathrm{H}}&amp; 1\end{bmatrix} \tag{17}\]</span></p><p>由此可以推导出下面四个方程式:</p><p><span class="math display">\[R_mQ_m + r_mq_m^{\mathrm{H}}=I_m \tag{18}\]</span></p><p><span class="math display">\[r_m^{\mathrm{H}}Q_m + \rho_mq_m^{\mathrm{H}} = 0_m^{\mathrm{H}} \tag{19}\]</span></p><p><span class="math display">\[R_mq_m + r_m\alpha_m = 0_m \tag{20}\]</span></p><p><span class="math display">\[r_m^{\mathrm{H}}q_m + \rho_m\alpha_m = 1 \tag{21}\]</span></p><p>若 <span class="math inline">\(R_m\)</span> 可逆, 则由式子 (20)可得</p><p><span class="math display">\[q_m = -\alpha_m R_m^{-1}r_m \tag{22}\]</span></p><p>代入式子 (21) 得</p><p><span class="math display">\[\alpha_m = \frac{1}{\rho_m - r_m^{\mathrm{H}}R_m^{-1}r_m} \tag{23}\]</span></p><p>将式子 (23) 代入式子 (22), 又可得</p><p><span class="math display">\[q_m = \frac{-R_m^{-1}r_m}{\rho_m - r_b^{\mathrm{H}}R_m^{-1}r_m} \tag{24}\]</span></p><p>将式子 (24) 代入式子 (18), 则</p><p><span class="math display">\[Q_m = R_m^{-1}-R_m^{-1}r_mq_m^{\mathrm{H}} = R_m^{-1} +\frac{R_m^{-1}r_m(R_m^{-1}r_m)^{\mathrm{H}}}{\rho_m -r_m^{\mathrm{H}}R_m^{-1}r_m} \tag{25}\]</span></p><p>简化式子 (23)~(25), 令</p><p><span class="math display">\[b_m\overset{def}{=}[b_0^{(m)},b_1^{(m)},\dots,b_{m-1}^{(m)}]^{\mathrm{T}}=-R_m^{-1}r_m\tag{26}\]</span></p><p><span class="math display">\[\beta_m \overset{def}{=}\rho_m - r_m^{\mathrm{H}}R_m^{-1}r_m = \rho_m +r_m^{\mathrm{H}}b_m \tag{27}\]</span></p><p>那么式子 (23)~(25) 就简化为</p><p><span class="math display">\[\alpha_m = \frac{1}{\beta_m}\]</span></p><p><span class="math display">\[q_m = \frac{1}{\beta_m}b_m\]</span></p><p><span class="math display">\[Q_m = R_m^{-1}+\frac{1}{\beta_m}b_mb_m^{\mathrm{H}}\]</span></p><p>代入式子 (17) 得</p><p><span class="math display">\[R_{m+1}^{-1} = Q_{m+1}=\begin{bmatrix}  R_m^{-1}&amp; 0_m\\  0_m^{\mathrm{H}}&amp; 0\end{bmatrix} + \frac{1}{\beta_m}\begin{bmatrix}  b_mb_m^{\mathrm{H}}&amp; b_m\\  b_m^{\mathrm{H}}&amp; 1\end{bmatrix} \tag{28}\]</span></p><p>这个由 <span class="math inline">\(R_m^{-1}\)</span> 求 <spanclass="math inline">\(R_{m+1}^{-1}\)</span> 的秩 1 修正公式称为 <spanclass="math inline">\(\mathrm{Hermitian}\)</span>矩阵的分块求逆引理.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.6-矩阵的标量函数</title>
    <link href="/posts/732cd49f/"/>
    <url>/posts/732cd49f/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>这部分内容与线性代数的内容重合, 讲述的是矩阵的一些标量函数.</p><h1 id="一矩阵的二次型">一、矩阵的二次型</h1><p>任意一个方阵 <span class="math inline">\(A\)</span> 的二次型 <spanclass="math inline">\(x^{\mathrm{H}}Ax\)</span> 是一个实数标量.以实矩阵为例, 有以下推导.</p><p><span class="math display">\[\begin{aligned}x^{\mathrm{T}}Ax &amp;= [x_1,x_2,x_3]\begin{bmatrix}1 &amp; 4 &amp; 2\\-1 &amp; 7 &amp; 5\\-1 &amp; 6 &amp; 3\end{bmatrix}\begin{bmatrix}x_1\\x_2\\x_3\end{bmatrix}\\&amp;= x_1^2 - x_2x_1 - x_3x_1 + 4x_1x_2 + 7x_2^2 + 6x_3x_2 + 2x_1x_3 +5x_2x_3 + 3x_3^2 \\&amp;= x_1^2 + 7x_2^2 + 3x_3^2 + 3x_1x_2 + x_1x_3 + 11x_2x_3\end{aligned}\]</span></p><p>这就是变量 <span class="math inline">\(x\)</span> 的二次型函数,仔细观察可以看见对角线是二次项, 一次项是关于对角线对称元素之和.所以我们就把 <span class="math inline">\(x^{\mathrm{T}}Ax\)</span>称为矩阵 <span class="math inline">\(A\)</span> 的二次型.</p><p>推而广之, 若 <span class="math inline">\(x =[x_1,x_2,\dots,x_n]^{\mathrm{T}}\)</span>, 且 <spanclass="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的元素为 <spanclass="math inline">\(a_{ij}\)</span>, 则二次型为.</p><p><span class="math display">\[\begin{aligned}x^{\mathrm{T}}Ax &amp;= \sum_{i=1}^{n}\sum_{j=1}^{n}x_ix_ja_{ij} \\&amp;= \sum_{i=1}^{n}a_{ii}x_i^2 + \sum_{i=1,i \neqj}^{n}\sum_{j=1}^{n}a_{ij}x_ix_j \\&amp;= \sum_{i=1}^{n}a_{ii}x_i^2 +\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}(a_{ij}+a_{ji})x_ix_j\end{aligned} \tag{1}\]</span></p><p>其实只要满足方阵对角线相等, 关于对角线元素之和相等,这两个方阵二次型就相等.</p><p>也就是对于任意一个二次型函数</p><p><span class="math display">\[f(x_1,x_2,\dots,x_n) = \sum_{i=1}^{n}a_{ii}x_i^2 + \sum_{i=1, i \neqj}^{n}\sum_{j=1}^{n}a_{ij}x_ix_j \tag{2}\]</span></p><p>存在着许多矩阵 <span class="math inline">\(A\)</span>,它们的二次型相同. 但是只有一个矩阵满足其元素关于主对称轴相等的条件(对于复数矩阵就要满足共轭的条件),这个矩阵我们就把它叫做实对称矩阵或复共轭对称 (即 <spanclass="math inline">\(\mathrm{Hermitian}\)</span> 矩阵).</p><p>把大于零的二次型 <spanclass="math inline">\(x^{\mathrm{H}}Ax\)</span> 称为正定的二次型,则与之对应的 <span class="math inline">\(\mathrm{Hermitian}\)</span>矩阵为正定矩阵. 由此又有一些定义.</p><p>定义 1: 一个复共轭对称矩阵 <span class="math inline">\(A\)</span></p><ul><li><p>若二次型 <span class="math inline">\(x^{\mathrm{H}}Ax &gt; 0,\quad \forall x \neq 0\)</span>, 就叫正定矩阵</p></li><li><p>若二次型 <span class="math inline">\(x^{\mathrm{H}}Ax \ge 0,\quad \forall x \neq 0\)</span>, 就叫半正定矩阵</p></li><li><p>若二次型 <span class="math inline">\(x^{\mathrm{H}}Ax &lt; 0,\quad \forall x \neq 0\)</span>, 就叫负定矩阵</p></li><li><p>若二次型 <span class="math inline">\(x^{\mathrm{H}}Ax \le 0,\quad \forall x \neq 0\)</span>, 就叫半负定矩阵</p></li><li><p>若二次型 <span class="math inline">\(x^{\mathrm{H}}Ax\)</span>即可能取正值, 也可能取负值, 就叫不定矩阵</p></li></ul><p>定义 2: 设矩阵 <span class="math inline">\(A_{m \times n}\)</span>的元素为 <span class="math inline">\(a_{ij}\)</span>. 若</p><p><span class="math display">\[a_{ij} \ge 0, \quad \forall i = 1,2,\dots,m, j = 1,2,\dots,n \tag{3}\]</span></p><p>则称 <span class="math inline">\(A\)</span> 为非负矩阵. 表示 <spanclass="math inline">\(A\)</span> 中所有元素都是非负的, 同时 <spanclass="math inline">\(A\)</span> 也叫做正矩阵. 与正定矩阵相比,这个矩阵不一定是方阵.</p><h1 id="二矩阵的迹">二、矩阵的迹</h1><p>定义 3: <span class="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的对角线元素之和称为 <spanclass="math inline">\(A\)</span> 的迹, 记作 <spanclass="math inline">\(tr(A)\)</span>, 即</p><p><span class="math display">\[tr(A) = a_{11} + a_{22} + \dots + a_{nn} = \sum_{i=1}^{n}a_{ii} \tag{4}\]</span></p><p>不是方阵就没有迹的定义.</p><h2 id="关于迹的等式">1. 关于迹的等式</h2><ul><li><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 均为 <span class="math inline">\(n\times n\)</span> 矩阵, 则 <span class="math inline">\(\mathrm{tr}(A \pmB) = \mathrm{tr}(A) \pm \mathrm{tr}(B)\)</span></p></li><li><p>若 <span class="math inline">\(c\)</span> 是一个复或者实的常数,则 <span class="math inline">\(\mathrm{tr}(cA) =c\mathrm{tr}(A)\)</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 均为 <span class="math inline">\(n\times n\)</span> 矩阵, 并且 <span class="math inline">\(c_1\)</span> 和<span class="math inline">\(c_2\)</span> 为常数, 则 <spanclass="math inline">\(\mathrm{tr}(c_1A \pm c_2B) = c_1\mathrm{tr}(A) \pmc_2\mathrm{tr}(B)\)</span></p></li><li><p>矩阵 <span class="math inline">\(A\)</span>的转置、复数共轭和复共轭的迹分别是</p></li></ul><p><span class="math display">\[\mathrm{tr}(A^\mathrm{T}) = \mathrm{tr}(A) \\\mathrm{tr}(A^*) = [\mathrm{tr}(A)]^* \\    \mathrm{tr}(A^\mathrm{H}) = [\mathrm{tr}(A)]^*\]</span></p><ul><li>迹是相似不变量, 若 <span class="math inline">\(A\)</span> 为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 且 <spanclass="math inline">\(B\)</span> 为 <span class="math inline">\(n \timesm\)</span> 矩阵, 则</li></ul><p><span class="math display">\[\mathrm{tr}(AB) = \mathrm{BA}\]</span></p><ul><li>若矩阵 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 均为 <span class="math inline">\(m\times m\)</span> 矩阵, 并且 <span class="math inline">\(B\)</span>非奇异, 则</li></ul><p><span class="math display">\[\mathrm{tr}(BAB^{-1}) = \mathrm{tr}(B^{-1}AB) = \mathrm{tr}(A)\]</span></p><ul><li><p>若 <span class="math inline">\(A\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则 <spanclass="math inline">\(\mathrm{tr}(A^{\mathrm{H}}A) = 0 \Leftrightarrow A= O_{m \times n}(零矩阵)\)</span></p></li><li><p><span class="math inline">\(x^\mathrm{H}Ax =\mathrm{tr}(Axx^{\mathrm{H}})\)</span> 和 <spanclass="math inline">\(y^{\mathrm{H}}x =\mathrm{tr}(xy^{\mathrm{H}})\)</span></p></li><li><p>分块矩阵的迹满足 <span class="math display">\[\mathrm{tr}\begin{bmatrix}\mathbf{A} &amp; \mathbf{B} \\\mathbf{C} &amp; \mathbf{D}\end{bmatrix} = \mathrm{tr}(\mathbf{A}) + \mathrm{tr}(\mathbf{D})\]</span> 式中, <span class="math inline">\(\mathbf{A} \in C^{m \timesm}, \mathbf{B} \in C^{m \times n}, \mathbf{C} \in C^{m \times m},\mathbf{D} \in C^{n \times n}\)</span></p></li><li><p>矩阵 <span class="math inline">\(A^{\mathrm{H}}A\)</span> 和<span class="math inline">\(AA^{\mathrm{H}}\)</span> 的迹相等, 且有<span class="math display">\[\mathrm{tr}(A^{\mathrm{H}}A) = \mathrm{tr}(AA^{\mathrm{H}}) =\sum_{i=1}^{n}\sum_{j=1}^{n}a_{ij}^*a{ji} \tag{5}\]</span></p></li><li><p>迹等于特征值之和, 即 <span class="math display">\[\mathrm{tr}(A) = \lambda_1 + \lambda_2 + \dots + \lambda_n \tag{6}\]</span></p></li><li><p>对于任何正整数 <span class="math inline">\(k\)</span>, 有 <spanclass="math display">\[\mathrm{tr}(A^k) = \sum_{i=1}^n\lambda_i^k \tag{7}\]</span></p></li></ul><p>式子右边的和称为 <span class="math inline">\(A\)</span> 的诸特征值的<span class="math inline">\(k\)</span> 次矩.</p><h2 id="关于迹的不等式">2. 关于迹的不等式</h2><ul><li><p>对于一个复矩阵 <span class="math inline">\(A \in C^{m \timesn}\)</span>, 有 <spanclass="math inline">\(\mathrm{tr}(A^{\mathrm{H}}A)=\mathrm{tr}(AA^{\mathrm{H}})\ge 0\)</span></p></li><li><p>若 <span class="math inline">\(A,B\)</span> 均为 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则 <spanclass="math display">\[\mathrm{tr}[(A^{\mathrm{T}}B)^2] \le\mathrm{tr}(A^{\mathrm{T}}A)\mathrm{tr}(B^{\mathrm{T}}B) \\\mathrm{tr}[(A^{\mathrm{T}}B)^2] \le\mathrm{tr}(A^{\mathrm{T}}AB^{\mathrm{T}}B) \\\mathrm{tr}[(A^{\mathrm{T}}B)^2] \le\mathrm{tr}(AA^{\mathrm{T}}BB^{\mathrm{T}}) \\\]</span></p></li><li><p><span class="math inline">\(\mathrm{tr}(A^2) \le\mathrm{tr}(A^{\mathrm{T}}A)\)</span></p></li><li><p><span class="math inline">\(\mathrm{tr}[(A+B)(A+B)^{\mathrm{T}}]\le2[\mathrm{tr}(AA^{\mathrm{T}})+\mathrm{tr}(BB^{\mathrm{T}})]\)</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 为 <span class="math inline">\(m \timesm\)</span> 对称矩阵, 则 <span class="math inline">\(\mathrm{tr}(AB) \le\frac{1}{2}\mathrm{tr}(A^2+B^2)\)</span></p></li></ul><p>一个 <span class="math inline">\(m \times n\)</span> 实矩阵 <spanclass="math inline">\(A\)</span> 的 <spanclass="math inline">\(\mathrm{Frobenius}\)</span> 范数也可利用 <spanclass="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A^{\mathrm{T}}A\)</span> 或者 <spanclass="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(AA^{\mathrm{T}}\)</span> 的迹定义为 <spanclass="math display">\[\left \| A \right \|_{\mathrm{F}} = \sqrt{\mathrm{tr}(A^{\mathrm{T}}A)}= \sqrt{\mathrm{tr}(AA^{\mathrm{T}})} \tag{8}\]</span></p><h1 id="三行列式">三、行列式</h1><h2 id="定义和计算">1. 定义和计算</h2><p>一个 <span class="math inline">\(n \times n\)</span> 的方阵 <spanclass="math inline">\(A\)</span> 的行列式记作 <spanclass="math inline">\(\mathrm{det}(A)\)</span> 或者 <spanclass="math inline">\(|A|\)</span>, 定义为</p><p><span class="math display">\[\mathrm{det}(A) = |A| = \begin{vmatrix}  a_{11}&amp;  a_{12}&amp;  \cdots&amp; a_{1n}\\  a_{21}&amp;  a_{22}&amp;  \cdots&amp; a_{2n}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  a_{n1}&amp;  a_{n2}&amp;  \cdots&amp; a_{nn}\end{vmatrix} \tag{9}\]</span></p><p>若 <span class="math inline">\(A = \{ a \} \in C^{1 \times1}\)</span>, 则它的行列式由 <span class="math inline">\(\mathrm{det}(A)= a\)</span> 给出.</p><p>矩阵 <span class="math inline">\(A\)</span> 去掉第 <spanclass="math inline">\(i\)</span> 行和第 <spanclass="math inline">\(j\)</span> 列后得到的行列式叫元素 <spanclass="math inline">\(a_{ij}\)</span> 的代数余子式, 记作 <spanclass="math inline">\(A_{ij}\)</span>. 当 <spanclass="math inline">\(j=i\)</span> 时, <span class="math inline">\(A_i =A_{ii}\)</span> 称为 <span class="math inline">\(A\)</span> 的主子式.若令 <span class="math inline">\(A_{ij}\)</span> 是 <spanclass="math inline">\(n \times n\)</span> 矩阵, <spanclass="math inline">\(A\)</span> 删除第 <spanclass="math inline">\(i\)</span> 行和第 <spanclass="math inline">\(j\)</span> 列得到的 <spanclass="math inline">\((n-1) \times (n -1)\)</span> 子矩阵, 则</p><p><span class="math display">\[A_{ij} = (-1)^{i+j}\mathrm{det}(A_{ij}) \tag{10}\]</span></p><p>一个 <span class="math inline">\(n \times n\)</span>矩阵的行列式等于任意行 (或列) 的元素与对应的余子式乘积之和</p><p><span class="math display">\[\mathrm{det}(A) = a_{i1}A_{i1} + a_{i2}A_{i2} + \dots + a_{in}A_{in} =\sum_{j=1}^{n}a_{ij}(-1)^{i+j}\mathrm{det}(A_{ij}) \tag{11}\]</span></p><p>或</p><p><span class="math display">\[\mathrm{det}(A) = a_{1j}A_{1j} + a_{2j}A_{2j} + \dots + a_{nj}A_{nj} =\sum_{i=1}^{n}a_{ij}(-1)^{i+j}\mathrm{det}(A_{ij}) \tag{12}\]</span></p><p>所以行列式计算就是一个递推过程, 当然这也是考试中十分重要的一部分,考试中计算行列数通常不超过 4.</p><p>有了行列式我们就可以和其他的知识点连接起来.</p><p>定义 4: 行列式不等于零的矩阵称为非奇异矩阵. 非奇异矩阵 <spanclass="math inline">\(A\)</span> 存在可逆矩阵 <spanclass="math inline">\(A^{-1}\)</span>.</p><h2 id="行列式等式关系">2. 行列式等式关系</h2><ul><li><p>矩阵两行 (或列) 互换位置, 行列式保持不变.</p></li><li><p>矩阵的某行 (或列) 是其他行 (或列) 的线性组合, 则行列式为零.特别地, 某行 (或列)与其他行 (或列) 成正比或相等, 抑或某行 (或列)全为零.</p></li><li><p><span class="math inline">\(\mathrm{det}(A) =\mathrm{det}(A^{\mathrm{T}})\)</span>, 但是 <spanclass="math inline">\(\mathrm{det}(A^{\mathrm{H}}) =[\mathrm{det}(A^{\mathrm{T}})]^*\)</span></p></li><li><p>单位矩阵的行列式等于 1, 即 <spanclass="math inline">\(\mathrm{det}(I) = 1\)</span></p></li><li><p>一个 <span class="math inline">\(\mathrm{Hermitian}\)</span>矩阵的行列式为实数, 因为 <span class="math inline">\(\mathrm{det}(A) =\mathrm{det}(A^{\mathrm{H}}) = \mathrm{det}(A^{\mathrm{T}}) \Rightarrow\mathrm{det}(A) = \mathrm{det}(A^*) = [\mathrm{det}(A)]^*\)</span>.</p></li><li><p><span class="math inline">\(\mathrm{det}(AB) =\mathrm{det}(A)\mathrm{det}(B), \quad A,B \in C^{n \timesn}\)</span></p></li><li><p>上三角或下三角矩阵 <span class="math inline">\(A\)</span>,其行列式为主对角线所有元素乘积. <spanclass="math inline">\(\mathrm{det}(A)=\prod_{i=1}^{n}a_{ii}\)</span>.对角矩阵也满足这个条件.</p></li><li><p>给定一个任意常数 (可为复数) <spanclass="math inline">\(c\)</span>, 则 <spanclass="math inline">\(\mathrm{det}(cA) =c^n\mathrm{det}(A)\)</span></p></li><li><p>若 <span class="math inline">\(A\)</span> 非奇异, 则 <spanclass="math inline">\(\mathrm{det}(A^{-1}) =(\mathrm{det}(A))^{-1}\)</span></p></li><li><p>对于矩阵 <span class="math inline">\(A_{m \times m}, B_{m \timesn}, C_{n \times m}, D_{n \times n}\)</span>,分块矩阵的行列式满足</p></li></ul><p><span class="math display">\[A 非奇异 \Leftrightarrow \mathrm{det}\begin{bmatrix}  A&amp; B\\  C&amp; D\end{bmatrix}= \mathrm{det}(A)\mathrm{det}(D - CA^{-1}B)\\或\\D 非奇异 \Leftrightarrow \mathrm{det}\begin{bmatrix}  A&amp; B\\  C&amp; D\end{bmatrix}= \mathrm{det}(D)\mathrm{det}(A - BD^{-1}C)\]</span></p><p>证明方法就是把分块矩阵变成上三角或者下三角矩阵.</p><h2 id="行列式不等式关系">3. 行列式不等式关系</h2><ul><li>若 <span class="math inline">\(A,B\)</span> 都是 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则</li></ul><p><span class="math display">\[|\mathrm{det}(A^{\mathrm{H}}B)|^2 \le\mathrm{det}(A^{\mathrm{H}}A)\mathrm{det}(B^{\mathrm{H}}B)\]</span></p><ul><li>对于 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span>, 有</li></ul><p><span class="math display">\[\mathrm{det}(A) \le \prod_{i=1}^{m} \left ( \sum_{j=1}^{m}|a_{ij}|^2\right )^{1/2}\]</span></p><ul><li>若 <span class="math inline">\(A_{m \times m},B_{m \times n},C_{n\times n}\)</span>, 则</li></ul><p><span class="math display">\[\mathrm{det}\left ( \begin{bmatrix}  A&amp; B\\  B^{\mathrm{H}}&amp; C\end{bmatrix} \right ) \le \mathrm{det}(A)\mathrm{det}(C)\]</span></p><ul><li>若 <span class="math inline">\(A_{m \times m} \neq O_{m \timesm},B_{m \times n} \neq O_{m \times m}\)</span> 半正定, 则</li></ul><p><span class="math display">\[\sqrt[m]{\mathrm{det}(A+B)} \ge \sqrt[m]{\mathrm{det}(A)} +\sqrt[m]{\mathrm{det}(B)}\]</span></p><ul><li><p>正定阵 <span class="math inline">\(A\)</span>的行列式大于零.</p></li><li><p>半正定阵 <span class="math inline">\(A\)</span>的行列式大于或等于零.</p></li><li><p>若 <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 半正定, 则</p></li></ul><p><span class="math display">\[(\mathrm{det}(A))^{1/m} \le \frac{1}{m}\mathrm{det}(A)\]</span></p><ul><li>若矩阵 <span class="math inline">\(A_{m \times m},B_{m \timesn}\)</span> 均半正定, 则</li></ul><p><span class="math display">\[\mathrm{det}(A+B) \ge \mathrm{det}(A) + \mathrm{det}(B)\]</span></p><ul><li>若矩阵 <span class="math inline">\(A_{m \times m} 正定, B_{m \timesn}\)</span> 半正定, 则</li></ul><p><span class="math display">\[\mathrm{det}(A+B) \ge \mathrm{det}(A)\]</span></p><ul><li>若矩阵 <span class="math inline">\(A_{m \times m} 正定, B_{m \timesn}\)</span> 半负定, 则</li></ul><p><span class="math display">\[\mathrm{det}(A+B) \le \mathrm{det}(A)\]</span></p><h1 id="四矩阵的秩">四、矩阵的秩</h1><h2 id="秩的定义">1. 秩的定义</h2><p>矩阵的秩常用来判断方程组解的数量.</p><p>定理 1: 在 <span class="math inline">\(p\)</span> 维 (行或列)向量的集合之中, 最多存在 <span class="math inline">\(p\)</span>个线性无关的 (行或列) 向量.</p><p>定理 2: 矩阵 <span class="math inline">\(A_{m \times n}\)</span>的线性无关行数与线性无关列数相同.</p><p>定义 5: 矩阵 <span class="math inline">\(A_{m \times n}\)</span>的秩定义为该矩阵中线性无关的行和列的数目.</p><p>由秩的大小, 矩阵方程 <span class="math inline">\(A_{m \times n}x_{n\times 1}=b_{m \times 1}\)</span> 分为以下三种类型:</p><ul><li><p>适定方程: 若 <span class="math inline">\(m = n\)</span>, 并且<span class="math inline">\(\mathrm{rank}(A)=n\)</span>, 即矩阵非奇异,则称矩阵方程 <span class="math inline">\(Ax=b\)</span>为适定方程.</p></li><li><p>欠定方程: 若 <span class="math inline">\(m &lt;\mathrm{rank}(A)\)</span>, 即独立方程个数小于独立未知参数个数,则称矩阵方程 <span class="math inline">\(Ax=b\)</span>为欠定方程.</p></li><li><p>超定方程: 若 <span class="math inline">\(m &gt;\mathrm{rank}(A)\)</span>, 即独立方程个数大于独立未知参数个数,则称矩阵方程 <span class="math inline">\(Ax=b\)</span>为超定方程.</p></li></ul><p>矩阵中线性无关的列向量的所有线性组合形成了一个向量空间,叫做矩阵的列空间.</p><p>定义 6: 矩阵 <span class="math inline">\(A_{m \times n}\)</span>的列空间 <span class="math inline">\(R(A)\)</span>的维数定义为该矩阵的秩.</p><p><span class="math display">\[r_A = \mathrm{dim}[R(A)] \tag{13}\]</span></p><p>等价叙述:</p><ul><li><p><span class="math inline">\(\mathrm{rank}(A) =k\)</span></p></li><li><p>存在 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(k\)</span> 列且不多于 <spanclass="math inline">\(k\)</span> 列组成一线性无关组</p></li><li><p>存在 <span class="math inline">\(A\)</span> 的 <spanclass="math inline">\(k\)</span> 行且不多于 <spanclass="math inline">\(k\)</span> 行组成一线性无关组</p></li><li><p>存在 <span class="math inline">\(A\)</span> 的一个 <spanclass="math inline">\(k \times k\)</span> 子矩阵具有非零行列式, 且 <spanclass="math inline">\(A\)</span> 的所有 <spanclass="math inline">\((k+1) \times (k+1)\)</span>子矩阵都具有零行列式.</p></li><li><p>列空间 <span class="math inline">\(R(A)\)</span> 的维数等于 <spanclass="math inline">\(k\)</span></p></li><li><p><span class="math inline">\(k = n -\mathrm{dim}[\mathrm{Null}(A)]\)</span>, 其中 <spanclass="math inline">\(\mathrm{Null}\)</span> 表示矩阵 <spanclass="math inline">\(A\)</span> 的零空间.</p></li></ul><p>定理 3: 令 <span class="math inline">\(r_A =\mathrm{rank}(A)\)</span> 和 <span class="math inline">\(r_B =\mathrm{rank}(B)\)</span>, 则乘积矩阵 <spanclass="math inline">\(AB\)</span> 的秩 <spanclass="math inline">\(r_{AB} = \mathrm{rank}(AB)\)</span> 满足不等式</p><p><span class="math display">\[r_{AB} \le \mathrm{min}\{ r_A,r_B \} \tag{14}\]</span></p><p>引理1: 在矩阵左乘或者右乘一个可逆矩阵, 矩阵的秩不变.</p><p>引理2: <span class="math inline">\(\mathrm{rank}[A,B] \le\mathrm{rank}(A) + \mathrm{rank}(B)\)</span></p><p>引理3: <span class="math inline">\(\mathrm{rank}(A+B) \le\mathrm{rank}[A,B] \le \mathrm{rank}(A) + \mathrm{rank}(B)\)</span></p><p>引理4: <span class="math inline">\(\mathrm{rank}(A+B) \le\mathrm{rank}[A,B] \le \mathrm{rank}(A) + \mathrm{rank}(B)\)</span></p><p>引理5: 对于 <span class="math inline">\(m \times n\)</span> 矩阵<span class="math inline">\(A\)</span> 和 <span class="math inline">\(n\times q\)</span> 矩阵 <span class="math inline">\(B\)</span>, 秩不等式<span class="math inline">\(\mathrm{rank}(AB) \ge \mathrm{rank}(A) +\mathrm{rank}(B) - n\)</span> 成立.</p><h2 id="秩的性质">2. 秩的性质</h2><ul><li><p>秩是一个正整数</p></li><li><p>秩小于或等于矩阵的行数或列数</p></li><li><p>当 <span class="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 的秩等于 <spanclass="math inline">\(n\)</span> 时, <spanclass="math inline">\(A\)</span> 满秩, 可逆.</p></li><li><p>若 <span class="math inline">\(\mathrm{rank}(A_{m \times n}) &lt;\mathrm{min}\{m,n\}\)</span>, 则 <span class="math inline">\(A\)</span>秩亏缺, 一个亏缺的方阵叫做奇异矩阵, 不可逆.</p></li><li><p>若 <span class="math inline">\(\mathrm{rank}(A_{m \times n}) =m(&lt;n)\)</span>, 则 <span class="math inline">\(A\)</span>满行秩.</p></li><li><p>若 <span class="math inline">\(\mathrm{rank}(A_{m \times n}) =n(&lt;m)\)</span>, 则 <span class="math inline">\(A\)</span>满列秩.</p></li><li><p>任何矩阵 <span class="math inline">\(A\)</span>左乘满行秩或右称一个满列秩矩阵后, 矩阵 <spanclass="math inline">\(A\)</span> 的秩保存不变.</p></li><li><p>当矩阵的秩 <span class="math inline">\(\mathrm{rank}(A_{m \timesn}) = r \neq 0\)</span> 时, 至少存在一个 <span class="math inline">\(r\times r\)</span> 子矩阵 <span class="math inline">\(X_{r \timesr}\)</span> 满秩或非奇异.</p></li></ul><h2 id="秩的等式">3. 秩的等式</h2><ul><li><p>若 <span class="math inline">\(A \in C^{m \times n}\)</span>, 则<spanclass="math inline">\(\mathrm{rank}(A^{\mathrm{H}})=\mathrm{rank}(A^{\mathrm{T}})=\mathrm{rank}(A^*)= \mathrm{rank}(A)\)</span></p></li><li><p>若 <span class="math inline">\(A \in C^{m \times n}\)</span> 和<span class="math inline">\(c \neq 0\)</span>, 则 <spanclass="math inline">\(\mathrm{rank}(cA)=\mathrm{rank}(A)\)</span></p></li><li><p>若 <span class="math inline">\(A \in C^{m \times m}\)</span> 和<span class="math inline">\(C \in C^{n \times n}\)</span> 均非奇异,则对于任意一矩阵 <span class="math inline">\(B \in C^{m \timesn}\)</span> 有 <spanclass="math inline">\(\mathrm{rank}(AB)=\mathrm{rank}(B)=\mathrm{rank}(BC)=\mathrm{rank}(ABC)\)</span></p></li><li><p>若 <span class="math inline">\(A,B \in C^{m \times m}\)</span>,则 <spanclass="math inline">\(\mathrm{rank}(A)=\mathrm{rank}(B)\)</span>当且仅当存在非奇异矩阵 <span class="math inline">\(X \in C^{m \timesm}\)</span> 和 <span class="math inline">\(Y \in C^{n \times n}\)</span>使得 <span class="math inline">\(B = XAY\)</span></p></li><li><p>若 <span class="math inline">\(A \in C^{m \times n}\)</span>则</p></li></ul><p><span class="math display">\[\mathrm{rank}(AA^{\mathrm{T}})=\mathrm{rank}(A^{\mathrm{T}}A) -\mathrm{rank}(A)\]</span></p><p><span class="math display">\[\mathrm{rank}(AA^{\mathrm{H}})=\mathrm{rank}(A^{\mathrm{H}}A) -\mathrm{rank}(A)\]</span></p><ul><li>若 <span class="math inline">\(A \in C^{m \times n}\)</span> 则</li></ul><p><span class="math display">\[\mathrm{rank}(A)=m \Leftrightarrow \mathrm{det}(A) \neq 0\Leftrightarrow A 非奇异\]</span></p><ul><li>若 <span class="math inline">\(m \times m\)</span> 矩阵 <spanclass="math inline">\(A\)</span> 非奇异, 且 <spanclass="math inline">\(B \in C^{m \times n}, C \in C^{n \times m}, D \inC^{n \times n}\)</span>, 则</li></ul><p><span class="math display">\[\mathrm{rank}\begin{bmatrix}  A&amp; B\\  C&amp; D\end{bmatrix} = m \Leftrightarrow D = CA^{-1}B\]</span></p><h2 id="秩的不等式">4. 秩的不等式</h2><ul><li><p>对于任意 <span class="math inline">\(m \times n\)</span> 矩阵<span class="math inline">\(A\)</span> 有 <spanclass="math inline">\(\mathrm{rank}(A) \le\mathrm{min}\{m,n\}\)</span></p></li><li><p>若 <span class="math inline">\(A,B \in C^{m \times n}\)</span>,则 <span class="math inline">\(\mathrm{rank}(A+B) \le \mathrm{rank}(A) +\mathrm{rank}(B)\)</span></p></li><li><p>若 <span class="math inline">\(A \in C^{m \times k}\)</span> 和<span class="math inline">\(B \in C^{k \times n}\)</span>, 则</p></li></ul><p><span class="math display">\[\mathrm{rank}(A) + \mathrm{rank}(B) - k \le \mathrm{rank}(AB) \le\mathrm{min}\{\mathrm{rank}(A),\mathrm{rank}(B)\}\]</span></p><ul><li>在任意矩阵中删去某些行与 (或) 某些列,则所得子矩阵的秩不可能大于原矩阵的秩.</li></ul>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.5-基与Gram-Schmidt正交化</title>
    <link href="/posts/ccfee0eb/"/>
    <url>/posts/ccfee0eb/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>这部分内容与线性代数的内容重合.</p><p>在 <span class="math inline">\(n\)</span> 阶 <spanclass="math inline">\(\mathrm{Euclidean}\)</span> 空间 <spanclass="math inline">\(R^n\)</span> 只有一个, 但 <spanclass="math inline">\(n\)</span> 阶向量空间却有很多. 例如对所有实数<span class="math inline">\(\alpha, \beta, \gamma\)</span>, 向量 <spanclass="math inline">\(x=[0,0,\alpha,\beta,\gamma]^{\mathrm{T}}\)</span>的集合 <span class="math inline">\(W_1\)</span> 是一个 5 阶向量空间.这里需要注意的是向量 <span class="math inline">\(x\)</span> 的前两项是为0 的, 所以 <span class="math inline">\(W_1\)</span> 中的每一个向量都属于<span class="math inline">\(R^5\)</span> 空间,但是实际上它只是构成了一个 <span class="math inline">\(R^3\)</span>空间.</p><p>对向量 <spanclass="math inline">\(y=[1,5,\alpha,\beta,\gamma]^{\mathrm{T}}\)</span>虽然在 <span class="math inline">\(R^5\)</span> 空间中, 但是不属于 <spanclass="math inline">\(W_1\)</span>. 此时我们就把 <spanclass="math inline">\(W_1\)</span> 叫做 <spanclass="math inline">\(R^5\)</span> 内的一个子空间.</p><h1 id="一向量子空间的基">一、向量子空间的基</h1><p>由向量空间的定义可知, <span class="math inline">\(R^n\)</span>空间的多个向量的所有线性组合也属于 <spanclass="math inline">\(R^n\)</span>.这就是之前所说的向量线性变换的闭合性.子空间中的向量数乘和相加得到的向量仍在子空间内.</p><p>例如 <span class="math inline">\(R^n\)</span> 的三个 <spanclass="math inline">\(n \times 1\)</span> 向量 <spanclass="math inline">\(x_1,x_2,x_3\)</span>. 对于实数 <spanclass="math inline">\(a_1,a_2,a_3\)</span>, 可知 <spanclass="math inline">\(a_1x_1\)</span> 和 <spanclass="math inline">\(a_2x_2\)</span> 均在 <spanclass="math inline">\(\mathrm{Euclidean}\)</span> <spanclass="math inline">\(n\)</span> 空间 <spanclass="math inline">\(R^n\)</span>, <spanclass="math inline">\(a_1x_1+a_2x_2\)</span> 在 <spanclass="math inline">\(R^n\)</span> 内. 同理可证明 <spanclass="math inline">\((a_1x_1 + a_2x_2)+a_3x_3\)</span> 也在 <spanclass="math inline">\(R^n\)</span> 内.</p><p>那么我们就可以得出一个比较感性的认识: 有几个线性无关的向量,就可以形成几维的子空间.</p><p>从这个意义上讲, 可以认为这三个线性无关向量的集合 <spanclass="math inline">\(\{x_1,x_2,x_3\}\)</span> 张成或生成了一个 <spanclass="math inline">\(\mathrm{Euclidean}\)</span> <spanclass="math inline">\(n\)</span> 空间 <spanclass="math inline">\(R^n\)</span> 的一个子空间. 这个概念一推广可得.</p><p>定义 1: 向量 <span class="math inline">\(x_1,x_2,\dots,x_d\)</span>的所有线性组合的集合称为由 <spanclass="math inline">\(x_1,x_2,\dots,x_d\)</span> 张成 (或生成)的子空间或闭包, 记作</p><p><span class="math display">\[W = \mathrm{Span} \{ x_1,x_2,\dots,x_d \} = \mathrm{Close} \{x_1,x_2,\dots,x_d \} \tag{1}\]</span></p><p>向量 <span class="math inline">\(x_1,x_2,\dots,x_d\)</span>称为子空间 <span class="math inline">\(W\)</span> 的张成集或生成元.</p><p>需要注意是一个子空间的张成集不是唯一的, 拿三维空间举例. 固定 <spanclass="math inline">\(z\)</span> 轴, 在 <spanclass="math inline">\(xy\)</span>平面任意找两条不重合不平行的线是不是都能构成一个三维空间. 需要注意的是,可以通过这样的方式来理解, 但是绝对不能再拓展到高维,毕竟人只是三维生物.</p><p>就上述例子, 在 <span class="math inline">\(xy\)</span>平面能不能找多条线呢? 答案是可以的, 只要能构成 <spanclass="math inline">\(xy\)</span> 平面就行.</p><p>所以在矩阵分析及其应用中, 重要的是寻找生成一个子空间 <spanclass="math inline">\(W\)</span> 的生成元的最小集合, 即 <spanclass="math inline">\(W\)</span> 只需要用 <spanclass="math inline">\(d\)</span> 个向量即可生成,这就是子空间基向量的概念.</p><p>定义 2: 生成子空间 <span class="math inline">\(W\)</span>的线性无关的向量 <span class="math inline">\(\{ u_1,u_2,\dots,u_d\}\)</span> 称为子空间 <span class="math inline">\(W\)</span>的基向量或简称为基. 生成子空间 <span class="math inline">\(W\)</span>的基向量的个数称为子空间 <span class="math inline">\(W\)</span> 的维数,即有</p><p><span class="math display">\[d = \mathrm{dim}( \mathrm{Span} \{ u_1,u_2,\dots,u_d \}) \tag{2}\]</span></p><p><span class="math inline">\(\{ u_1,u_2,\dots,u_d \}\)</span>只是子空间 <span class="math inline">\(W\)</span> 的一组基,并非唯一的基. 这是因为, 对于 <span class="math inline">\(n\)</span>阶向量空间的一个 <span class="math inline">\(d\)</span> 维子空间 <spanclass="math inline">\(W\)</span> 而言, 向量空间 <spanclass="math inline">\(V\)</span> 中的任何 <spanclass="math inline">\(d\)</span> 个线性无关向量的集合都张成子空间 <spanclass="math inline">\(W\)</span>. 虽然一个子空间有多个基,但是所有基都具有相同的向量个数.</p><p>例如</p><p><span class="math display">\[e_1 = \begin{bmatrix}1\\0\\\vdots \\0\end{bmatrix}, \quade_2 = \begin{bmatrix}0\\1\\\vdots \\0\end{bmatrix}, \quad , \quade_n = \begin{bmatrix}0\\0\\\vdots \\1\end{bmatrix}\]</span></p><p>是 <span class="math inline">\(\mathrm{Euclidean}\)</span> <spanclass="math inline">\(n\)</span> 空间 <spanclass="math inline">\(R^n\)</span> 的一组基向量, 因为任何一个向量 <spanclass="math inline">\(x=[x(1),x(2),\dots,x(n)]^{\mathrm{T}} \inR^n\)</span> 都可以用 <span class="math inline">\(e_i\)</span>向量表示为</p><p><span class="math display">\[x = \sum_{i=1}^{n}x_ie_i = [x(1),x(2),\dots,x(n)]^{\mathrm{T}}\]</span></p><p>定义 3: 若 <span class="math inline">\(\{\alpha_1,\alpha_2,\dots,\alpha_n \}\)</span> 和 <spanclass="math inline">\(\{ \beta_1,\beta_2,\dots,\beta_n \}\)</span>是两组不同的基, 并且 <spanclass="math inline">\(\alpha_i^{\mathrm{H}}\beta_i = 0\)</span>,则称其中一组基是另一组基的对偶基.</p><p>定义 4: 令 <span class="math inline">\(\{ x_1,x_2,\dots,x_n\}\)</span> 是子空间 <span class="math inline">\(\mathrm{Span}\{x_1,x_2,\dots,x_n \}\)</span> 的基向量. 若这些基向量满足正交条件</p><p><span class="math display">\[\left \langle x_i,x_j \right \rangle = x_i^{\mathrm{T}}x_j=0, \quad\forall i \neq j \tag{3}\]</span></p><p>则称这些基向量为正交基向量. 想象一下空间坐标系的三根轴,它们就是三维空间的正交基向量. 然后三根轴旋转之后也还是正交基向量.</p><p>定义 5: 若正交基向量 <span class="math inline">\(\{ x_1,x_2,\dots,x_n\}\)</span> 中所有向量的范数均等于 1, 即</p><p><span class="math display">\[\left \| x_i \right \| = 1, \quad i = 1,2,\dots,n \tag{4}\]</span></p><p>称为标准正交基向量. 想象一下空间坐标系的三根轴,标准正交基向量就是把这三根轴的长度压缩成单位长度 1.</p><p>向量空间的子空间具有以下性质.</p><ol type="1"><li><p>设 <span class="math inline">\(W_1\)</span> 和 <spanclass="math inline">\(W_2\)</span> 是向量空间 <spanclass="math inline">\(V\)</span> 中的两个子空间, 则它们的交集 <spanclass="math inline">\(W_1 \cap W_2\)</span>, 也是 <spanclass="math inline">\(V\)</span> 的子空间.</p></li><li><p>设 <span class="math inline">\(W_1\)</span> 和 <spanclass="math inline">\(W_2\)</span> 是向量空间 <spanclass="math inline">\(V\)</span> 中的两个子空间, 则它们的和 <spanclass="math inline">\(W_1 + W_2\)</span>, 也是 <spanclass="math inline">\(V\)</span> 的子空间.</p></li></ol><h1 id="二gram-schmidt-正交化">二、Gram-Schmidt 正交化</h1><p>有几个线性无关的向量就可以构成几维的向量子空间.但应用更多的是需要标准正交基,那我们就要想个办法让不是标准正交的基向量变成标准正交的基向量.</p><p>由此可得到一个定理, 这个定理给出了 <span class="math inline">\(\{x_1,x_2,\dots,x_n \}\)</span> 转换为标准正交向量组 <spanclass="math inline">\(\{ u_1,u_2,\dots,u_n \}\)</span> 的方法,也就是本节所提到的 <spanclass="math inline">\(\mathrm{Gram-Schmidt}\)</span> 正交化.</p><p>定理 1: 令 <span class="math inline">\(\{ x_1,x_2,\dots,x_n\}\)</span> 是 <span class="math inline">\(p\)</span> 维向量子空间 <spanclass="math inline">\(W\)</span> 的任意一组基 (即线性无关的向量). 于是,子空间 <span class="math inline">\(W\)</span> 的标准正交基 <spanclass="math inline">\(\{ u_1,u_2,\dots,u_n \}\)</span> 可以通过 <spanclass="math inline">\(\mathrm{Gram-Schmidt}\)</span> 正交化构造如下:</p><p><span class="math display">\[p_1 = x_1, \quad u_1 = \frac{p_1}{\left \| p_1 \right \|} =\frac{x_1}{\left \| x_1 \right \|} \\p_k = x_k - \sum_{i=1}^{k-1}(u_i^{\mathrm{H}}x_k)u_i, \quad u_k =\frac{p_k}{\left \| p_k \right \|} \tag{5}\]</span></p><p>式子中, <span class="math inline">\(2 \le k \le n\)</span>. 向量集<span class="math inline">\(\{ p_1,p_2,\dots,p_n \}\)</span>是一组正交基, 但不一定是标准正交基.</p><p>书中关于这个式子的证明是先使用数学归纳法证明 (5) 式构造的向量 <spanclass="math inline">\(u_1,u_2,\dots,u_n\)</span>全部都是非零和有限大的向量, 然后再使用数学归纳法证明 <spanclass="math inline">\(p_i\)</span> 之间的正交性.</p><p>但是这都是建立在已知式子的前提下完成的, 没有一个追本溯源的过程.当然在数学的发展史上也有不少直接猜个式子出来, 然后证明其合理性的例子.这里我就不按书上的公式证明了, 而是追本溯源地说说这个公式的来历.</p><p>这个解释来自 <ahref="https://open.163.com/newview/movie/free?pid=M6V0BQC4M&amp;mid=M6V2AORLS">MIT线性代数公开课-正交矩阵和Gram-Schmidt正交化</a>.</p><p>第一种情况, 如果有一组正交基 <span class="math inline">\(A\)</span>和 <span class="math inline">\(B\)</span>, 我们需要得到两个标准正交基<span class="math inline">\(q_1\)</span> 和 <spanclass="math inline">\(q_2\)</span>,那么我们就令那组正交基除以自己的长度即可.</p><p><span class="math display">\[q_1 = \frac{A}{\left \| A \right \|} \quad q_2 = \frac{B}{\left \| B\right \|} \tag{6}\]</span></p><p>第二种情况, 很不幸我们只有两个线性无关的向量 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span>, 而且它们之间还不互相正交.我们首先需要做的就是把这两个向量进行处理使它们变成一组正交基, 也就是<span class="math inline">\(a,b\)</span> 到上面提到的 <spanclass="math inline">\(A,B\)</span> 之间的转换.</p><p>首先令 <span class="math inline">\(A = a\)</span>, 我们在 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> 张成的空间中, 取与 <spanclass="math inline">\(A\)</span> 正交的向量做为正交基. 方法就是将 <spanclass="math inline">\(b\)</span> 投影到 <spanclass="math inline">\(a\)</span> 的方向, 投影向量记作 <spanclass="math inline">\(p\)</span>, 然后可得 <spanclass="math inline">\(B=b-p\)</span>, 如下图所示.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202262170251.png" /></p><p>关键的点就在如何求得 <span class="math inline">\(p\)</span>, 想象一下<span class="math inline">\(p\)</span> 是不是只有 <spanclass="math inline">\(A\)</span> 的一部分, 那么此时就需要一个比例,这个比例就是由长度来的. 只需要求出 <spanclass="math inline">\(p\)</span> 的长度就能求到 <spanclass="math inline">\(B\)</span>.</p><p><span class="math inline">\(p\)</span> 的长度是 <spanclass="math inline">\(b\)</span> 的长度乘以 <spanclass="math inline">\(b\)</span> 和 <spanclass="math inline">\(A\)</span> 夹角 <spanclass="math inline">\(\theta\)</span> 的余弦值.</p><p><span class="math display">\[cos\theta = \frac{A^{\mathrm{H}}b}{\left \| A \right \|\left \| b \right\|} \tag{7}\]</span></p><p>故 <span class="math display">\[B = b - \left \| b \right \| cos\theta \cdot A = b -\frac{A^{\mathrm{H}}b}{\left \| A \right \|} A \tag{8}\]</span></p><p>这个式子怎么看起来和之前公式的式子 (5) 不太一样呢?仔细一看是分母多了一个 <span class="math inline">\(\left \| A \right\|\)</span>. 为什么会出现这样的情况?是因为公式每次都是使用的已经标准化后的向量.</p><p>推广到三维就有: <span class="math display">\[C = c - \frac{A^{\mathrm{H}}c}{\left \| A \right \|} A -\frac{B^{\mathrm{H}}c}{\left \| B \right \|} B \tag{9}\]</span></p><p>以此类推.</p><p>多说无益, 举个例子.</p><p>例: 令 <span class="math inline">\(W=\mathrm{Span}\{ x_1,x_2\}\)</span> 是 <span class="math inline">\(R^3\)</span> 的子空间, 其中<span class="math display">\[x_1 = \begin{bmatrix}1\\1\\2\end{bmatrix}, \quadx_2 = \begin{bmatrix}0\\2\\-7\end{bmatrix}\]</span></p><p>解：令所构造的 <span class="math inline">\(W\)</span>子空间的正交基向量为 <span class="math inline">\(p_1\)</span> 和 <spanclass="math inline">\(p_2\)</span>.</p><p>方法 (1): 利用公式, <span class="math inline">\(p_1 = x_1\)</span>,<span class="math inline">\(p_2 = x_2 - \frac{p_1^{\mathrm{H}}x_2}{\left\| p_1 \right \|} p_1\)</span>.</p><p>可得 <span class="math display">\[p_1 = \begin{bmatrix}1\\1\\2\end{bmatrix}, \quadp_2 = \begin{bmatrix}2\\4\\-3\end{bmatrix}\]</span></p><p>验证一下 <span class="math inline">\(p_1^{\mathrm{T}}p_2\)</span>确实是等于 0 的.</p><p>最后对这两个向量进行单位化得到标准正交基向量 <spanclass="math display">\[u_1 = \begin{bmatrix}\frac{1}{\sqrt{6}}\\\frac{1}{\sqrt{6}}\\\frac{2}{\sqrt{6}}\end{bmatrix}, \quadu_2 = \begin{bmatrix}\frac{2}{\sqrt{29}}\\\frac{4}{\sqrt{29}}\\\frac{-3}{\sqrt{29}}\end{bmatrix}\]</span></p><p>方法 (2): 书上还提到了一种方法, 虽然它算错了,但是按照步骤还是可以得到最后结果.</p><p>定义 <span class="math inline">\(p_1 = x_1, p_2 = x_2 +ap_1\)</span>, 其中, 常数 <span class="math inline">\(a\)</span>是根据正交条件 <spanclass="math inline">\(p_1^{\mathrm{T}}p_2=0\)</span> 确定. 由 <spanclass="math display">\[p_1^{\mathrm{T}}p_2 = p_1^{\mathrm{T}}(x_2+ap_1) = p_1^{\mathrm{T}} +ap_1^{\mathrm{T}}p_1 = -12+6a=0\]</span></p><p>可得 <span class="math inline">\(a=2\)</span>, <spanclass="math inline">\(p_2 = x_2+2p_1 = [2,3,-4]^{\mathrm{T}}\)</span>.得到的结果和方法 (1) 得到的结果是一样的.</p><p>这样做是通过向量之间的线性组合然后再解方程来计算的. 本质上和方法 (1)没有差别.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.4-内积与范数</title>
    <link href="/posts/cc2f06bd/"/>
    <url>/posts/cc2f06bd/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一向量的内积与范数">一、向量的内积与范数</h1><p>之前提到向量有常数向量、函数向量和随机向量. 不管怎么变,其对应的内积和范数都要符合一定的公理. 实向量是复向量的特例,这里以复向量为例, 用 <span class="math inline">\(R\)</span> 和 <spanclass="math inline">\(C\)</span> 分别代表实数域和复数域.</p><p>定义: 令 <span class="math inline">\(V\)</span> 是复向量空间. 函数<span class="math inline">\(\left \langle x,y \right \rangle : V \timesV \to C\)</span> 称为向量 <span class="math inline">\(x\)</span> 与<span class="math inline">\(y\)</span> 的内积, 若对所有 <spanclass="math inline">\(x,y,z \in V\)</span>, 以下内积公理满足:</p><ol type="1"><li><span class="math inline">\(\left \langle x,y \right \rangle \ge0\)</span></li></ol><p>(1a) <span class="math inline">\(\left \langle x,y \right \rangle =0\)</span> , 当且仅当 <span class="math inline">\(x=0\)</span></p><ol start="2" type="1"><li><p><span class="math inline">\(\left \langle x+y , z \right \rangle= \left \langle x , z \right \rangle + \left \langle y , z \right\rangle\)</span></p></li><li><p><span class="math inline">\(\left \langle cx , y \right \rangle =c^*\left \langle x , y \right \rangle\)</span> , 对所有复常数 <spanclass="math inline">\(c\)</span> 成立.</p></li><li><p><span class="math inline">\(\left \langle x , y \right \rangle =\left \langle y , x \right \rangle ^ *\)</span></p></li></ol><p>其中 <span class="math inline">\(*\)</span> 代表复数共轭.</p><p>定义: 令 <span class="math inline">\(V\)</span> 是复向量空间. 函数<span class="math inline">\(\left \| x \right \|: V \to R\)</span>称为向量 <span class="math inline">\(x\)</span> 的范数, 若对所有 <spanclass="math inline">\(x,y \in V\)</span>, 以下范数公理满足:</p><ol type="1"><li><span class="math inline">\(\left \| x \right \| \ge 0\)</span></li></ol><p>(1a) <span class="math inline">\(\left \| x \right \| = 0\)</span> ,当且仅当 <span class="math inline">\(x=0\)</span></p><ol start="2" type="1"><li><p><span class="math inline">\(\left \| cx \right \| = |c| \left \|x \right \|\)</span> , 对所有复常数 <spanclass="math inline">\(c\)</span> 成立.</p></li><li><p><span class="math inline">\(\left \| x + y \right \| \le \left \|x \right \| + \left \| y \right \|\)</span> , 对所有复常数 <spanclass="math inline">\(c\)</span> 成立.</p></li></ol><p>上述公理是平面欧几里得长度的熟知性质. 满足公理 (1), (2), (3),但不一定满足公理 (1a) 的函数称为向量的半范数.</p><h2 id="常数向量的内积与范数">1. 常数向量的内积与范数</h2><p>两个 <span class="math inline">\(m \times 1\)</span> 维常数向量 <spanclass="math inline">\(x = [x_1,x_2,\dots,x_m]^{\mathrm{T}}\)</span> 和<span class="math inline">\(y =[y_1,y_2,\dots,y_m]^{\mathrm{T}}\)</span> 的内积 (或叫点积) 定义为:</p><p><span class="math display">\[\left \langle x,y \right \rangle = x^{\mathrm{H}}y =\sum_{i=1}^mx_i^*y_i \tag{1}\]</span></p><p>两个向量之间的夹角定义为</p><p><span class="math display">\[cos\theta \overset{def}{=} \frac{\left \langle x,y \right\rangle}{\sqrt{\left \langle x,x \right \rangle } \sqrt{\left \langley,y \right \rangle}} = \frac{x^{\mathrm{H}}y}{\left \| x \right \|\left\| y \right \|} \tag{2}\]</span></p><p>显然, 当 <span class="math inline">\(x^{\mathrm{H}}y=0\)</span>时,<span class="math inline">\(\theta=\pi/2\)</span>. 此时, 称常数向量<span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 正交. 因此,两个常数向量正交的数学定义如下.</p><p>定义: 两个常数向量若它们的内积等于零, 即 <spanclass="math inline">\(x^{\mathrm{H}}y=0\)</span>, 则称这两个向量正交,并记作 <span class="math inline">\(x \perp y\)</span>.</p><p>补充说明: 根据定义, 零向量与任何向量都正交.</p><p>常用向量范数:</p><ol type="1"><li><span class="math inline">\(l_1\)</span> 范数</li></ol><p><span class="math display">\[\left \| x \right \|_1 \overset{def}{=} \left | \sum_{i=1}^mx_i \right |= |x_1| +  |x_2| +  \dots + |x_m| \tag{3}\]</span></p><p>这也叫和范数或者 1 范数. 用作两点间的曼哈顿距离公式如下:</p><p><span class="math display">\[\left \| x - y \right \|_1 \overset{def}{=} \left |\sum_{i=1}^{m}x_i-y_i \right | = |x_1-y_1| +  |x_2-y_2| +  \dots +|x_m-y_m| \tag{4}\]</span></p><ol start="2" type="1"><li><span class="math inline">\(l_2\)</span> 范数</li></ol><p><span class="math display">\[\left \| x \right \|_2 = (|x_1|^2 + |x_2|^2 + \dots + |x_m|^2)^{1/2}\tag{5}\]</span></p><p>这一范数常称 <span class="math inline">\(\mathrm{Euclidean}\)</span>(欧几里得) 范数, 有时也称 <spanclass="math inline">\(\mathrm{Frobenius}\)</span> 范数.两个向量之间的该范数就是求欧几里得距离,简而言之就是求两点间的空间距离.</p><ol start="3" type="1"><li><span class="math inline">\(l_{\infty}\)</span> 范数</li></ol><p><span class="math display">\[\left \| x \right \|_{\infty} = \mathrm{max}(|x_1|,|x_2|,\dots,|x_n|)\tag{6}\]</span></p><p>也称无穷范数或极大范数.</p><ol start="4" type="1"><li><span class="math inline">\(l_p\)</span> 范数</li></ol><p><span class="math display">\[\left \| x \right \|_p = \left ( \sum_{i=1}^{m}|x_i|^p \right )^{1/2}\quad , \quad p \ge 1 \tag{7}\]</span></p><p><span class="math inline">\(l_p\)</span> 范数也叫做 <spanclass="math inline">\(\mathrm{Holder}\)</span> 范数.</p><p>当 <span class="math inline">\(p=2\)</span> 时, <spanclass="math inline">\(l_p\)</span> 范数与 <spanclass="math inline">\(\mathrm{Euclidean}\)</span> 范数完全等价. 另外,无穷范数是 <span class="math inline">\(l_p\)</span> 范数的极限形式,即有</p><p><span class="math display">\[\left \| x \right \|_{\infty} = \lim_{p \to \infty} \left (\sum_{i=1}^{m}|x_i|^p \right )^{1/p} \tag{8}\]</span></p><p>利用极限的知识就可以证明:</p><p>不妨令 <span class="math inline">\(|a_1| \le |a_i|\)</span>, 那么<span class="math display">\[\lim_{p \to \infty} \left ( \frac{|a_i|}{|a_1|} \right) = \left\{\begin{array}{c}    1 \quad |a_i| = |a_1| \\    0 \quad |a_i| &lt; |a_1|\end{array}\right. \\\]</span></p><p><span class="math display">\[\lim_{p \to \infty} \left ( \sum_{i=1}^{n}|a_i|^p \right)^{1/p} =\lim_{p \to \infty} \left ( |a_1|^p  \sum_{i=1}^{n}\left(\frac{|a_i|}{|a_1|} \right )^p  \right )^{\frac{1}{p}} = |a_1| \lim_{p\to \infty}m^{\frac{1}{p}} = |a_1| \quad 0 &lt; m \le n\]</span></p><p>常数向量 <span class="math inline">\(w\)</span> 和 <spanclass="math inline">\(v\)</span> 的外积 (又叫叉积) 记作 <spanclass="math inline">\(wv^{\mathrm{H}}\)</span> 定义为</p><p><span class="math display">\[wv^{\mathrm{H}} = \begin{bmatrix}  w_1v_1^*&amp;  w_1v_2^*&amp;  \dots&amp; w_1v_m^* \\  w_2v_1^*&amp;  w_2v_2^*&amp;  \dots&amp; w_2v_m^* \\  \vdots&amp;    \vdots&amp;         &amp;  \vdots \\  w_mv_1^*&amp;  w_mv_2^*&amp;  \dots&amp; w_mv_m^* \\\end{bmatrix} \tag{9}\]</span></p><h2 id="函数向量的内积与范数">2. 函数向量的内积与范数</h2><p>若 <span class="math inline">\(x(t)\)</span> 和 <spanclass="math inline">\(y(t)\)</span> 分别是变量 <spanclass="math inline">\(t\)</span> 的函数变量, 则它们的内积定义为</p><p><span class="math display">\[\left \langle x(t),y(t) \right \rangle \overset{def}{=}\int_{a}^{b}x^{\mathrm{H}}(t)y(t)dt  \tag{10}\]</span></p><p>其中, 变量 <span class="math inline">\(t\)</span> 在 <spanclass="math inline">\([a,b]\)</span> 取值, 且 <spanclass="math inline">\(a&lt;b\)</span>.</p><p>两个函数向量的夹角定义为 <span class="math display">\[cos\theta \overset{def}{=} \frac{\left \langle x,y \right\rangle}{\sqrt{\left \langle x,x \right \rangle } \sqrt{\left \langley,y \right \rangle}} = \frac{\int_{a}^{b}x^{\mathrm{H}}(t)y(t)dt}{\left\| x \right \|\left \| y \right \|} \tag{11}\]</span></p><p>式中, <span class="math inline">\(\left \| x(t) \right \|\)</span>是函数向量 <span class="math inline">\(x(t)\)</span> 的范数, 定义为</p><p><span class="math display">\[\left \| x(t) \right \| \overset{def}{=}\left ( \int_{a}^{b}x^{\mathrm{H}}(t)y(t)dt \right )^{1/2}\tag{12}\]</span></p><p>由此可得, 两函数向量内积为零.</p><p><span class="math display">\[\int_{-\infty}^{\infty} x^{\mathrm{H}}(t)y(t)dt = 0\]</span></p><p>当 <span class="math inline">\(\theta = \pi/2\)</span> 时,这两个函数向量正交, 并记作 <span class="math inline">\(x(t) \perpy(t)\)</span>.</p><h2 id="随机向量的内积与范数">3. 随机向量的内积与范数</h2><p>若 <span class="math inline">\(x(\xi)\)</span> 和<spanclass="math inline">\(y(\xi)\)</span> 分别是样本变量 <spanclass="math inline">\(\xi\)</span> 的随机向量, 则它们的内积定义为</p><p><span class="math display">\[\left \langle x(\xi),y(\xi) \right \rangle \overset{def}{=} E \left\{x^{\mathrm{H}}(\xi)y(\xi) \right \} \tag{13}\]</span></p><p>随机向量 <span class="math inline">\(x(\xi)\)</span> 的范数定义为<span class="math display">\[\left \| x(\xi) \right \|^2 \overset{def}{=} E \left\{x^{\mathrm{H}}(\xi)y(\xi) \right \} \tag{14}\]</span></p><p>与常数向量和函数向量不同的是, 若<span class="math inline">\(m \times1\)</span> 随机向量 <span class="math inline">\(x(\xi)\)</span>的任意元素与 <span class="math inline">\(n \times 1\)</span> 随机向量<span class="math inline">\(y(\xi)\)</span> 的任意元素正交. 则 <spanclass="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 称为正交.这意味着两个向量的互相关矩阵为零矩阵 <span class="math inline">\(O_{m\times n}\)</span>, 即</p><p><span class="math display">\[E \left \{x(\xi)y^{\mathrm{H}}(\xi) \right \} = O_{m \times n} \tag{15}\]</span></p><p>并记作 <span class="math inline">\(x(\xi) \perp y(\xi)\)</span>.</p><h1 id="二向量的相似度">二、向量的相似度</h1><p>考虑 <span class="math inline">\(M\)</span> 个类型的模式,它们分别记作 <spanclass="math inline">\(\omega_1,\omega_2,\dots,\omega_M\)</span>.假设通过已知类型属性的观测样本, 比如已抽取出 <spanclass="math inline">\(M\)</span> 个样本模式向量 <spanclass="math inline">\(s_1,s_2,\dots,s_M\)</span>.给定一任意的位置模式向量 <span class="math inline">\(x\)</span>,判断属于哪一类模式, 这个问题称为模式分类.</p><p>这不就是机器学习中的分类问题吗? 模式分类的基本思想就是将未知模式向量<span class="math inline">\(x\)</span> 同 <spanclass="math inline">\(M\)</span> 个样本模式向量进行对比, 看 <spanclass="math inline">\(x\)</span> 与哪一个样本模式向量最相似,并据此做出模式分类的判断.</p><p>用<span class="math inline">\((x,s_1), (x,s_2), \dots,(x,s_M)\)</span> 分别作为未知模式向量<spanclass="math inline">\(x\)</span> 和已知样本模式向量 <spanclass="math inline">\(s_1,s_2,\dots,s_M\)</span> 之间的相似关系的符号.以 <span class="math inline">\(x\)</span> 与 <spanclass="math inline">\(s_1,s_2\)</span> 的相似关系为例, 若</p><p><span class="math display">\[(x,s_1) \le (x,s_2) \tag{16}\]</span></p><p>则称未知模式向量 <span class="math inline">\(x\)</span>与样本模式向量 <span class="math inline">\(s_2\)</span> 更相似.建立这样的关系需要定义相似度和相异度.</p><p>最简单的就是两个向量之间的欧几里得距离. 未知模式向量 <spanclass="math inline">\(x\)</span> 与 第 <spanclass="math inline">\(i\)</span> 个样本模式向量 <spanclass="math inline">\(s_i\)</span> 之间的欧几里得距离记作 <spanclass="math inline">\(D(s_i,x)\)</span>, 定义为 <spanclass="math display">\[D(s_i,x) = \left \langle x-s_i \right \rangle_2 =\sqrt{(x-s_i)^{\mathrm{T}}(x-s_i)} \tag{17}\]</span></p><p>称 <span class="math inline">\(s_i \in \left \{ s_1,s_2,\dots,s_M\right \}\)</span> 是到 <span class="math inline">\(x\)</span> 的近邻(即最近的邻居), 若</p><p><span class="math display">\[D(s_i,x) = \underset{k}{min}D(s_k,x), \quad k = 1,2,\dots,M \tag{18}\]</span></p><p>这就是机器学习中大名鼎鼎的 KNN 算法的来源.</p><p>然后换做马氏距离来算, 令</p><p><span class="math display">\[m = \frac{1}{N}\sum_{k=1}^{N}s_i \tag{19}\]</span></p><p>代表 <span class="math inline">\(N\)</span> 个样本模式向量的均值向量,并使用</p><p><span class="math display">\[C = \frac{1}{N}\sum_{i=1}^{N}(s_i-m)(s_i-m)^{\mathrm{T}} \tag{20}\]</span></p><p>代表 <span class="math inline">\(N\)</span>个样本模式向量的协方差矩阵.</p><p>从未知模式向量 <span class="math inline">\(x\)</span> 到均值向量<span class="math inline">\(m\)</span> 之间的 <spanclass="math inline">\(\mathrm{Mahalanobis}\)</span> 距离定义为</p><p><span class="math display">\[D(m,x)=(x-m)^{\mathrm{T}}C(x-m)\tag{21}\]</span></p><p>类似地, 从第 <span class="math inline">\(i\)</span> 个样本模式向量<span class="math inline">\(s_i\)</span> 到均值向量 <spanclass="math inline">\(m\)</span> 的 <spanclass="math inline">\(\mathrm{Mahalanobis}\)</span> 定义为</p><p><span class="math display">\[D(m,s_i)=(s_i-m)^{\mathrm{T}}C(s_i-m)\tag{22}\]</span></p><p>根据近邻分类法, 将未知模式向量 <span class="math inline">\(x\)</span>归为满足</p><p><span class="math display">\[D(s_i,x)= \underset{k}{min}|D(s_k,x) - D(m,x)|,\quad k = 1,2,\dots,N\tag{23}\]</span></p><p>的近邻 <span class="math inline">\(s_i\)</span> 的模式类型.</p><p>当然两个向量之间的相似度还可以用夹角的余弦函数 <spanclass="math display">\[S(s_i,x) = cos(\theta_i)=\frac{x^{\mathrm{T}}s_i}{\left \| x \right \|_2\left \| s_i \right \|_2} \tag{24}\]</span></p><p>当 <span class="math inline">\(cos(\theta_i) &lt; cos(\theta_j),\forall j \neq i\)</span> 成立, 则认为未知模式向量 <spanclass="math inline">\(x\)</span> 与样本模式向量 <spanclass="math inline">\(s_i\)</span> 最相似.</p><p>式子 (24) 还可变形成为 <span class="math display">\[S(s_i,x)=\frac{x^{\mathrm{T}}s_i}{x^{\mathrm{T}}x + s^{\mathrm{T}}_is_i+ x^{\mathrm{T}}s_i} \tag{25}\]</span></p><p>称为 <span class="math inline">\(\mathrm{Tanimoto}\)</span> 测度,广泛应用于信息恢复、疾病分类、动植物分类.</p><p>待分类的信号称为目标信号, 分类通常是根据某种物理或几何概念进行的. 令<span class="math inline">\(X\)</span> 为目标信号, <spanclass="math inline">\(A_i\)</span>代表第<spanclass="math inline">\(i\)</span>类目标的分类概念. <spanclass="math display">\[(X,A_i) \le (X,A_j), \forall i,j \tag{26}\]</span></p><p>这类有效关系一般用于目标-概念距离 <spanclass="math inline">\(D(X,A_i)\)</span> 描述. 因此, 若目标-概念距离<span class="math inline">\(D(X,A_i)\)</span> 最小, 则将 <spanclass="math inline">\(X\)</span> 归为第 <spanclass="math inline">\(i\)</span> 类目标 <spanclass="math inline">\(C_i\)</span>.</p><h1id="三正交向量在移动通信中的应用">三、正交向量在移动通信中的应用</h1><h2 id="时分多址">1. 时分多址</h2><p>在计算机网络中学过这样的概念, 就是单通道在把一段时间划给多个用户.这个操作就更像操作系统中采用时间片轮转的调度形式.</p><h2 id="频分多址">2. 频分多址</h2><p>不同用户占据不同频段.日常生活中显而易见的就是收音机的不同频段可以同时收听到.这就像计算机体系架构中多核CPU的运行, 它们是并行的概念.</p><h2 id="跳频-码分多址">3. 跳频-码分多址</h2><p>先划分时间, 再划分频段. 就像是时分和频分的结合.</p><h2 id="直接序列-码分多址">4. 直接序列-码分多址</h2><p>同时通信, 共享频道. 因为每个用户的扩频码向量之间是互相正交,互不影响.</p><h1 id="四向量范数用作-lyapunov-函数">四、向量范数用作 Lyapunov函数</h1><p><span class="math inline">\(\mathrm{Lyapunov}\)</span>直接法是分析和构造线性和非线性控制系统最成功的工具之一.</p><p>定理 1: (<span class="math inline">\(\mathrm{Lyapunov}\)</span>稳定性定理) 若对连续系统 <spanclass="math inline">\(dot{x}=f(x)\)</span> 或 离散系统 <spanclass="math inline">\(x_{k+1} = f(x_k)\)</span> 存在一个函数 <spanclass="math inline">\(V(x)\)</span> 具体平衡点 <spanclass="math inline">\(x=0\)</span>, 且 <spanclass="math inline">\(V\)</span> 在整个 <spanclass="math inline">\(R^n\)</span> 内满足条件:</p><ol type="1"><li><p><span class="math inline">\(V\)</span>是正定和径向无界函数.</p></li><li><p>对 <span class="math inline">\(x \neq 0\)</span></p></li></ol><p><span class="math display">\[DV = \lim_{\Delta t \to 0}sup{\frac{V(x(t+\Delta t))-V(x(t))}{\Delta t}}&lt; 0 \quad (连续系统)\]</span></p><p>或</p><p><span class="math display">\[\Delta V = V(x_{k+1}) - V(x_k) &lt; 0 \quad (离散系统)\]</span></p><p>则平衡点 <span class="math inline">\(x=0\)</span>是全局渐近稳定的.</p><p>在向量 <span class="math inline">\(x\)</span> 的 <spanclass="math inline">\(n\)</span> 维空间内, 考虑用向量范数</p><p><span class="math display">\[V(x) = \left \| Wx \right \|\]</span></p><p>其中 <spanclass="math inline">\(W=[\omega_1,\omega_2,\dots,\omega_n]\)</span> 是<span class="math inline">\(m \times n\)</span> 矩阵, 且 <spanclass="math inline">\(m \ge n\)</span> 和 <spanclass="math inline">\(\mathrm{rank}(W)=n\)</span></p><p><span class="math inline">\(l_p\)</span>范数构成了一类特殊的向量范数, 其中 <spanclass="math inline">\(\mathrm{Euclidean}\)</span> 范数 <spanclass="math display">\[V(x) = \left \| Wx \right \|_2 = \left (\sum_i|\omega_i^{\mathrm{T}}x|^2\right )^{1/2} \tag{27}\]</span></p><p>和无穷范数 <span class="math display">\[V(x) = \left \| Wx \right \|_{\infty} = \lim_{p \to \infty}\left (\sum_i|\omega_i^{\mathrm{T}}x|^p\right )^{1/p} =\underset{i}{\mathrm{max}}\{ \omega_i^{\mathrm{T}}x\}  \tag{28}\]</span></p><p>是 <span class="math inline">\(\mathrm{Lyapunov}\)</span>函数的两个重要例子.</p><p>定理 2: 函数 <span class="math inline">\(V(x) = \left \| Wx \right\|\)</span> (其中, <span class="math inline">\(W\)</span> 是 <spanclass="math inline">\(m \times n\)</span> 矩阵, 且 <spanclass="math inline">\(\mathrm{rank}W = n\)</span>) 是系统 <spanclass="math inline">\(\dot{x} = Ax\)</span> 的 <spanclass="math inline">\(\mathrm{Lyapunov}\)</span> 函数, 当且仅当矩阵<span class="math inline">\(W\)</span> 是矩阵方程 <spanclass="math display">\[WA - QW  = O \tag{29}\]</span></p><p>的解, 假定矩阵 <span class="math inline">\(Q\)</span> 满足条件 <spanclass="math display">\[\mu(Q) &lt; 0 \tag{30}\]</span></p><p>其中 <span class="math display">\[\mu(Q) = \lim_{\Delta t \to 0+} \frac{\left \| I + \Delta tQ - 1 \right\|}{\Delta t} \tag{31}\]</span></p><p><span class="math inline">\(\mu(Q)\)</span> 有时称为矩阵 <spanclass="math inline">\(Q\)</span> 的对数矩阵范数. 对数矩阵范数可以是复数,这一点和矩阵范数非负性质相违背.</p><p>如果式子 (28) 的函数是 <spanclass="math inline">\(\mathrm{Lyapunov}\)</span> 函数, 那么它的平方<span class="math display">\[V^2(x) = \left \| Wx \right \|_2^2 =\sum_{i=1}^n(\omega_i^{\mathrm{T}}x)^2 = x^{\mathrm{T}}W^{\mathrm{T}}Wx\tag{32}\]</span></p><p>也是 <span class="math inline">\(\mathrm{Lyapunov}\)</span> 函数.式子 (32) 的函数为二次型 <spanclass="math inline">\(x^{\mathrm{T}}Rx\)</span>, 其中 <spanclass="math display">\[R = W^{\mathrm{T}}W \tag{33}\]</span></p><p>这样的二次型函数是系统 <spanclass="math inline">\(\dot{x}=Ax\)</span> 的<spanclass="math inline">\(\mathrm{Lyapunov}\)</span> 函数, 当且仅当 <spanclass="math display">\[A^{\mathrm{T}}R + RA = -\tilde{Q} \tag{34}\]</span></p><p>的解 <span class="math inline">\(\tilde{Q}\)</span>是一个正定对称矩阵.</p><p>定理 3: 下面两个集合等价: <span class="math display">\[L_1 = \{ R \in R^{n \times n}|A^{\mathrm{T}}R+RA = -\tilde{Q}, 其中,\tilde{Q},R &gt; 0, \tilde{Q} 对称 \} \tag{35}\]</span></p><p><span class="math display">\[L_2 = \{ R \in R^{n \times n}|R=W^{\mathrm{T}}W, WA - QW = O , 其中,\mu_2(Q) &lt; 0, \mathrm{rank}(W)=n \} \tag{36}\]</span></p><p>感觉这部分和机器学习没有太大关系,如果以后遇到了或者其他什么原因再来学习吧.</p><h1 id="五矩阵的范数和内积">五、矩阵的范数和内积</h1><p>作为一种算子, 实矩阵 <span class="math inline">\(A \in R^{m \timesn}\)</span> 的范数记作 <span class="math inline">\(\left \| A \right\|\)</span>, 它是矩阵的实值函数, 必须要满足一些条件:</p><ol type="1"><li><p>对于任何非零矩阵 <span class="math inline">\(A \neq O\)</span>,其范数大于零, 即 <span class="math inline">\(\left \| A \right \| &gt;0\)</span>, 并且 <span class="math inline">\(\left \| O \right \| =0\)</span></p></li><li><p>对于任意复数 <span class="math inline">\(c\)</span> 有 <spanclass="math inline">\(\left \| cA \right \| = |c|\left \| A \right\|\)</span></p></li><li><p>矩阵范数满足三角不等式 <span class="math inline">\(\left \| A+B\right \| \le \left \| A \right \| + \left \| B \right\|\)</span></p></li><li><p>两个矩阵乘积的范数小于或等于两个矩阵范数的乘积, 即 <spanclass="math inline">\(\left \| AB \right \| \le \left \| A \right \|\left \| B \right \|\)</span></p></li></ol><p>有几个典型的矩阵范数</p><ol type="1"><li><span class="math inline">\(\mathrm{Frobenius}\)</span> 范数 <spanclass="math display">\[\left \| A \right \|_F \overset{def}{=} \left ( \sum_{i=1}^{m}\sum_{j=1}^{n} |a_{ij}|^2 \right )^{1/2} \tag{37}\]</span></li></ol><p>这个范数也叫做矩阵的 <span class="math inline">\(l_2\)</span>范数</p><ol start="2" type="1"><li><span class="math inline">\(l_p\)</span> 范数 <spanclass="math display">\[\left \| A \right \|_p \overset{def}{=} \underset{x \neq0}{\mathrm{max}} \frac{\left \| Ax \right \|_p}{\left \| x \right\|_p}  \tag{38}\]</span></li></ol><p>式子中, <span class="math inline">\(\left \| x \right \|_p\)</span>是向量 <span class="math inline">\(x\)</span> 的 <spanclass="math inline">\(l_p\)</span> 范数. 这个矩阵范数也称 <spanclass="math inline">\(\mathrm{Minkowski} p\)</span> 范数, 或者直接叫做<span class="math inline">\(p\)</span> 范数.</p><ol start="3" type="1"><li><p>行和范数 <span class="math display">\[\left \| A \right \|_{row} = \underset{1 \le i \le m}{\mathrm{max}}\left \{ \sum_{j=1}^{n} |a_{ij}|\right \}  \tag{39}\]</span></p></li><li><p>列和范数 <span class="math display">\[\left \| A \right \|_{col} = \underset{1 \le j \le n}{\mathrm{max}}\left \{ \sum_{i=1}^{m} |a_{ij}|\right \}  \tag{40}\]</span></p></li><li><p>谱范数 <span class="math display">\[\left \| A \right \|_{spec} = \sigma_{max} =\sqrt{\lambda_{\mathrm{max}}}  \tag{41}\]</span></p></li></ol><p>式子中, <span class="math inline">\(\sigma_{max}\)</span> 是矩阵<span class="math inline">\(A\)</span> 的最大奇异值, 即 <spanclass="math inline">\(A^{\mathrm{H}}A\)</span> 的最大特征值 <spanclass="math inline">\(\lambda_{\mathrm{max}}\)</span> 的正平方根.谱范数也称最大奇异值范数或者算子范数.</p><ol start="6" type="1"><li><span class="math inline">\(\mathrm{Mahalanobis}\)</span> 范数 <spanclass="math display">\[\left \| A \right \|_{\Omega} =  \sqrt{tr(A^{\mathrm{H}} \OmegaA)}  \tag{42}\]</span></li></ol><p>式子中, <span class="math inline">\(\Omega\)</span> 为正定矩阵(所有特征值大于零的矩阵), <span class="math inline">\(tr(A^{\mathrm{H}}\Omega A)\)</span> 为矩阵 <span class="math inline">\(A^{\mathrm{H}}\Omega A\)</span> 的迹 (对角线之积).</p><p>若 <span class="math inline">\(A,B\)</span> 是 <spanclass="math inline">\(m \times n\)</span> 矩阵,则矩阵的范数具有以下性质: <span class="math display">\[\left \| A+B \right \| + \left \| A-B \right \| = 2(\left \| A \right\|^2 + \left \| B \right \|^2) \tag{43}\]</span></p><p><span class="math display">\[\left \| A+B \right \| \left \| A-B \right \| \le \left \| A \right \|^2+ \left \| B \right \|^2 \tag{44}\]</span></p><p>与矩阵范数有联系的量是矩阵的内积, 对于任意 <spanclass="math inline">\(m \times n\)</span> 复矩阵 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span>, 矩阵的内积记作 $A,B $, 定义为 <spanclass="math display">\[\left \langle A,B \right \rangle = A^{\mathrm{H}}B  \tag{45}\]</span></p><p>以下是矩阵的内积与范数之间的关系</p><ol type="1"><li><span class="math inline">\(\mathrm{Cauchy-Schwartz}\)</span> 不等式<span class="math display">\[|\left \langle A,B \right \rangle |^2 \le \left \| A \right \|^2 \left\| B \right \|^2 \tag{46}\]</span></li></ol><p>当且仅当 <span class="math inline">\(A=cB\)</span>, 等号成立, 其中,<span class="math inline">\(c\)</span> 是某个复常数.</p><ol start="2" type="1"><li><p><span class="math inline">\(\mathrm{Pathagoras}\)</span> 定理<span class="math display">\[\left \langle A,B \right \rangle^2 = 0 \Rightarrow \left \| A+B \right\|^2 = \left \| A \right \|^2 + \left \| B \right \|^2 \tag{47}\]</span></p></li><li><p>极化恒等式 <span class="math display">\[Re(\left \langle A,B \right \rangle) = \frac{1}{4}(\left \| A+B \right\|^2 - \left \| A-B \right \|^2) \tag{48}\]</span></p></li></ol><p><span class="math display">\[Re(\left \langle A,B \right \rangle) = \frac{1}{2}(\left \| A+B \right\|^2 - \left \| A \right \|^2 - \left \| B \right \|^2) \tag{49}\]</span></p><p>式子中, <span class="math inline">\(Re(.)\)</span>表示取复数的实部.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day37</title>
    <link href="/posts/2907be63/"/>
    <url>/posts/2907be63/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文代码来自 <ahref="https://blog.csdn.net/minfanphd/article/details/116976111">CSDN文章:日撸 Java 三百行（81-90天，CNN 卷积神经网络）</a></p><p>我将借用这部分代码对 CNN 进行一个更深层次的理解.</p><h1 id="卷积神经网络-代码篇">卷积神经网络 (代码篇)</h1><h2 id="一数据集读取与存储">一、数据集读取与存储</h2><h3 id="数据集描述">1. 数据集描述</h3><p>简要描述一下我们需要读取的数据集.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>乍一看这不就是由 0 和 1组成的集合吗？这个时候我们对这些数字想象成一个图片,然后通过一些工具就可以呈现出下面的这样一副图片.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022528101728.png" /></p><p>这张图片的大小就为 <span class="math inline">\(28 \times 28\)</span>,那这堆数据最后不是多出了一个数字吗? 这个数字要表达什么意思呢?这个时候仔细观察图片, 它是不是看起来像数字 '0'.为了检验这个想法是否正确, 我们再找一行数据.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022528101239.png" /></p><p>虽然图中的数字写法不标准, 但是隐约中还是能判别为数字 '3',然后多出的那个数字正好是 '3'. 由此得出结论, 数据集的每一行代表一张图片,由 '0' '1' 表示其黑白像素点, 且该行最后一个数字表示图片中数字的值.</p><p>所以对于这个数据集数据的读取就是把图片的像素点以数组方式存储,数组的大小就是图片的大小. 然后用一个单独的值存储图片中所表示的数字,把这个就作为图片的标签.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Manage the dataset.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dataset</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * All instances organized by a list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Instance&gt; instances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The label index.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> labelIndex;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The max label (label start from 0).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">maxLabel</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dataset</span><span class="hljs-params">()</span> &#123;<br>        labelIndex = -<span class="hljs-number">1</span>;<br>        instances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The second constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename   The filename.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraSplitSign  Often comma.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLabelIndex Often the last column.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dataset</span><span class="hljs-params">(String paraFilename, String paraSplitSign, <span class="hljs-type">int</span> paraLabelIndex)</span> &#123;<br>        instances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        labelIndex = paraLabelIndex;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(paraFilename);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">tempReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(tempFile));<br>            String tempLine;<br>            <span class="hljs-keyword">while</span> ((tempLine = tempReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                String[] tempDatum = tempLine.split(paraSplitSign);<br>                <span class="hljs-keyword">if</span> (tempDatum.length == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-type">double</span>[] tempData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempDatum.length];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempDatum.length; i++)<br>                    tempData[i] = Double.parseDouble(tempDatum[i]);<br>                <span class="hljs-type">Instance</span> <span class="hljs-variable">tempInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instance</span>(tempData);<br>                append(tempInstance);<br>            &#125; <span class="hljs-comment">// Of while</span><br>            tempReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;Unable to load &quot;</span> + paraFilename);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-comment">//Of try</span><br>    &#125;<span class="hljs-comment">// Of the second constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Append an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstance The given record.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        instances.add(paraInstance);<br>    &#125;<span class="hljs-comment">// Of append</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Append an instance  specified by double values.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraAttributes, Double paraLabel)</span> &#123;<br>        instances.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Instance</span>(paraAttributes, paraLabel));<br>    &#125;<span class="hljs-comment">// Of append</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Instance <span class="hljs-title function_">getInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> &#123;<br>        <span class="hljs-keyword">return</span> instances.get(paraIndex);<br>    &#125;<span class="hljs-comment">// Of getInstance</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instances.size();<br>    &#125;<span class="hljs-comment">// Of size</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] getAttributes(<span class="hljs-type">int</span> paraIndex) &#123;<br>        <span class="hljs-keyword">return</span> instances.get(paraIndex).getAttributes();<br>    &#125;<span class="hljs-comment">// Of getAttrs</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getLabel</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> &#123;<br>        <span class="hljs-keyword">return</span> instances.get(paraIndex).getLabel();<br>    &#125;<span class="hljs-comment">// Of getLabel</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Unit test.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dataset</span> <span class="hljs-variable">tempData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dataset</span>(<span class="hljs-string">&quot;D:/Work/Data/sampledata/train.format&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-number">784</span>);<br>        <span class="hljs-type">Instance</span> <span class="hljs-variable">tempInstance</span> <span class="hljs-operator">=</span> tempData.getInstance(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;The first instance is: &quot;</span> + tempInstance);<br>        System.out.println(<span class="hljs-string">&quot;The first instance label is: &quot;</span> + tempInstance.label);<br><br>        tempInstance = tempData.getInstance(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;The second instance is: &quot;</span> + tempInstance);<br>        System.out.println(<span class="hljs-string">&quot;The second instance label is: &quot;</span> + tempInstance.label);<br>    &#125;<span class="hljs-comment">// Of main</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * An instance.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Instance</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Conditional attributes.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] attributes;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Label.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> Double label;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         * The first constructor.</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Instance</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraAttrs, Double paraLabel)</span> &#123;<br>            attributes = paraAttrs;<br>            label = paraLabel;<br>        &#125;<span class="hljs-comment">//Of the first constructor</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         * The second constructor.</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Instance</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraData)</span> &#123;<br>            <span class="hljs-keyword">if</span> (labelIndex == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// No label</span><br>                attributes = paraData;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                label = paraData[labelIndex];<br>                <span class="hljs-keyword">if</span> (label &gt; maxLabel) &#123;<br>                    <span class="hljs-comment">// It is a new label</span><br>                    maxLabel = label;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-keyword">if</span> (labelIndex == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// The first column is the label</span><br>                    attributes = Arrays.copyOfRange(paraData, <span class="hljs-number">1</span>, paraData.length);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// The last column is the label</span><br>                    attributes = Arrays.copyOfRange(paraData, <span class="hljs-number">0</span>, paraData.length - <span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125;<span class="hljs-comment">// Of the second constructor</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         * Getter.</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] getAttributes() &#123;<br>            <span class="hljs-keyword">return</span> attributes;<br>        &#125;<span class="hljs-comment">// Of getAttributes</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         * Getter.</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getLabel</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (labelIndex == -<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> label;<br>        &#125;<span class="hljs-comment">// Of getLabel</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         * toString.</span><br><span class="hljs-comment">         * **********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Arrays.toString(attributes) + <span class="hljs-string">&quot;, &quot;</span> + label;<br>        &#125;<span class="hljs-comment">//Of toString</span><br>    &#125;<span class="hljs-comment">// Of class Instance</span><br>&#125; <span class="hljs-comment">//Of class Dataset</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022528111140.png" /></p><h2 id="二卷积核大小的基本操作">二、卷积核大小的基本操作</h2><h3 id="操作">1. 操作</h3><p>对卷积核大小进行处理, 也就是对卷积核的长和宽进行处理.</p><p>一个方法是长和宽同时除以两个整数, 要是不能被整除就抛出错误. 例如:<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>)</span> / <span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span> -&gt;</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">2</span>,  <span class="hljs-number">2</span>)</span> / <span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)</span> -&gt;</span> <span class="hljs-built_in">Error</span><br></code></pre></td></tr></table></figure></p><p>另一个方法是长和宽同时减去两个整数, 然后再加上 1. 例如:<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(4, 6)</span> - <span class="hljs-comment">(2, 2)</span> + <span class="hljs-number">1</span> -&gt; <span class="hljs-comment">(3,5)</span><br></code></pre></td></tr></table></figure></p><h3 id="具体代码-1">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The size of a convolution core.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Size</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Cannot be changed after initialization.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> width;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Cannot be changed after initialization.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> height;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraWidth  The given width.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraHeight The given height.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(<span class="hljs-type">int</span> paraWidth, <span class="hljs-type">int</span> paraHeight)</span> &#123;<br>        width = paraWidth;<br>        height = paraHeight;<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Divide a scale with another one. For example (4, 12) / (2, 3) = (2, 4).</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraScaleSize The given scale size.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The new size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Size <span class="hljs-title function_">divide</span><span class="hljs-params">(Size paraScaleSize)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultWidth</span> <span class="hljs-operator">=</span> width / paraScaleSize.width;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultHeight</span> <span class="hljs-operator">=</span> height / paraScaleSize.height;<br>        <span class="hljs-keyword">if</span> (resultWidth * paraScaleSize.width != width || resultHeight * paraScaleSize.height != height) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unable to divide &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot; with &quot;</span> + paraScaleSize);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(resultWidth, resultHeight);<br>    &#125;<span class="hljs-comment">// Of divide</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Subtract a scale with another one, and add a value. For example (4, 12) -</span><br><span class="hljs-comment">     * (2, 3) + 1 = (3, 10).</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraScaleSize The given scale size.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraAppend    The appended size to both dimensions.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The new size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Size <span class="hljs-title function_">subtract</span><span class="hljs-params">(Size paraScaleSize, <span class="hljs-type">int</span> paraAppend)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultWidth</span> <span class="hljs-operator">=</span> width - paraScaleSize.width + paraAppend;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultHeight</span> <span class="hljs-operator">=</span> height - paraScaleSize.height + paraAppend;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(resultWidth, resultHeight);<br>    &#125;<span class="hljs-comment">// Of subtract</span><br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span> + width + <span class="hljs-string">&quot;, &quot;</span> + height + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-keyword">return</span> resultString;<br>    &#125;<span class="hljs-comment">// Of toString</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Unit test.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Size</span> <span class="hljs-variable">tempSize1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>        <span class="hljs-type">Size</span> <span class="hljs-variable">tempSize2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempSize1 + <span class="hljs-string">&quot; divide &quot;</span> + tempSize2 + <span class="hljs-string">&quot; = &quot;</span> + tempSize1.divide(tempSize2));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempSize2 + <span class="hljs-string">&quot; divide &quot;</span> + tempSize1 + <span class="hljs-string">&quot; = &quot;</span> + tempSize2.divide(tempSize1));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error is :&quot;</span> + ee);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempSize1 + <span class="hljs-string">&quot; - &quot;</span> + tempSize2 + <span class="hljs-string">&quot; + 1 = &quot;</span> + tempSize1.subtract(tempSize2, <span class="hljs-number">1</span>));<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">//Of class Size</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-1">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022528152335.png" /></p><h2 id="三数学工具类">三、数学工具类</h2><h3 id="工具函数">1. 工具函数</h3><p>定义了一个算子, 其主要目的是为了矩阵操作时对每个元素都做一遍.有对单个矩阵进行运算, 例如用 1 减去矩阵中的值, 或者对矩阵中的值使用<span class="math inline">\(Sigmoid\)</span> 函数. 有对两个矩阵进行运算,例如两个矩阵之间的加法还有减法.</p><p>矩阵旋转 180 度, 其实就是旋转两次 90 度. 旋转 90 度的公式为 <spanclass="math display">\[matrix[row][col] \overset{rotate}{=}matrix_{new}[col][n - row - 1]\]</span></p><p>convnValid 是卷积操作. convnFull 为其逆向操作.</p><p>scaleMatrix 是均值池化. kronecker 是池化的逆向操作.</p><h3 id="具体代码-2">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Math operations. Adopted from cnn-master.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * An interface for different on-demand operators.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Operator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span>;<br>    &#125;<span class="hljs-comment">// Of interface Operator</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The one-minus-the-value operator.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Operator</span> <span class="hljs-variable">one_value</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3752139491940330714L</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> - value;<br>        &#125;<span class="hljs-comment">// Of process</span><br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The sigmoid operator.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Operator</span> <span class="hljs-variable">sigmoid</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1952718905019847589L</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, -value));<br>        &#125;<span class="hljs-comment">// Of process</span><br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * An interface for operations with two operators.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OperatorOnTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span>;<br>    &#125;<span class="hljs-comment">// Of interface OperatorOnTwo</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Plus.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">OperatorOnTwo</span> <span class="hljs-variable">plus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperatorOnTwo</span>() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6298144029766839945L</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;<span class="hljs-comment">// Of process</span><br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Multiply.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">OperatorOnTwo</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperatorOnTwo</span>() &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">7053767821858820698L</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>            <span class="hljs-keyword">return</span> a * b;<br>        &#125;<span class="hljs-comment">// Of process</span><br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Minus.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">OperatorOnTwo</span> <span class="hljs-variable">minus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperatorOnTwo</span>() &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7346065545555093912L</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>            <span class="hljs-keyword">return</span> a - b;<br>        &#125;<span class="hljs-comment">// Of process</span><br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Print a matrix</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMatrix</span><span class="hljs-params">(<span class="hljs-type">double</span>[][] matrix)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span>[] array : matrix) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> Arrays.toString(array);<br>            line = line.replaceAll(<span class="hljs-string">&quot;, &quot;</span>, <span class="hljs-string">&quot;\t&quot;</span>);<br>            System.out.println(line);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        System.out.println();<br>    &#125;<span class="hljs-comment">// Of printMatrix</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Clone a matrix. Do not use it reference directly.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] cloneMatrix(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] matrix) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] outMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[m][n];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            System.arraycopy(matrix[i], <span class="hljs-number">0</span>, outMatrix[i], <span class="hljs-number">0</span>, n);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> outMatrix;<br>    &#125;<span class="hljs-comment">// Of cloneMatrix</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Rotate the matrix 180 degrees.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] rot180(<span class="hljs-type">double</span>[][] matrix) &#123;<br>        matrix = cloneMatrix(matrix);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> matrix[i][j];<br>                matrix[i][j] = matrix[i][n - <span class="hljs-number">1</span> - j];<br>                matrix[i][n - <span class="hljs-number">1</span> - j] = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m / <span class="hljs-number">2</span>; i++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> matrix[i][j];<br>                matrix[i][j] = matrix[m - <span class="hljs-number">1</span> - i][j];<br>                matrix[m - <span class="hljs-number">1</span> - i][j] = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<span class="hljs-comment">// Of rot180</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">myRandom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Generate a random matrix with the given size. Each value takes value in</span><br><span class="hljs-comment">     * [-0.005, 0.095].</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] randomMatrix(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">boolean</span> b) &#123;<br>        <span class="hljs-type">double</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[x][y];<br>        <span class="hljs-comment">// int tag = 1;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; x; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; y; j++) &#123;<br>                matrix[i][j] = (myRandom.nextDouble() - <span class="hljs-number">0.05</span>) / <span class="hljs-number">10</span>;<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<span class="hljs-comment">// Of randomMatrix</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Generate a random array with the given length. Each value takes value in</span><br><span class="hljs-comment">     * [-0.005, 0.095].</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[] randomArray(<span class="hljs-type">int</span> len) &#123;<br>        <span class="hljs-type">double</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-comment">//data[i] = myRandom.nextDouble() / 10 - 0.05;</span><br>            data[i] = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<span class="hljs-comment">// Of randomArray</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Generate a random perm with the batch size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] randomPerm(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> batchSize) &#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (set.size() &lt; batchSize) &#123;<br>            set.add(myRandom.nextInt(size));<br>        &#125;<br>        <span class="hljs-type">int</span>[] randPerm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[batchSize];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer value : set) &#123;<br>            randPerm[i++] = value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> randPerm;<br>    &#125;<span class="hljs-comment">// Of randomPerm</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Matrix operation with the given operator on single operand.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] matrixOp(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] ma, Operator operator) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ma.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> ma[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                ma[i][j] = operator.process(ma[i][j]);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> ma;<br>    &#125;<span class="hljs-comment">// Of matrixOp</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Matrix operation with the given operator on two operands.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] matrixOp(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] ma, <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] mb,<br>                                      <span class="hljs-keyword">final</span> Operator operatorA, <span class="hljs-keyword">final</span> Operator operatorB, OperatorOnTwo operator) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> ma.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> ma[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">if</span> (m != mb.length || n != mb[<span class="hljs-number">0</span>].length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ma.length:&quot;</span> + ma.length + <span class="hljs-string">&quot;  mb.length:&quot;</span> + mb.length);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> ma[i][j];<br>                <span class="hljs-keyword">if</span> (operatorA != <span class="hljs-literal">null</span>) &#123;<br>                    a = operatorA.process(a);<br>                &#125;<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> mb[i][j];<br>                <span class="hljs-keyword">if</span> (operatorB != <span class="hljs-literal">null</span>) &#123;<br>                    b = operatorB.process(b);<br>                &#125;<br><br>                mb[i][j] = operator.process(a, b);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> mb;<br>    &#125;<span class="hljs-comment">// Of matrixOp</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Extend the matrix to a bigger one (a number of times).</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] kronecker(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] matrix, <span class="hljs-keyword">final</span> Size scale) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] outMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[m * scale.width][n * scale.height];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ki</span> <span class="hljs-operator">=</span> i * scale.width; ki &lt; (i + <span class="hljs-number">1</span>) * scale.width; ki++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">kj</span> <span class="hljs-operator">=</span> j * scale.height; kj &lt; (j + <span class="hljs-number">1</span>) * scale.height; kj++) &#123;<br>                        outMatrix[ki][kj] = matrix[i][j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outMatrix;<br>    &#125;<span class="hljs-comment">// Of kronecker</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Scale the matrix.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] scaleMatrix(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] matrix, <span class="hljs-keyword">final</span> Size scale) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">sm</span> <span class="hljs-operator">=</span> m / scale.width;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">sn</span> <span class="hljs-operator">=</span> n / scale.height;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] outMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[sm][sn];<br>        <span class="hljs-keyword">if</span> (sm * scale.width != m || sn * scale.height != n)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;scale matrix&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> scale.width * scale.height;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sm; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; sn; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">si</span> <span class="hljs-operator">=</span> i * scale.width; si &lt; (i + <span class="hljs-number">1</span>) * scale.width; si++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> j * scale.height; sj &lt; (j + <span class="hljs-number">1</span>) * scale.height; sj++) &#123;<br>                        sum += matrix[si][sj];<br>                    &#125; <span class="hljs-comment">// Of for sj</span><br>                &#125; <span class="hljs-comment">// Of for si</span><br>                outMatrix[i][j] = sum / size;<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> outMatrix;<br>    &#125;<span class="hljs-comment">// Of scaleMatrix</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Convolution full to obtain a bigger size. It is used in back-propagation.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] convnFull(<span class="hljs-type">double</span>[][] matrix, <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] kernel) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">km</span> <span class="hljs-operator">=</span> kernel.length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">kn</span> <span class="hljs-operator">=</span> kernel[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] extendMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[m + <span class="hljs-number">2</span> * (km - <span class="hljs-number">1</span>)][n + <span class="hljs-number">2</span> * (kn - <span class="hljs-number">1</span>)];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            System.arraycopy(matrix[i], <span class="hljs-number">0</span>, extendMatrix[i + km - <span class="hljs-number">1</span>], kn - <span class="hljs-number">1</span>, n);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> convnValid(extendMatrix, kernel);<br>    &#125;<span class="hljs-comment">// Of convnFull</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Convolution operation, from a given matrix and a kernel, sliding and sum</span><br><span class="hljs-comment">     * to obtain the result matrix. It is used in forward.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] convnValid(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] matrix, <span class="hljs-type">double</span>[][] kernel) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">km</span> <span class="hljs-operator">=</span> kernel.length;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">kn</span> <span class="hljs-operator">=</span> kernel[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">kns</span> <span class="hljs-operator">=</span> n - kn + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">kms</span> <span class="hljs-operator">=</span> m - km + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][] outMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[kms][kns];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; kms; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; kns; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ki</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ki &lt; km; ki++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">kj</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; kj &lt; kn; kj++)<br>                        sum += matrix[i + ki][j + kj] * kernel[ki][kj];<br>                &#125;<br>                outMatrix[i][j] = sum;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outMatrix;<br>    &#125;<span class="hljs-comment">// Of convnValid</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Convolution on a tensor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] convnValid(<span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][][][] matrix, <span class="hljs-type">int</span> mapNoX, <span class="hljs-type">double</span>[][][][] kernel, <span class="hljs-type">int</span> mapNoY) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>][mapNoX].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>][mapNoX][<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">km</span> <span class="hljs-operator">=</span> kernel.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">kn</span> <span class="hljs-operator">=</span> kernel[<span class="hljs-number">0</span>][mapNoY].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">kh</span> <span class="hljs-operator">=</span> kernel[<span class="hljs-number">0</span>][mapNoY][<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">kms</span> <span class="hljs-operator">=</span> m - km + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">kns</span> <span class="hljs-operator">=</span> n - kn + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">khs</span> <span class="hljs-operator">=</span> h - kh + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (matrix.length != kernel.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;length&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][][] outMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[kms][kns][khs];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; kms; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; kns; j++)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; khs; k++) &#123;<br>                    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ki</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ki &lt; km; ki++) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">kj</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; kj &lt; kn; kj++)<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">kk</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; kk &lt; kh; kk++) &#123;<br>                                sum += matrix[i + ki][mapNoX][j + kj][k + kk] * kernel[ki][mapNoY][kj][kk];<br>                            &#125;<br>                    &#125;<br>                    outMatrix[i][j][k] = sum;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outMatrix[<span class="hljs-number">0</span>];<br>    &#125;<span class="hljs-comment">// Of convnValid</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The sigmoid operation.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sigmoid</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, -x));<br>    &#125;<span class="hljs-comment">// Of sigmoid</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Sum all values of a matrix.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">double</span>[][] error)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> error[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span>[] array : error) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                sum += array[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<span class="hljs-comment">// Of sum</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Ad hoc sum.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span>[][] sum(<span class="hljs-type">double</span>[][][][] errors, <span class="hljs-type">int</span> j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> errors[<span class="hljs-number">0</span>][j].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> errors[<span class="hljs-number">0</span>][j][<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">double</span>[][] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[m][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">mi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; mi &lt; m; mi++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">nj</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; nj &lt; n; nj++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span>[][][] error : errors) &#123;<br>                    sum += error[j][mi][nj];<br>                &#125;<br>                result[mi][nj] = sum;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<span class="hljs-comment">// Of sum</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Get the index of the maximal value for the final classification.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">(<span class="hljs-type">double</span>[] out)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> out[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; out.length; i++)<br>            <span class="hljs-keyword">if</span> (out[i] &gt; max) &#123;<br>                max = out[i];<br>                index = i;<br>            &#125;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<span class="hljs-comment">// Of getMaxIndex</span><br>&#125; <span class="hljs-comment">//Of class MathUtils</span><br></code></pre></td></tr></table></figure><p>这里定义了一个枚举类用来标识每一层的属性, 比如输入层, 卷积层等.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Enumerate all layer types.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LayerTypeEnum</span> &#123;<br>    INPUT, CONVOLUTION, SAMPLING, OUTPUT;<br>&#125; <span class="hljs-comment">//Of enum LayerTypeEnum</span><br></code></pre></td></tr></table></figure></p><h2 id="四网络结构与参数">四、网络结构与参数</h2><p>对单层设置一些工具类的函数, 然后就是通过上面的枚举类型 LayerTypeEnum来区别神经网络中不同的层, 例如输入层、卷积层和池化层.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * One layer, support all four layer types. The code mainly initializes, gets,</span><br><span class="hljs-comment"> * and sets variables. Essentially no algorithm is implemented.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CnnLayer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The type of the layer.</span><br><span class="hljs-comment">     */</span><br>    LayerTypeEnum type;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of out map.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> outMapNum;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The map size.</span><br><span class="hljs-comment">     */</span><br>    Size mapSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The kernel size.</span><br><span class="hljs-comment">     */</span><br>    Size kernelSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The scale size.</span><br><span class="hljs-comment">     */</span><br>    Size scaleSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The index of the class (label) attribute.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">classNum</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Kernel. Dimensions: [front map][out map][width][height].</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[][][][] kernel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Bias. The length is outMapNum.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] bias;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Out maps. Dimensions:</span><br><span class="hljs-comment">     * [batchSize][outMapNum][mapSize.width][mapSize.height].</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[][][][] outMaps;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Errors.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[][][][] errors;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * For batch processing.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">recordInBatch</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraType Describe which Layer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNum  When the type is CONVOLUTION, it is the out map number. when</span><br><span class="hljs-comment">     *                 the type is OUTPUT, it is the class number.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraSize When the type is INPUT, it is the map size; when the type is</span><br><span class="hljs-comment">     *                 CONVOLUTION, it is the kernel size; when the type is SAMPLING,</span><br><span class="hljs-comment">     *                 it is the scale size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CnnLayer</span><span class="hljs-params">(LayerTypeEnum paraType, <span class="hljs-type">int</span> paraNum, Size paraSize)</span> &#123;<br>        type = paraType;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> INPUT:<br>                outMapNum = <span class="hljs-number">1</span>;<br>                mapSize = paraSize; <span class="hljs-comment">// No deep copy.</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CONVOLUTION:<br>                outMapNum = paraNum;<br>                kernelSize = paraSize;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SAMPLING:<br>                scaleSize = paraSize;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> OUTPUT:<br>                classNum = paraNum;<br>                mapSize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>                outMapNum = classNum;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Internal error occurred in AbstractLayer.java constructor.&quot;</span>);<br>        &#125;<span class="hljs-comment">// Of switch</span><br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize the kernel.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFrontMapNum When the type is CONVOLUTION, it is the out map number. when</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initKernel</span><span class="hljs-params">(<span class="hljs-type">int</span> paraFrontMapNum)</span> &#123;<br>        kernel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[paraFrontMapNum][outMapNum][][];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraFrontMapNum; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; outMapNum; j++) &#123;<br>                kernel[i][j] = MathUtils.randomMatrix(kernelSize.width, kernelSize.height, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of initKernel</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize the output kernel. The code is revised to invoke initKernel(int).</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initOutputKernel</span><span class="hljs-params">(<span class="hljs-type">int</span> paraFrontMapNum, Size paraSize)</span> &#123;<br>        kernelSize = paraSize;<br>        initKernel(paraFrontMapNum);<br>    &#125;<span class="hljs-comment">// Of initOutputKernel</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize the bias. No parameter. &quot;int frontMapNum&quot; is claimed however not used.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBias</span><span class="hljs-params">()</span> &#123;<br>        bias = MathUtils.randomArray(outMapNum);<br>    &#125;<span class="hljs-comment">// Of initBias</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize the errors.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBatchSize The batch size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initErrors</span><span class="hljs-params">(<span class="hljs-type">int</span> paraBatchSize)</span> &#123;<br>        errors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[paraBatchSize][outMapNum][mapSize.width][mapSize.height];<br>    &#125;<span class="hljs-comment">// Of initErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize out maps.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBatchSize The batch size.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initOutMaps</span><span class="hljs-params">(<span class="hljs-type">int</span> paraBatchSize)</span> &#123;<br>        outMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[paraBatchSize][outMapNum][mapSize.width][mapSize.height];<br>    &#125;<span class="hljs-comment">// Of initOutMaps</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Prepare for a new batch.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareForNewBatch</span><span class="hljs-params">()</span> &#123;<br>        recordInBatch = <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-comment">// Of prepareForNewBatch</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Prepare for a new record.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareForNewRecord</span><span class="hljs-params">()</span> &#123;<br>        recordInBatch++;<br>    &#125;<span class="hljs-comment">// Of prepareForNewRecord</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set one value of outMaps.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMapValue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">int</span> paraX, <span class="hljs-type">int</span> paraY, <span class="hljs-type">double</span> paraValue)</span> &#123;<br>        outMaps[recordInBatch][paraMapNo][paraX][paraY] = paraValue;<br>    &#125;<span class="hljs-comment">// Of setMapValue</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set values of the whole map.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMapValue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">double</span>[][] paraOutMatrix)</span> &#123;<br>        outMaps[recordInBatch][paraMapNo] = paraOutMatrix;<br>    &#125;<span class="hljs-comment">// Of setMapValue</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Size <span class="hljs-title function_">getMapSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mapSize;<br>    &#125;<span class="hljs-comment">// Of getMapSize</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMapSize</span><span class="hljs-params">(Size paraMapSize)</span> &#123;<br>        mapSize = paraMapSize;<br>    &#125;<span class="hljs-comment">// Of setMapSize</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> LayerTypeEnum <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<span class="hljs-comment">// Of getType</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOutMapNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> outMapNum;<br>    &#125;<span class="hljs-comment">// Of getOutMapNum</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOutMapNum</span><span class="hljs-params">(<span class="hljs-type">int</span> paraOutMapNum)</span> &#123;<br>        outMapNum = paraOutMapNum;<br>    &#125;<span class="hljs-comment">// Of setOutMapNum</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Size <span class="hljs-title function_">getKernelSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> kernelSize;<br>    &#125;<span class="hljs-comment">// Of getKernelSize</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Size <span class="hljs-title function_">getScaleSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> scaleSize;<br>    &#125;<span class="hljs-comment">// Of getScaleSize</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] getMap(<span class="hljs-type">int</span> paraIndex) &#123;<br>        <span class="hljs-keyword">return</span> outMaps[recordInBatch][paraIndex];<br>    &#125;<span class="hljs-comment">// Of getMap</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] getKernel(<span class="hljs-type">int</span> paraFrontMap, <span class="hljs-type">int</span> paraOutMap) &#123;<br>        <span class="hljs-keyword">return</span> kernel[paraFrontMap][paraOutMap];<br>    &#125;<span class="hljs-comment">// Of getKernel</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter. Set one error.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setError</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">int</span> paraMapX, <span class="hljs-type">int</span> paraMapY, <span class="hljs-type">double</span> paraValue)</span> &#123;<br>        errors[recordInBatch][paraMapNo][paraMapX][paraMapY] = paraValue;<br>    &#125;<span class="hljs-comment">// Of setError</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter. Set one error matrix.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setError</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">double</span>[][] paraMatrix)</span> &#123;<br>        errors[recordInBatch][paraMapNo] = paraMatrix;<br>    &#125;<span class="hljs-comment">// Of setError</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter. Get one error matrix.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] getError(<span class="hljs-type">int</span> paraMapNo) &#123;<br>        <span class="hljs-keyword">return</span> errors[recordInBatch][paraMapNo];<br>    &#125;<span class="hljs-comment">// Of getError</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter. Get the whole error tensor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][][][] getErrors() &#123;<br>        <span class="hljs-keyword">return</span> errors;<br>    &#125;<span class="hljs-comment">// Of getErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter. Set one kernel.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKernel</span><span class="hljs-params">(<span class="hljs-type">int</span> paraLastMapNo, <span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">double</span>[][] paraKernel)</span> &#123;<br>        kernel[paraLastMapNo][paraMapNo] = paraKernel;<br>    &#125;<span class="hljs-comment">// Of setKernel</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBias</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo)</span> &#123;<br>        <span class="hljs-keyword">return</span> bias[paraMapNo];<br>    &#125;<span class="hljs-comment">// Of getBias</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBias</span><span class="hljs-params">(<span class="hljs-type">int</span> paraMapNo, <span class="hljs-type">double</span> paraValue)</span> &#123;<br>        bias[paraMapNo] = paraValue;<br>    &#125;<span class="hljs-comment">// Of setBias</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][][][] getMaps() &#123;<br>        <span class="hljs-keyword">return</span> outMaps;<br>    &#125;<span class="hljs-comment">// Of getMaps</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] getError(<span class="hljs-type">int</span> paraRecordId, <span class="hljs-type">int</span> paraMapNo) &#123;<br>        <span class="hljs-keyword">return</span> errors[paraRecordId][paraMapNo];<br>    &#125;<span class="hljs-comment">// Of getError</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] getMap(<span class="hljs-type">int</span> paraRecordId, <span class="hljs-type">int</span> paraMapNo) &#123;<br>        <span class="hljs-keyword">return</span> outMaps[paraRecordId][paraMapNo];<br>    &#125;<span class="hljs-comment">// Of getMap</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getClassNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> classNum;<br>    &#125;<span class="hljs-comment">// Of getClassNum</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Getter. Get the whole kernel tensor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][][][] getKernel() &#123;<br>        <span class="hljs-keyword">return</span> kernel;<br>    &#125; <span class="hljs-comment">// Of getKernel</span><br>&#125;<span class="hljs-comment">//Of class CnnLayer</span><br></code></pre></td></tr></table></figure><p>在 CnnLayer 类上再封装一层, 用于更加简便地创建神经网络中的各层.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CnnLayer builder.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LayerBuilder</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Layers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;CnnLayer&gt; layers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LayerBuilder</span><span class="hljs-params">()</span> &#123;<br>        layers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The second constructor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LayerBuilder</span><span class="hljs-params">(CnnLayer paraLayer)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<br>        layers.add(paraLayer);<br>    &#125;<span class="hljs-comment">// Of the second constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Add a layer.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLayer The new layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLayer</span><span class="hljs-params">(CnnLayer paraLayer)</span> &#123;<br>        layers.add(paraLayer);<br>    &#125;<span class="hljs-comment">// Of addLayer</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Get the specified layer.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraIndex The index of the layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> CnnLayer <span class="hljs-title function_">getLayer</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>        <span class="hljs-keyword">if</span> (paraIndex &gt;= layers.size()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;CnnLayer &quot;</span> + paraIndex + <span class="hljs-string">&quot; is out of range: &quot;</span> + layers.size() + <span class="hljs-string">&quot;.&quot;</span>);<br>        &#125;<span class="hljs-comment">//Of if</span><br><br>        <span class="hljs-keyword">return</span> layers.get(paraIndex);<br>    &#125;<span class="hljs-comment">//Of getLayer</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Get the output layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> CnnLayer <span class="hljs-title function_">getOutputLayer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> layers.get(layers.size() - <span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-comment">//Of getOutputLayer</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Get the number of layers.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumLayers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> layers.size();<br>    &#125;<span class="hljs-comment">//Of getNumLayers</span><br>&#125; <span class="hljs-comment">//Of class LayerBuilder</span><br></code></pre></td></tr></table></figure><h2 id="五神经网络的搭建">五、神经网络的搭建</h2><h3 id="正向传播">1. 正向传播</h3><p>正向传播的基本内容在之前已经提到了, 这里简述一下.</p><p>一张图片通过卷积核得到特征图, 然后特征图通过自己选择的池化层进行池化,最后使用激活函数对池化层进行激活,并把激活后的输出做为下一个卷积层的输入.</p><p>在重复卷积、池化、激活后进入全连接层. 全连接层中也有一个卷积过程,他是把 <span class="math inline">\(m \times n\)</span> 的特征图转换为<span class="math inline">\(1 \times n\)</span> 的向量, 然后这个向量通过<span class="math inline">\(Softmax\)</span> 函数进行处理并归一化.这时候这个向量中最大值的下标就表示是最有可能的类别的下标.</p><h3 id="反向传播">2. 反向传播</h3><p>反向传播这是一个老生常谈的问题了, 因为开始的卷积核是随机的,所以就需要利用损失函数找到最佳的卷积核.</p><p>反向传播最开始更新的是全连接层, 它的反向传播和 ANN 网络中类似,就是更新其中的权值.</p><p>然后就是池化层, 池化层的权值更新是最简单的. 以最大池化举例,假设池化后的值为 6, 反向传播得到的误差为 +1,反向传播回去得到池化前的值就是 <span class="math inline">\(6 + 1 =7\)</span>.</p><p>最麻烦的就是卷积层, 其中的公式推导我还是没有太弄清楚.大致理解就是从二维出发得到了一个二维的公式,然后将二维推广到神经网络中的多维.</p><p><a href="https://zhuanlan.zhihu.com/p/61898234">知乎文章:卷积神经网络(CNN)反向传播算法推导</a> 有详细的推导和解释.</p><h3 id="具体代码-3">4. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cnn;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> cnn.Dataset.Instance;<br><span class="hljs-keyword">import</span> cnn.MathUtils.Operator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CNN.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FullCnn</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The value changes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">ALPHA</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.85</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A constant.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">LAMBDA</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Manage layers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LayerBuilder layerBuilder;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Train using a number of instances simultaneously.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> batchSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Divide the batch size with the given value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Operator divideBatchSize;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Multiply alpha with the given value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Operator multiplyAlpha;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Multiply lambda and alpha with the given value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Operator multiplyLambda;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FullCnn</span><span class="hljs-params">(LayerBuilder paraLayerBuilder, <span class="hljs-type">int</span> paraBatchSize)</span> &#123;<br>        layerBuilder = paraLayerBuilder;<br>        batchSize = paraBatchSize;<br>        setup();<br>        initOperators();<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Initialize operators using temporary classes.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initOperators</span><span class="hljs-params">()</span> &#123;<br>        divideBatchSize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7424011281732651055L</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>                <span class="hljs-keyword">return</span> value / batchSize;<br>            &#125;<span class="hljs-comment">// Of process</span><br>        &#125;;<br><br>        multiplyAlpha = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">5761368499808006552L</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>                <span class="hljs-keyword">return</span> value * ALPHA;<br>            &#125;<span class="hljs-comment">// Of process</span><br>        &#125;;<br><br>        multiplyLambda = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4499087728362870577L</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>                <span class="hljs-keyword">return</span> value * (<span class="hljs-number">1</span> - LAMBDA * ALPHA);<br>            &#125;<span class="hljs-comment">// Of process</span><br>        &#125;;<br>    &#125;<span class="hljs-comment">// Of initOperators</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setup according to the layer builder.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempInputLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(<span class="hljs-number">0</span>);<br>        tempInputLayer.initOutMaps(batchSize);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; layerBuilder.getNumLayers(); i++) &#123;<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(i);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempFrontLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(i - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempFrontMapNum</span> <span class="hljs-operator">=</span> tempFrontLayer.getOutMapNum();<br>            <span class="hljs-keyword">switch</span> (tempLayer.getType()) &#123;<br>                <span class="hljs-keyword">case</span> INPUT:<br>                    <span class="hljs-comment">// Should not be input. Maybe an error should be thrown out.</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> CONVOLUTION:<br>                    tempLayer.setMapSize(<br>                            tempFrontLayer.getMapSize().subtract(tempLayer.getKernelSize(), <span class="hljs-number">1</span>));<br>                    tempLayer.initKernel(tempFrontMapNum);<br>                    tempLayer.initBias();<br>                    tempLayer.initErrors(batchSize);<br>                    tempLayer.initOutMaps(batchSize);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> SAMPLING:<br>                    tempLayer.setOutMapNum(tempFrontMapNum);<br>                    tempLayer.setMapSize(tempFrontLayer.getMapSize().divide(tempLayer.getScaleSize()));<br>                    tempLayer.initErrors(batchSize);<br>                    tempLayer.initOutMaps(batchSize);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> OUTPUT:<br>                    tempLayer.initOutputKernel(tempFrontMapNum, tempFrontLayer.getMapSize());<br>                    tempLayer.initBias();<br>                    tempLayer.initErrors(batchSize);<br>                    tempLayer.initOutMaps(batchSize);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">// Of switch</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of setup</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Forward computing.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forward</span><span class="hljs-params">(Instance instance)</span> &#123;<br>        setInputLayerOutput(instance);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; l &lt; layerBuilder.getNumLayers(); l++) &#123;<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempCurrentLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempLastLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (tempCurrentLayer.getType()) &#123;<br>                <span class="hljs-keyword">case</span> CONVOLUTION:<br>                <span class="hljs-keyword">case</span> OUTPUT:<br>                    setConvolutionOutput(tempCurrentLayer, tempLastLayer);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> SAMPLING:<br>                    setSampOutput(tempCurrentLayer, tempLastLayer);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">// Of switch</span><br>        &#125; <span class="hljs-comment">// Of for l</span><br>    &#125;<span class="hljs-comment">// Of forward</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set the in layer output. Given a record, copy its values to the input map.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInputLayerOutput</span><span class="hljs-params">(Instance paraRecord)</span> &#123;<br>        <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempInputLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">Size</span> <span class="hljs-variable">tempMapSize</span> <span class="hljs-operator">=</span> tempInputLayer.getMapSize();<br>        <span class="hljs-type">double</span>[] tempAttributes = paraRecord.getAttributes();<br>        <span class="hljs-keyword">if</span> (tempAttributes.length != tempMapSize.width * tempMapSize.height)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;input record does not match the map size.&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempMapSize.width; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempMapSize.height; j++) &#123;<br>                tempInputLayer.setMapValue(<span class="hljs-number">0</span>, i, j, tempAttributes[tempMapSize.height * i + j]);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of setInputLayerOutput</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Compute the convolution output according to the output of the last layer.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLastLayer the last layer.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLayer     the current layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConvolutionOutput</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, <span class="hljs-keyword">final</span> CnnLayer paraLastLayer)</span> &#123;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">lastMapNum</span> <span class="hljs-operator">=</span> paraLastLayer.getOutMapNum();<br><br>        <span class="hljs-comment">// Attention: paraLayer.getOutMapNum() may not be right.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraLayer.getOutMapNum(); j++) &#123;<br>            <span class="hljs-type">double</span>[][] tempSumMatrix = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; lastMapNum; i++) &#123;<br>                <span class="hljs-type">double</span>[][] lastMap = paraLastLayer.getMap(i);<br>                <span class="hljs-type">double</span>[][] kernel = paraLayer.getKernel(i, j);<br>                <span class="hljs-keyword">if</span> (tempSumMatrix == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// On the first map.</span><br>                    tempSumMatrix = MathUtils.convnValid(lastMap, kernel);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Sum up convolution maps</span><br>                    tempSumMatrix = MathUtils.matrixOp(MathUtils.convnValid(lastMap, kernel),<br>                            tempSumMatrix, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, MathUtils.plus);<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Activation.</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">bias</span> <span class="hljs-operator">=</span> paraLayer.getBias(j);<br>            tempSumMatrix = MathUtils.matrixOp(tempSumMatrix, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operator</span>() &#123;<br>                <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">2469461972825890810L</span>;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> &#123;<br>                    <span class="hljs-keyword">return</span> MathUtils.sigmoid(value + bias);<br>                &#125;<br><br>            &#125;);<br><br>            paraLayer.setMapValue(j, tempSumMatrix);<br>        &#125; <span class="hljs-comment">// Of for j</span><br>    &#125;<span class="hljs-comment">// Of setConvolutionOutput</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Compute the convolution output according to the output of the last layer.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLastLayer the last layer.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLayer     the current layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSampOutput</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, <span class="hljs-keyword">final</span> CnnLayer paraLastLayer)</span> &#123;<br>        <span class="hljs-comment">// int tempLastMapNum = paraLastLayer.getOutMapNum();</span><br><br>        <span class="hljs-comment">// Attention: paraLayer.outMapNum may not be right.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLayer.outMapNum; i++) &#123;<br>            <span class="hljs-type">double</span>[][] lastMap = paraLastLayer.getMap(i);<br>            <span class="hljs-type">Size</span> <span class="hljs-variable">scaleSize</span> <span class="hljs-operator">=</span> paraLayer.getScaleSize();<br>            <span class="hljs-type">double</span>[][] sampMatrix = MathUtils.scaleMatrix(lastMap, scaleSize);<br>            paraLayer.setMapValue(i, sampMatrix);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of setSampOutput</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Train the cnn.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">(Dataset paraDataset, <span class="hljs-type">int</span> paraRounds)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; t &lt; paraRounds; t++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Iteration: &quot;</span> + t);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempNumEpochs</span> <span class="hljs-operator">=</span> paraDataset.size() / batchSize;<br>            <span class="hljs-keyword">if</span> (paraDataset.size() % batchSize != <span class="hljs-number">0</span>)<br>                tempNumEpochs++;<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempNumCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumEpochs; i++) &#123;<br>                <span class="hljs-type">int</span>[] tempRandomPerm = MathUtils.randomPerm(paraDataset.size(), batchSize);<br>                CnnLayer.prepareForNewBatch();<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index : tempRandomPerm) &#123;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">isRight</span> <span class="hljs-operator">=</span> train(paraDataset.getInstance(index));<br>                    <span class="hljs-keyword">if</span> (isRight)<br>                        tempNumCorrect++;<br>                    tempCount++;<br>                    CnnLayer.prepareForNewRecord();<br>                &#125; <span class="hljs-comment">// Of for index</span><br><br>                updateParameters();<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>) &#123;<br>                    System.out.print(<span class="hljs-string">&quot;..&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">50</span> &gt; tempNumEpochs)<br>                        System.out.println();<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span> * tempNumCorrect / tempCount;<br>            <span class="hljs-keyword">if</span> (t % <span class="hljs-number">10</span> == <span class="hljs-number">1</span> &amp;&amp; p &gt; <span class="hljs-number">0.96</span>) &#123;<br>                ALPHA = <span class="hljs-number">0.001</span> + ALPHA * <span class="hljs-number">0.9</span>;<br>                <span class="hljs-comment">// logger.info(&quot;设置 alpha = &#123;&#125;&quot;, ALPHA);</span><br>            &#125; <span class="hljs-comment">// Of iff</span><br>            System.out.println(<span class="hljs-string">&quot;Training precision: &quot;</span> + p);<br>            <span class="hljs-comment">// logger.info(&quot;计算精度： &#123;&#125;/&#123;&#125;=&#123;&#125;.&quot;, right, count, p);</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Train the cnn with only one record.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRecord The given record.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">train</span><span class="hljs-params">(Instance paraRecord)</span> &#123;<br>        forward(paraRecord);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> backPropagation(paraRecord);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Back-propagation.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRecord The given record.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backPropagation</span><span class="hljs-params">(Instance paraRecord)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> setOutputLayerErrors(paraRecord);<br>        setHiddenLayerErrors();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<span class="hljs-comment">// Of backPropagation</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Update parameters.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateParameters</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; l &lt; layerBuilder.getNumLayers(); l++) &#123;<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">layer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">lastLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">switch</span> (layer.getType()) &#123;<br>                <span class="hljs-keyword">case</span> CONVOLUTION:<br>                <span class="hljs-keyword">case</span> OUTPUT:<br>                    updateKernels(layer, lastLayer);<br>                    updateBias(layer, lastLayer);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">// Of switch</span><br>        &#125; <span class="hljs-comment">// Of for l</span><br>    &#125;<span class="hljs-comment">// Of updateParameters</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Update bias.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBias</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, CnnLayer paraLastLayer)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[][][][] errors = paraLayer.getErrors();<br>        <span class="hljs-comment">// int mapNum = paraLayer.getOutMapNum();</span><br><br>        <span class="hljs-comment">// Attention: getOutMapNum() may not be correct.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraLayer.getOutMapNum(); j++) &#123;<br>            <span class="hljs-type">double</span>[][] error = MathUtils.sum(errors, j);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">deltaBias</span> <span class="hljs-operator">=</span> MathUtils.sum(error) / batchSize;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">bias</span> <span class="hljs-operator">=</span> paraLayer.getBias(j) + ALPHA * deltaBias;<br>            paraLayer.setBias(j, bias);<br>        &#125; <span class="hljs-comment">// Of for j</span><br>    &#125;<span class="hljs-comment">// Of updateBias</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Update kernels.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateKernels</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, <span class="hljs-keyword">final</span> CnnLayer paraLastLayer)</span> &#123;<br>        <span class="hljs-comment">// int mapNum = paraLayer.getOutMapNum();</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempLastMapNum</span> <span class="hljs-operator">=</span> paraLastLayer.getOutMapNum();<br><br>        <span class="hljs-comment">// Attention: getOutMapNum() may not be right</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraLayer.getOutMapNum(); j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempLastMapNum; i++) &#123;<br>                <span class="hljs-type">double</span>[][] tempDeltaKernel = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; r &lt; batchSize; r++) &#123;<br>                    <span class="hljs-type">double</span>[][] error = paraLayer.getError(r, j);<br>                    <span class="hljs-keyword">if</span> (tempDeltaKernel == <span class="hljs-literal">null</span>)<br>                        tempDeltaKernel = MathUtils.convnValid(paraLastLayer.getMap(r, i), error);<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        tempDeltaKernel = MathUtils.matrixOp(<br>                                          MathUtils.convnValid(paraLastLayer.getMap(r, i), error),<br>                                          tempDeltaKernel, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, MathUtils.plus);<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                &#125; <span class="hljs-comment">// Of for r</span><br><br>                tempDeltaKernel = MathUtils.matrixOp(tempDeltaKernel, divideBatchSize);<br><br>                <span class="hljs-type">double</span>[][] kernel = paraLayer.getKernel(i, j);<br>                tempDeltaKernel = MathUtils.matrixOp(kernel, tempDeltaKernel, multiplyLambda, multiplyAlpha, MathUtils.plus);<br>                paraLayer.setKernel(i, j, tempDeltaKernel);<br>            &#125; <span class="hljs-comment">// Of for i</span><br>        &#125; <span class="hljs-comment">// Of for j</span><br>    &#125;<span class="hljs-comment">// Of updateKernels</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set errors of all hidden layers.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHiddenLayerErrors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;setHiddenLayerErrors&quot;);</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> layerBuilder.getNumLayers() - <span class="hljs-number">2</span>; l &gt; <span class="hljs-number">0</span>; l--) &#123;<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">layer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">nextLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(l + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">switch</span> (layer.getType()) &#123;<br>                <span class="hljs-keyword">case</span> SAMPLING:<br>                    setSamplingErrors(layer, nextLayer);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> CONVOLUTION:<br>                    setConvolutionErrors(layer, nextLayer);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">// Of switch</span><br>        &#125; <span class="hljs-comment">// Of for l</span><br>    &#125;<span class="hljs-comment">// Of setHiddenLayerErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set errors of a sampling layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSamplingErrors</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, <span class="hljs-keyword">final</span> CnnLayer paraNextLayer)</span> &#123;<br>        <span class="hljs-comment">// int mapNum = layer.getOutMapNum();</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNextMapNum</span> <span class="hljs-operator">=</span> paraNextLayer.getOutMapNum();<br>        <span class="hljs-comment">// Attention: getOutMapNum() may not be correct</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLayer.getOutMapNum(); i++) &#123;<br>            <span class="hljs-type">double</span>[][] sum = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempNextMapNum; j++) &#123;<br>                <span class="hljs-type">double</span>[][] nextError = paraNextLayer.getError(j);<br>                <span class="hljs-type">double</span>[][] kernel = paraNextLayer.getKernel(i, j);<br>                <span class="hljs-keyword">if</span> (sum == <span class="hljs-literal">null</span>) &#123;<br>                    sum = MathUtils.convnFull(nextError, MathUtils.rot180(kernel));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sum = MathUtils.matrixOp(<br>                            MathUtils.convnFull(nextError, MathUtils.rot180(kernel)), sum, <span class="hljs-literal">null</span>,<br>                            <span class="hljs-literal">null</span>, MathUtils.plus);<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br>            paraLayer.setError(i, sum);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of setSamplingErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set errors of a sampling layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConvolutionErrors</span><span class="hljs-params">(<span class="hljs-keyword">final</span> CnnLayer paraLayer, <span class="hljs-keyword">final</span> CnnLayer paraNextLayer)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;setConvErrors&quot;);</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; paraLayer.getOutMapNum(); m++) &#123;<br>            <span class="hljs-type">Size</span> <span class="hljs-variable">tempScale</span> <span class="hljs-operator">=</span> paraNextLayer.getScaleSize();<br>            <span class="hljs-type">double</span>[][] tempNextLayerErrors = paraNextLayer.getError(m);<br>            <span class="hljs-type">double</span>[][] tempMap = paraLayer.getMap(m);<br>            <span class="hljs-type">double</span>[][] tempOutMatrix = MathUtils.matrixOp(tempMap, MathUtils.cloneMatrix(tempMap),<br>                    <span class="hljs-literal">null</span>, MathUtils.one_value, MathUtils.multiply);<br>            tempOutMatrix = MathUtils.matrixOp(tempOutMatrix,<br>                    MathUtils.kronecker(tempNextLayerErrors, tempScale), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>,<br>                    MathUtils.multiply);<br>            paraLayer.setError(m, tempOutMatrix);<br>        &#125; <span class="hljs-comment">// Of for m</span><br>    &#125;<span class="hljs-comment">// Of setConvolutionErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Set errors of a sampling layer.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setOutputLayerErrors</span><span class="hljs-params">(Instance paraRecord)</span> &#123;<br>        <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempOutputLayer</span> <span class="hljs-operator">=</span> layerBuilder.getOutputLayer();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMapNum</span> <span class="hljs-operator">=</span> tempOutputLayer.getOutMapNum();<br><br>        <span class="hljs-type">double</span>[] tempTarget = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempMapNum];<br>        <span class="hljs-type">double</span>[] tempOutMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempMapNum];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; tempMapNum; m++) &#123;<br>            <span class="hljs-type">double</span>[][] outmap = tempOutputLayer.getMap(m);<br>            tempOutMaps[m] = outmap[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>        &#125; <span class="hljs-comment">// Of for m</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempLabel</span> <span class="hljs-operator">=</span> paraRecord.getLabel().intValue();<br>        tempTarget[tempLabel] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; tempMapNum; m++) &#123;<br>            tempOutputLayer.setError(m, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                    tempOutMaps[m] * (<span class="hljs-number">1</span> - tempOutMaps[m]) * (tempTarget[m] - tempOutMaps[m]));<br>        &#125; <span class="hljs-comment">// Of for m</span><br><br>        <span class="hljs-type">return</span> <span class="hljs-variable">tempLabel</span> <span class="hljs-operator">=</span>= MathUtils.getMaxIndex(tempOutMaps);<br>    &#125;<span class="hljs-comment">// Of setOutputLayerErrors</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Setup the network.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(<span class="hljs-type">int</span> paraBatchSize)</span> &#123;<br>        <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempInputLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(<span class="hljs-number">0</span>);<br>        tempInputLayer.initOutMaps(paraBatchSize);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; layerBuilder.getNumLayers(); i++) &#123;<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(i);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">tempLastLayer</span> <span class="hljs-operator">=</span> layerBuilder.getLayer(i - <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempLastMapNum</span> <span class="hljs-operator">=</span> tempLastLayer.getOutMapNum();<br>            <span class="hljs-keyword">switch</span> (tempLayer.getType()) &#123;<br>                <span class="hljs-keyword">case</span> INPUT:<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> CONVOLUTION:<br>                    tempLayer.setMapSize(<br>                            tempLastLayer.getMapSize().subtract(tempLayer.getKernelSize(), <span class="hljs-number">1</span>));<br>                    tempLayer.initKernel(tempLastMapNum);<br>                    tempLayer.initBias();<br>                    tempLayer.initErrors(paraBatchSize);<br>                    tempLayer.initOutMaps(paraBatchSize);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> SAMPLING:<br>                    tempLayer.setOutMapNum(tempLastMapNum);<br>                    tempLayer.setMapSize(tempLastLayer.getMapSize().divide(tempLayer.getScaleSize()));<br>                    tempLayer.initErrors(paraBatchSize);<br>                    tempLayer.initOutMaps(paraBatchSize);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> OUTPUT:<br>                    tempLayer.initOutputKernel(tempLastMapNum, tempLastLayer.getMapSize());<br>                    tempLayer.initBias();<br>                    tempLayer.initErrors(paraBatchSize);<br>                    tempLayer.initOutMaps(paraBatchSize);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-comment">// Of switch</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of setup</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * Predict for the dataset.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] predict(Dataset paraDataset) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Predicting ... &quot;</span>);<br>        CnnLayer.prepareForNewBatch();<br><br>        <span class="hljs-type">int</span>[] resultPredictions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraDataset.size()];<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><br>        Instance tempRecord;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraDataset.size(); i++) &#123;<br>            tempRecord = paraDataset.getInstance(i);<br>            forward(tempRecord);<br>            <span class="hljs-type">CnnLayer</span> <span class="hljs-variable">outputLayer</span> <span class="hljs-operator">=</span> layerBuilder.getOutputLayer();<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempMapNum</span> <span class="hljs-operator">=</span> outputLayer.getOutMapNum();<br>            <span class="hljs-type">double</span>[] tempOut = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempMapNum];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; tempMapNum; m++) &#123;<br>                <span class="hljs-type">double</span>[][] outmap = outputLayer.getMap(m);<br>                tempOut[m] = outmap[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>            &#125; <span class="hljs-comment">// Of for m</span><br><br>            resultPredictions[i] = MathUtils.getMaxIndex(tempOut);<br>            <span class="hljs-keyword">if</span> (resultPredictions[i] == tempRecord.getLabel().intValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for</span><br><br>        System.out.println(<span class="hljs-string">&quot;Accuracy: &quot;</span> + tempCorrect / paraDataset.size());<br>        <span class="hljs-keyword">return</span> resultPredictions;<br>    &#125;<span class="hljs-comment">// Of predict</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     * The main entrance.</span><br><span class="hljs-comment">     * **********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LayerBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LayerBuilder</span>();<br>        <span class="hljs-comment">// Input layer, the maps are 28*28</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.INPUT, -<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)));<br>        <span class="hljs-comment">// Convolution output has size 24*24, 24=28+1-5</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.CONVOLUTION, <span class="hljs-number">6</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)));<br>        <span class="hljs-comment">// Sampling output has size 12*12,12=24/2</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.SAMPLING, -<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)));<br>        <span class="hljs-comment">// Convolution output has size 8*8, 8=12+1-5</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.CONVOLUTION, <span class="hljs-number">12</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)));<br>        <span class="hljs-comment">// Sampling output has size4×4,4=8/2</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.SAMPLING, -<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Size</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)));<br>        <span class="hljs-comment">// output layer, digits 0 - 9.</span><br>        builder.addLayer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CnnLayer</span>(LayerTypeEnum.OUTPUT, <span class="hljs-number">10</span>, <span class="hljs-literal">null</span>));<br>        <span class="hljs-comment">// Construct the full CNN.</span><br>        <span class="hljs-type">FullCnn</span> <span class="hljs-variable">tempCnn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FullCnn</span>(builder, <span class="hljs-number">10</span>);<br><br>        <span class="hljs-type">Dataset</span> <span class="hljs-variable">tempTrainingSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dataset</span>(<span class="hljs-string">&quot;D:/Work/Data/sampledata/train.format&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-number">784</span>);<br><br>        <span class="hljs-comment">// Train the model.</span><br>        tempCnn.train(tempTrainingSet, <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// tempCnn.predict(tempTrainingSet);</span><br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">//Of class FullCnn</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-2">5. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022529180715.png" /></p><h1 id="总结">总结</h1><p>卷积神经网络理解起来容易,但是实际编写一个框架对我来说就是非常痛苦且困难的事情.</p><p>首先是反向传播时数学公式的推导, 知道梯度下降和矩阵求导,这些也仅仅是在单一的练习题中完成, 当实际运用时就找不到门路.</p><p>再者是代码的编写, 不管是数学的工具类还是矩阵的工具类,尤其是矩阵旋转那部分刚开始看完全不理解.</p><p>要是我们只需要利用公式去编写代码, 想必这些问题就会迎刃而解.偏偏天不遂人愿, 这些都是需要我真真实实去感受、去推导、去实现的.</p><p>路漫漫其修远兮, 吾将上下而求索.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day36</title>
    <link href="/posts/5e008ef5/"/>
    <url>/posts/5e008ef5/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文大多内容来自 <ahref="https://zhuanlan.zhihu.com/p/27908027">知乎文章:卷积神经网络CNN完全指南终极版（一）</a></p><p>我将借用文章中的图片用自己的方式去理解 CNN.</p><p>图片最初来源是 YouTube 上一位博主的视频截图. B 站有视频转载<ahref="https://www.bilibili.com/video/BV1Fx41177ws/">【CNN】Youtube上迄今为止最好的卷积神经网络入门教程</a></p><h1 id="卷积神经网络-理论篇">卷积神经网络 (理论篇)</h1><h2 id="一卷积核">一、卷积核</h2><p>卷积神经网络在现在已经被应用于各个领域, 尤其是图像识别这个方面. 但CNN 真正能做的, 只是起到一个特征提取器的作用.所以诸多看似不同领域的应用, 都是建立在 CNN对图像进行特征提取的基础上进行的.</p><p>说到特征提取, 可能有点抽象. 简单举个例子,比如我现在拿到一堆动物园里面动物的照片, 这时我想找到长颈鹿,我就会去看哪张照片里面哪个动物有长颈这个特征.</p><p>这算是主观上的特征提取, 但在计算机中就不太会这样做.因为计算机哪知道什么叫长颈, 说不定还会把东方明珠塔也看做长颈鹿.如何避免这种情况以后再议, 不过现在总算对特征提取有些感触了.</p><p>那么现在有一张图片如下所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527161445.png" /></p><p>我们要让计算机知道这张图片是 'X' 还是 'O'. 当然不仅仅是这一种 'X',还有一些奇奇怪怪的 'X' 也需要被识别出来.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527161833.png" /></p><p>计算机中对图片的存储是以像素值的方式来存储的,本文中的图片都是黑白图片, 那么对应的像素值就只有两种. 那么就可以用值 1表示白色像素点, 值 -1 表示黑色像素点. 当然用值 0 1 来表示也可以.要是彩色图片就要转为灰度图, 要是色彩是 RGB, 灰度值就是在 (0, 255)中的某个整数.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527162547.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527163214.png" /></p><p>假设上面两张图分别是训练集和测试集,最简单的方式就是逐一对比之间的像素点, 那么这样虽然可以说是识别字符,实际上却是判断两张图片在磁盘中存储内容是否一致了.这种方式是首先被排除的.</p><p>然后我们观察到两张图中实际是有一部分相似的, 可以把这部分叫做特征.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527163923.png" /></p><p>在图中三个同色区域的结构完全一致.所以我们就从全局像素点的匹配转化为了局部像素点的匹配.那么这个局部像素点就有之前所提到的特征提取那味道了.</p><p>那么我们从图中找出几个特征.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527165019.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527165118.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527165052.png" /></p><p>这样就能通过这些特征定位到图片的某个局部图像. 那么这些特征在 CNN中也被称为卷积核.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527165205.png" /></p><h2 id="二卷积运算">二、卷积运算</h2><p>卷积就是卷起来的乘积, 可以理解为累加或叠加 (对连续函数为积分)起来的乘积.</p><p>连续形式:</p><p><span class="math display">\[f(x) * g(x) = \int_{-\infty}^{\infty}f(\tau) \times g(x - \tau) d\tau\tag{1}\]</span></p><p>离散形式:</p><p><span class="math display">\[f[n] * g[n] = \sum_{m=-\infty}^{\infty} f[m] \times g[n-m] \tag{2}\]</span></p><p>不必太过在意这些公式,只需要记住卷积的本质是过滤信息然后得到我们想要的那部分.接下来才是重中之重, 怎么算?</p><p>取一个特征, 再在目标图像中找一个和特征同样大小的像素值集合,二者相同位置的相乘, 最后在矩形方框中这个位置填入相乘的值.具体过程如下图所示.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527173151.png" /></p><p>当计算完成后就会得到下图中右侧的矩形方框.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527173706.png" /></p><p>接下来就是对得到的矩形方框中九个值求平均,得到的均值将作为新图像中一个像素点.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527173814.png" /></p><p>新图像只有一个像素点怎么可以呢, 这时考虑到图片中蓝色方框的位置,要是有不同位置的蓝色方框那么通过卷积运算不就有多个像素点了.正是由于这种想法, 我们就把这个蓝色方框叫做窗口.</p><p>窗口的起始位置是在图像的左上角</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527174458.png" /></p><p>当进行完当前的运算后, 窗口就会发生移动. 涉及移动,自然就要考虑移动的方向和快慢, 方向先是自左向右, 再是自上向下,快慢程度叫做步长.</p><p>比如若步长为 1, 就往右边移动一个像素点,当不能右移时就回到最左边并向下移动一个像素点.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527174857.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527174914.png" /></p><p>当我们对整个图像进行处理后就会得到这样一个图像.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527174945.png" /></p><p>其中的值, 越接近为 1 表示对应位置和特征的匹配越完整, 越是接近 -1,表示对应位置和特征的反面匹配越完整, 而值接近 0的表示对应位置没有任何匹配或者说没有什么关联.</p><h2 id="三非线性激活层">三、非线性激活层</h2><p>在神经网络中用到最多的非线性激活函数是 Relu 函数,它的公式定义如下：</p><p><span class="math display">\[f(x)=max(0,x)\]</span></p><p>这个函数的输出是, 保留大于等于 0 的值, 其余所有小于 0的数值直接改写为 0.</p><p>为什么要这么做呢? 上面说到, 卷积后产生的特征图中的值, 越靠近 1表示与该特征越关联, 越靠近 -1 表示越不关联, 而我们进行特征提取时,为了使得数据更少, 操作更方便, 就直接舍弃掉那些不相关联的数据.</p><p>那么之前通过卷积运算得到的图像进行处理后就会得到以下图像.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527175559.png" /></p><h2 id="四池化层">四、池化层</h2><p>卷积操作后, 我们得到了一张张有着不同值的特征图,尽管数据量比原图少了很多, 但还是过于庞大(比较深度学习动不动就几十万张训练图片),因此接下来的池化操作就可以发挥作用了, 它最大的目标就是减少数据量.</p><p>池化分为两种, Max Pooling 最大池化、Average Pooling 平均池化.顾名思义, 最大池化就是取最大值, 平均池化就是取平均值.</p><p>拿最大池化举例：选择池化尺寸为 2x2, 因为选定一个 2x2 的窗口,在其内选出最大值更新进新的特征图.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527181548.png" /></p><p>窗口滑动和之前做卷积运算时一样, 这里设置步长为 2.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527181637.png" /></p><p>在做完所有操作后就能得到一个新的特征图.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527181746.png" /></p><p>很明显地可以发现相比起之前的图缩小了很大一部分.</p><p>因为最大池化保留了每一个小块内的最大值,所以它相当于保留了这一块最佳匹配结果 (因为值越接近1表示匹配越好).这也就意味着它不会具体关注窗口内到底是哪一个地方匹配了,而只关注是不是有某个地方匹配上了. 这也就能够看出, CNN能够发现图像中是否具有某种特征, 而不用在意到底在哪里具有这种特征.这也就能够帮助解决之前提到的计算机逐一像素匹配的死板做法.</p><h2 id="五全连接层">五、全连接层</h2><p>在之前了解了 CNN 的卷积层、池化层和激活层.整个处理流程如下图所示.</p><p>我们通过三个不同的卷积核得到了不同的三个特征图.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527202524.png" /></p><p>但是光凭这些还是不能识别出图片中的字符是什么, 这就需要提到 CNN的两个精髓, 局部连接和参数共享.</p><p>说局部连接前先说全连接, 之前所学的 BP 神经网络就是全连接,这一层的每一个节点都会指向下一层的同一个节点.下一层有多少个节点就会进行这样的操作多少次. 例如, 输入层有 10 个节点,隐藏层有 3 个节点, 那么两层之间就应该有 <span class="math inline">\(10\times 3\)</span> 条代表权值的线.</p><p>反观 CNN 要是采用全连接就是要对每一个像素点建立一个节点,而不是人为制造一个窗口. 这样的形式就是局部连接,层与层之间联系的最小单位就是窗口的大小.参数共享就是指窗口滑动的过程.</p><p>之前一直在说识别图像, 其实这个表达存在问题. 因为字符是有限的,所以我们解决的问题其实是分类问题. 正如我们发现了外星人的语言文字,我们不能准确用外星语言说出来,但是我们可以说这个像字母表中的某个字母.</p><p>我们对结果进行统计分析后可判断这张图片里的字母为 X.这里的统计分析实际上是对所得到的特征表进行一个整合,在之前这些特征表相当于图中的碎片,在这一步我们就是要把碎片拼接起来形成一个值.这个值的大小就代表了图片中的字符属于哪个类别.</p><p>得到这个值归根结底是需要一个激活函数, 采用 <spanclass="math inline">\(Softmax\)</span> 函数.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022527204737.png" /></p><h2 id="六训练和优化">六、训练和优化</h2><p>可以看出整个算法的关键在于卷积核,有几个卷积核就表示需要提取到几个特征表.</p><p>在全文中对于卷积核采用的是直接取得原始图像中的一部分,这样是有失偏颇的. 因为我们对图像的认识有了一个直觉性的判断,在实际训练中采用的还是对卷积核随机化.</p><p>和矩阵分解以及 BP 神经网络一样, CNN 采用的也是随机那个关键性的数据.那么要使得模型的准确性高,和之前学过的算法一样也要采用梯度下降的方式.</p><p>具体内容就在代码篇进行详细的解释.</p><h1 id="总结">总结</h1><p>开始写文章的时候, 总觉得 CNN 对图像的处理是将图像进行 "马赛克" 化,就像图片压缩算法那样, 将一个像素点的颜色延伸到周围,最后就感觉图像就成为了一个又一个的小方块集合,但是我们还是能辨认出图像表达的意思.</p><p>写完文章后发现, CNN 其实更像是在 "拼拼图". 例如我们要拼一只猫,我们会找它的眼睛、耳朵和尾巴等具有代表性的东西,这些东西在算法中就是得到的特征图,但是怎么区别眼睛、耳朵和尾巴呢？和拼猫一样,总有小的碎片能够拼成眼睛、耳朵和尾巴,这些就类似算法上一层的到的特征图.</p><p>"马赛克" 的思想是从整体到局部, 可能有效但不能被计算机采纳. 而"拼拼图" 的思想是从局部到整体, 将混乱整理为有序.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day35</title>
    <link href="/posts/c709df4f/"/>
    <url>/posts/c709df4f/</url>
    
    <content type="html"><![CDATA[<h1 id="bp-神经网络">BP 神经网络</h1><h2 id="一前言">一、前言</h2><p>神经网络顾名思义是利用类似生物神经元的结构来完成数据处理的任务,进而实现分类或者识别的功能.</p><p>生物神经网络处理的是电信号, 处理的基本单元就叫做神经元, 如下 图1所示.</p><img src="https://img.omnitrix.top/MDImage/img/2022525102120.png" /><center>图 1. 生物神经元</center><p>一个神经元的突触与其他一个或者多个神经元的树突相连接,以此来传递电信号. 数以亿计的神经元相互连接就构成了神经网络,也被叫做生物神经网络.</p><p>按照这样的思想, 通过代码构建出类似的结构, 这就叫做人工神经网络. BP神经网络不过是人工神经网络的一种, 是因为其中采用了 BP 算法.</p><p>更加详细的解释和内容可以观看视频 <ahref="https://www.bilibili.com/video/BV1bx411M7Zx">https://www.bilibili.com/video/BV1bx411M7Zx</a></p><h2 id="二神经元模型">二、神经元模型</h2><p>在周志华的机器学习一书中提到了一种简单但是非常经典的模型, 就是 "M-P神经元模型", 如下 图2 所示.</p><img src="https://img.omnitrix.top/MDImage/img/2022525110145.png" /><center>图 2. M-P 神经元模型</center><p>在这个模型中, 神经元接收到来自 <span class="math inline">\(n\)</span>个其他神经元传递过来的输入信号, 这些输入信号通过带权重的连接进行传递,神经元接收到的总输入将与神经元的阈值进行比较,然后通过激活函数处理以产生神经元的输出.</p><p>激活函数和其他的函数并无差别. 作为函数,我们通过上面的图就已经了解到了函数的输入. 此时函数的输出就只有一个值,这个值根据不同的激活函数有不同的表示.</p><p>最简单的激活函数跃迁函数 <span class="math inline">\(Sgn\)</span>,其表达式如下:</p><p><span class="math display">\[sgn(x) = \left\{\begin{array}{c}    1,\ x \ge 0; \\    0,\ x &lt; 0;\end{array}\right. \tag{1}\]</span></p><p>这就好像一种非黑即白的思想,当然对于函数图像来说自然也就是不平滑和不连续.所以在神经网络中常用的是另一个激活函数 <spanclass="math inline">\(Sigmoid\)</span>, 其表达式如下.</p><p><span class="math display">\[sigmoid(x) = \frac{1}{1+e^{-x}} \tag{2}\]</span></p><p>该函数输出值的范围在 <span class="math inline">\((0,1)\)</span> 之间,函数图像平滑且连续. 并且这个函数的导数为: <span class="math display">\[sigmoid(x)&#39; =\frac{1}{1+e^{-x}}(1-\frac{1}{1+e^{-x}})=sigmoid(x)(1-sigmoid(x))\tag{3}\]</span></p><h2 id="三bp-神经网络机制">三、BP 神经网络机制</h2><p>BP神经网络是一种多层前馈神经网络, 主要特点是信号前向传递,误差反向传播.</p><p>在前向传递中, 输入信号从输入层经隐含层逐层处理, 直至输出层.每一层的神经元状态只影响下一层神经元状态.</p><p>如果输出层得不到期望输出, 则转入反向传播,根据预测误差调整网络权值和阈值, 从而使 BP神经网络预测输出不断逼近期望输出.</p><p>单隐藏层 BP 神经网络的拓扑结构如下 图3 所示:</p><img src="https://img.omnitrix.top/MDImage/img/2022525152035.png" /><center>图 3. 单隐藏层 BP 神经网络拓扑结构</center><h3 id="前向-forward-预测">1. 前向 forward 预测</h3><p>以上图为例, 输入层有 <span class="math inline">\(n\)</span> 个节点,隐藏层有 <span class="math inline">\(q\)</span> 各节点, 输出层有 <spanclass="math inline">\(j\)</span> 个节点. 输入层和隐藏层间的权重为 <spanclass="math inline">\(V\)</span>, 隐藏层与输出层的权重为 <spanclass="math inline">\(W\)</span>, 输入变量为 <spanclass="math inline">\(X\)</span></p><p>则隐藏层的输出为: <span class="math display">\[Z_k = f_1(\sum_{i=1}^{n}V_{ki}X_i), \ k = 1,\dots,q \tag{4}\]</span></p><p>输出层的输出为: <span class="math display">\[O_l = f_2(\sum_{k=1}^{q}W_{lk}Z_k), \ l = 1,\dots,j \tag{5}\]</span></p><p>输出层有几个节点就代表有几个类别, 哪个节点的输出值大就判断为哪类.</p><h3 id="后向-backpropagation-调整权重">2. 后向 backpropagation调整权重</h3><p>虽然在输出层说过谁的输出值大就归到哪一类,但是输出结果往往不尽人意.</p><p>例如有三个类别 A B C, 有个物品是 A 类, 用三元组表示输出就应该是[1,0,0]. 可实际结果却是 [0.3,0.5,0.6], 错误就是 [0.7,-0.5,-0.6].</p><p>为了缓解这种问题的出现,所以就需要对与输出层相连的隐藏层进行一个问责机制,因为是隐藏层的输入导致了最后的输出.由此问题转换为了调节权重进而降低错误偏差. 这是一个函数,很自然的就联想到之前矩阵分解中的梯度下降方法.</p><p>整体来看, 这是一个迭代的过程, 反向地对节点间权重都进行了修改.</p><p><b>误差函数:</b> 假设有 <span class="math inline">\(p\)</span>个输入样本, 则每个输入样本的误差函数为: <span class="math display">\[E_p=\frac{1}{2}\sum_{l=1}^{j}(y_{lp} - y&#39;_{lp})^2 \tag{6}\]</span></p><h3 id="固定网络结构">3. 固定网络结构</h3><p>隐藏层的节点个数是人为设置的, 各个节点之间的权值也是随机生成的.</p><p>对于不同的问题, 存在着不同的节点和权值.</p><h2 id="四具体实现">四、具体实现</h2><h3 id="代码">1. 代码</h3><p>将读取数据和一些工具类函数例如 <spanclass="math inline">\(argmax\)</span>用以获取数组中最大值的下标封装为一个抽象类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ann;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> weka.core.Instances;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * General ANN. Two methods are abstract: forward and backPropagation.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralAnn</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The whole dataset.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of layers. It is counted according to nodes instead of edges.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numLayers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of nodes for each layer, e.g., [3, 4, 6, 2] means that there</span><br><span class="hljs-comment">     * are 3 input nodes (conditional attributes), 2 hidden layers with 4 and 6</span><br><span class="hljs-comment">     * nodes, respectively, and 2 class values (binary classification).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] layerNumNodes;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Momentum coefficient.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> mobp;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Learning rate.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> learningRate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * For random number generation.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename      The arff filename.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLayerNumNodes The number of nodes for each layer (maybe different).</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLearningRate  Learning rate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraMobp          Momentum coefficient.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GeneralAnn</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span>[] paraLayerNumNodes, <span class="hljs-type">double</span> paraLearningRate, <span class="hljs-type">double</span> paraMobp)</span> &#123;<br>        <span class="hljs-comment">// Step 1. Read data.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">tempReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(tempReader);<br>            <span class="hljs-comment">// The last attribute is the decision class.</span><br>            dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>            tempReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error occurred while trying to read &#x27;&quot;</span> + paraFilename + <span class="hljs-string">&quot;&#x27; in GeneralAnn constructor.\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        <span class="hljs-comment">// Step 2. Accept parameters.</span><br>        layerNumNodes = paraLayerNumNodes;<br>        numLayers = layerNumNodes.length;<br>        <span class="hljs-comment">// Adjust if necessary.</span><br>        layerNumNodes[<span class="hljs-number">0</span>] = dataset.numAttributes() - <span class="hljs-number">1</span>;<br>        layerNumNodes[numLayers - <span class="hljs-number">1</span>] = dataset.numClasses();<br>        learningRate = paraLearningRate;<br>        mobp = paraMobp;<br>    &#125;<span class="hljs-comment">//Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Forward prediction.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInput The input data of one instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The data at the output end.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span>[] forward(<span class="hljs-type">double</span>[] paraInput);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Back propagation.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraTarget For 3-class data, it is [0, 0, 1], [0, 1, 0] or [1, 0, 0].</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backPropagation</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraTarget)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Train using the dataset.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span>[] tempInput = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numAttributes() - <span class="hljs-number">1</span>];<br>        <span class="hljs-type">double</span>[] tempTarget = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numClasses()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            <span class="hljs-comment">// Fill the data.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempInput.length; j++) &#123;<br>                tempInput[j] = dataset.instance(i).value(j);<br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-comment">// Fill the class label.</span><br>            Arrays.fill(tempTarget, <span class="hljs-number">0</span>);<br>            tempTarget[(<span class="hljs-type">int</span>) dataset.instance(i).classValue()] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// Train with this instance.</span><br>            forward(tempInput);<br>            backPropagation(tempTarget);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Get the index corresponding to the max value of the array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the index.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">argmax</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraArray)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1e10</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraArray.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempMax &lt; paraArray[i]) &#123;<br>                tempMax = paraArray[i];<br>                resultIndex = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultIndex;<br>    &#125;<span class="hljs-comment">// Of argmax</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Test using the dataset.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The precision.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span>[] tempInput = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numAttributes() - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempNumCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span>[] tempPrediction;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempPredictedClass</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            <span class="hljs-comment">// Fill the data.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempInput.length; j++) &#123;<br>                tempInput[j] = dataset.instance(i).value(j);<br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-comment">// Train with this instance.</span><br>            tempPrediction = forward(tempInput);<br><br>            tempPredictedClass = argmax(tempPrediction);<br>            <span class="hljs-keyword">if</span> (tempPredictedClass == (<span class="hljs-type">int</span>) dataset.instance(i).classValue()) &#123;<br>                tempNumCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Correct: &quot;</span> + tempNumCorrect + <span class="hljs-string">&quot; out of &quot;</span> + dataset.numInstances());<br><br>        <span class="hljs-keyword">return</span> tempNumCorrect / dataset.numInstances();<br>    &#125;<span class="hljs-comment">// Of test</span><br>&#125; <span class="hljs-comment">//Of class GeneralAnn</span><br></code></pre></td></tr></table></figure><p>在进行 forward 时,对输入层和隐藏层之间的加权计算添加了一个偏移值.</p><p>在进行 backPropagation 时, 一个样本只进行一次权重修改.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ann;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Back-propagation neural networks.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleAnn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeneralAnn</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The value of each node that changes during the forward process. The first</span><br><span class="hljs-comment">     * dimension stands for the layer, and the second stands for the node.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] layerNodeValues;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The error on each node that changes during the back-propagation process.</span><br><span class="hljs-comment">     * The first dimension stands for the layer, and the second stands for the</span><br><span class="hljs-comment">     * node.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][] layerNodeErrors;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The weights of edges. The first dimension stands for the layer, the</span><br><span class="hljs-comment">     * second stands for the node index of the layer, and the third dimension</span><br><span class="hljs-comment">     * stands for the node index of the next layer.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][][] edgeWeights;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The change of edge weights. It has the same size as edgeWeights.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[][][] edgeWeightsDelta;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename      The arff filename.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLayerNumNodes The number of nodes for each layer (maybe different).</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLearningRate  Learning rate.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraMobp          Momentum coefficient.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleAnn</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span>[] paraLayerNumNodes, <span class="hljs-type">double</span> paraLearningRate, <span class="hljs-type">double</span> paraMobp)</span> &#123;<br>        <span class="hljs-comment">// Father constructor</span><br>        <span class="hljs-built_in">super</span>(paraFilename, paraLayerNumNodes, paraLearningRate, paraMobp);<br><br>        <span class="hljs-comment">// Step 1. Across layer initialization.</span><br>        layerNodeValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numLayers][];<br>        layerNodeErrors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numLayers][];<br>        edgeWeights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numLayers - <span class="hljs-number">1</span>][][];<br>        edgeWeightsDelta = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numLayers - <span class="hljs-number">1</span>][][];<br><br>        <span class="hljs-comment">// Step 2. Inner layer initialization.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; numLayers; l++) &#123;<br>            layerNodeValues[l] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[layerNumNodes[l]];<br>            layerNodeErrors[l] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[layerNumNodes[l]];<br><br>            <span class="hljs-comment">// One less layer because each edge crosses two layers.</span><br>            <span class="hljs-keyword">if</span> (l + <span class="hljs-number">1</span> == numLayers) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-comment">// of if</span><br><br>            <span class="hljs-comment">// In layerNumNodes[l] + 1, the last one is reserved for the offset.</span><br>            edgeWeights[l] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[layerNumNodes[l] + <span class="hljs-number">1</span>][layerNumNodes[l + <span class="hljs-number">1</span>]];<br>            edgeWeightsDelta[l] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[layerNumNodes[l] + <span class="hljs-number">1</span>][layerNumNodes[l + <span class="hljs-number">1</span>]];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; layerNumNodes[l] + <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; layerNumNodes[l + <span class="hljs-number">1</span>]; i++) &#123;<br>                    <span class="hljs-comment">// Initialize weights.</span><br>                    edgeWeights[l][j][i] = random.nextDouble();<br>                &#125; <span class="hljs-comment">// Of for i</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for l</span><br>    &#125;<span class="hljs-comment">// Of the constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Forward prediction.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInput The input data of one instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The data at the output end.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] forward(<span class="hljs-type">double</span>[] paraInput) &#123;<br>        <span class="hljs-comment">// Initialize the input layer.</span><br>        System.arraycopy(paraInput, <span class="hljs-number">0</span>, layerNodeValues[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, layerNodeValues[<span class="hljs-number">0</span>].length);<br><br>        <span class="hljs-comment">// Calculate the node values of each layer.</span><br>        <span class="hljs-type">double</span> z;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; l &lt; numLayers; l++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; layerNodeValues[l].length; j++) &#123;<br>                <span class="hljs-comment">// Initialize according to the offset, which is always +1</span><br>                z = edgeWeights[l - <span class="hljs-number">1</span>][layerNodeValues[l - <span class="hljs-number">1</span>].length][j];<br>                <span class="hljs-comment">// Weighted sum on all edges for this node.</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; layerNodeValues[l - <span class="hljs-number">1</span>].length; i++) &#123;<br>                    z += edgeWeights[l - <span class="hljs-number">1</span>][i][j] * layerNodeValues[l - <span class="hljs-number">1</span>][i];<br>                &#125; <span class="hljs-comment">// Of for i</span><br><br>                <span class="hljs-comment">// Sigmoid activation.</span><br>                <span class="hljs-comment">// This line should be changed for other activation functions.</span><br>                layerNodeValues[l][j] = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.exp(-z));<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for l</span><br><br>        <span class="hljs-keyword">return</span> layerNodeValues[numLayers - <span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-comment">// Of forward</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Back propagation and change the edge weights.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraTarget For 3-class data, it is [0, 0, 1], [0, 1, 0] or [1, 0, 0].</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backPropagation</span><span class="hljs-params">(<span class="hljs-type">double</span>[] paraTarget)</span> &#123;<br>        <span class="hljs-comment">// Step 1. Initialize the output layer error.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> numLayers - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; layerNodeErrors[l].length; j++) &#123;<br>            layerNodeErrors[l][j] = layerNodeValues[l][j] * (<span class="hljs-number">1</span> - layerNodeValues[l][j]) * (paraTarget[j] - layerNodeValues[l][j]);<br>        &#125; <span class="hljs-comment">// Of for j</span><br><br>        <span class="hljs-comment">// Step 2. Back-propagation even for l == 0</span><br>        <span class="hljs-keyword">while</span> (l &gt; <span class="hljs-number">0</span>) &#123;<br>            l--;<br>            <span class="hljs-comment">// Layer l, for each node.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; layerNumNodes[l]; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>                <span class="hljs-comment">// For each node of the next layer.</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; layerNumNodes[l + <span class="hljs-number">1</span>]; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">0</span>) &#123;<br>                        z += layerNodeErrors[l + <span class="hljs-number">1</span>][i] * edgeWeights[l][j][i];<br>                    &#125; <span class="hljs-comment">// Of if</span><br><br>                    <span class="hljs-comment">// Weight adjusting.</span><br>                    edgeWeightsDelta[l][j][i] = mobp * edgeWeightsDelta[l][j][i] + learningRate * layerNodeErrors[l + <span class="hljs-number">1</span>][i] * layerNodeValues[l][j];<br>                    edgeWeights[l][j][i] += edgeWeightsDelta[l][j][i];<br>                    <span class="hljs-keyword">if</span> (j == layerNumNodes[l] - <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-comment">// Weight adjusting for the offset part.</span><br>                        edgeWeightsDelta[l][j + <span class="hljs-number">1</span>][i] = mobp * edgeWeightsDelta[l][j + <span class="hljs-number">1</span>][i] + learningRate * layerNodeErrors[l + <span class="hljs-number">1</span>][i];<br>                        edgeWeights[l][j + <span class="hljs-number">1</span>][i] += edgeWeightsDelta[l][j + <span class="hljs-number">1</span>][i];<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                &#125; <span class="hljs-comment">// Of for i</span><br><br>                <span class="hljs-comment">// Record the error according to the differential of Sigmoid.</span><br>                <span class="hljs-comment">// This line should be changed for other activation functions.</span><br>                layerNodeErrors[l][j] = layerNodeValues[l][j] * (<span class="hljs-number">1</span> - layerNodeValues[l][j]) * z;<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of while</span><br>    &#125;<span class="hljs-comment">// Of backPropagation</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Test the algorithm.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempLayerNodes = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">SimpleAnn</span> <span class="hljs-variable">tempNetwork</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAnn</span>(<span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>, tempLayerNodes, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.6</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">round</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; round &lt; <span class="hljs-number">5000</span>; round++) &#123;<br>            tempNetwork.train();<br>        &#125; <span class="hljs-comment">// Of for n</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempAccuracy</span> <span class="hljs-operator">=</span> tempNetwork.test();<br>        System.out.println(<span class="hljs-string">&quot;The accuracy is: &quot;</span> + tempAccuracy);<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class SimpleAnn</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">2. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022525171841.png" /></p><h1 id="总结">总结</h1><p>和矩阵分解的思想类似, 通过随机然后再来靠近真实值.实际代码和公式推导还存在存在着一些问题, 尤其是进行后向 backPropagation的权值调整公式. 还是需要多动手推导一下.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>BP</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day34</title>
    <link href="/posts/b00eefd9/"/>
    <url>/posts/b00eefd9/</url>
    
    <content type="html"><![CDATA[<h1 id="矩阵分解">矩阵分解</h1><h2 id="一推荐系统中的矩阵">一、推荐系统中的矩阵</h2><p>对于一个推荐系统,用户和物品之间的关系可以整理为如下这样的一个矩阵.</p><table><thead><tr class="header"><th style="text-align: center;">User-Item</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">......</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">5</td><td style="text-align: center;">4</td><td style="text-align: center;">4.5</td><td style="text-align: center;">?</td><td style="text-align: center;">3.9</td><td style="text-align: center;">......</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">?</td><td style="text-align: center;">4.5</td><td style="text-align: center;">?</td><td style="text-align: center;">4.5</td><td style="text-align: center;">?</td><td style="text-align: center;">......</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">4.5</td><td style="text-align: center;">?</td><td style="text-align: center;">4.4</td><td style="text-align: center;">4</td><td style="text-align: center;">4</td><td style="text-align: center;">......</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">?</td><td style="text-align: center;">4.8</td><td style="text-align: center;">?</td><td style="text-align: center;">?</td><td style="text-align: center;">4.5</td><td style="text-align: center;">......</td></tr><tr class="odd"><td style="text-align: center;">5</td><td style="text-align: center;">4</td><td style="text-align: center;">?</td><td style="text-align: center;">4.5</td><td style="text-align: center;">5</td><td style="text-align: center;">?</td><td style="text-align: center;">......</td></tr><tr class="even"><td style="text-align: center;">......</td><td style="text-align: center;">......</td><td style="text-align: center;">......</td><td style="text-align: center;">......</td><td style="text-align: center;">......</td><td style="text-align: center;">......</td><td style="text-align: center;">......</td></tr></tbody></table><p>矩阵中每一行代表一个用户, 而每一列则代表一个物品.若用户对物品有过评分,则矩阵中处在用户对应的行与物品对应的列交叉的位置表示用户对物品的评分值.矩阵中的问号代表用户对物品未评分. 这个矩阵就叫做User-Item 评分矩阵,这个矩阵中的数在实际统计后大多数现显示为问号.</p><p>推荐系统需要做的事情就是对于任意一个用户, 预测出所有未评分物品的分值,并按分值大小从高到低的顺序推荐将对应的物品推荐给用户.</p><h2 id="二svd-算法">二、SVD 算法</h2><p>传统的推荐方法通过对 User-Item评分矩阵采用基于近邻的协同过滤来发现与用户具有相似偏好的其他用户,进而产生推荐, 也就是之前所写过的 MBR.但这种方法存在着数据稀疏和信息冗余大的缺陷, 当矩阵中评分元素稀疏,以及信息量并非随着向量维度增加而线性增加.</p><p>那么就有人利用线性代数中的奇异值分解,把原来大的评分矩阵分解称小矩阵的乘积.</p><p>对于奇异值分解的描述: 假设矩阵 <span class="math inline">\(M\)</span>是一个 <span class="math inline">\(m \times n\)</span> 的矩阵,则一定存在一个分解 <span class="math inline">\(M = U \SigmaV^{\mathrm{T}}\)</span>, 其中 <span class="math inline">\(U\)</span> 是<span class="math inline">\(m \times m\)</span> 的正交矩阵, <spanclass="math inline">\(V\)</span> 是 <span class="math inline">\(n \timesn\)</span> 的正交矩阵, <span class="math inline">\(\Sigma\)</span> 是<span class="math inline">\(m \times m\)</span> 的对角阵.</p><p><span class="math display">\[M_{m \times n} = U_{m \times m} \ \Sigma_{m \times m} \ V_{n \times n}\]</span></p><p>但是传统奇异值分解不允许矩阵中有空白元素存在,也就是说评分矩阵中不能存在问号. 这对推荐系统来说是不可能做到的.基于这个问题, 所以 Simon Funk 就提出了 <em>Funk-SVD</em> 算法.</p><h2 id="三funk-svd-算法">三、Funk-SVD 算法</h2><p>例如评分矩阵 <span class="math inline">\(M\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 的矩阵, 一共有 <spanclass="math inline">\(m\)</span> 个用户, <spanclass="math inline">\(n\)</span> 个物品. 通过一系列运算将矩阵 <spanclass="math inline">\(M\)</span> 转化为两个矩阵 <spanclass="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span>, 矩阵 <spanclass="math inline">\(U\)</span> 的大小是 <span class="math inline">\(m\times k\)</span>, 矩阵 <span class="math inline">\(Q\)</span> 的大小是<span class="math inline">\(k \times n\)</span>. 式子如下所示:</p><p><span class="math display">\[M_{m \times n} \approx P_{m \times k} Q_{k \times n}\]</span></p><p>因为矩阵 <span class="math inline">\(M\)</span> 中存在未知,我们只是在对这个矩阵进行拟合, 所以是约等于.</p><p>该方法基于这样一个假设: 用户对一个物品的喜爱程度主要由 <spanclass="math inline">\(k\)</span> 个因素决定, <spanclass="math inline">\(P_{ni}\)</span> 表示第 <spanclass="math inline">\(n\)</span> 个用户对第 <spanclass="math inline">\(i\)</span> 个因素的偏好程度, 而 <spanclass="math inline">\(Q_{ix}\)</span> 表示第 <spanclass="math inline">\(x\)</span> 个物品满足第 <spanclass="math inline">\(i\)</span> 个因素的程度, <spanclass="math inline">\(M_{nx}\)</span> 表示用户 <spanclass="math inline">\(n\)</span> 对物品 <spanclass="math inline">\(x\)</span> 最终的喜好程度.</p><p>那么对于原始矩阵中有评分的位置 <spanclass="math inline">\(M_{UI}\)</span> 来说, 其在分解后矩阵中对应的值为:<span class="math display">\[M&#39;_{UI} =  {\textstyle \sum_{k=1}^{K}}P_{U,k} \ Q_{k,I}\]</span></p><p>其中 <span class="math inline">\(U\)</span> 表示用户, <spanclass="math inline">\(I\)</span> 表示物品.</p><p>那么对于整个评分矩阵而言, 总的损失就是: <span class="math display">\[SSE = E^2 = {\textstyle \sum_{U,I}}(M_{U,I} \ - \ M&#39;_{U,I})^2\]</span></p><p>现在的问题就转化为了求在损失 <span class="math inline">\(SSE\)</span>最小时的矩阵 <span class="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span>.</p><h2 id="四随机梯度下降">四、随机梯度下降</h2><p>梯度是一个向量, 表示的是一个函数在该点处沿梯度的方向变化最快,变化率最大, 而梯度下降的方向就是指的负梯度方向. 想象下山的过程,越是陡峭那么下山的速度就会越快 (这个过程不保证生命安全).我们要找的就是类似最快下山这一过程.</p><p>梯度下降需要考虑所有的样本,在求函数的最小值最后会在驻点或者极值点停下来,所以这样的方法只适合凸函数. 例如函数 <spanclass="math inline">\(f(x)=x^2\)</span> 就是一个凸函数, 满足 <spanclass="math inline">\(f(\frac{x_1+x_2}{2}) \le\frac{f(x_1)+f(x_2)}{2}\)</span>. 其图像如下所示:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022523172819.png" /></p><p>在这个函数上做梯度下降总会到达 <spanclass="math inline">\((0,0)\)</span> 这个点,当然这也是这个函数的最小值的点.</p><p>随机梯度下降法主要是用来解决求和形式的优化问题,与上面需要优化的目标函数一致. 其思想也很简单,既然对于求和式中每一项求梯度很麻烦,那么干脆就随机选其中一项计算梯度当作总的梯度来使用.也就是说梯度下降是整体样本, 随机梯度下降是单个样本.</p><p>上面的目标函数为: <span class="math display">\[SSE = E^2 = {\textstyle \sum_{U,I}}(M_{U,I} \ - \ {\textstyle\sum_{k=1}^{K}}P_{U,k} \ Q_{k,I} )^2\]</span></p><p><span class="math inline">\(SSE\)</span> 是关于 <spanclass="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span> 的多元函数, 当随机选定 <spanclass="math inline">\(U\)</span> 和 <spanclass="math inline">\(I\)</span> 后, 需要枚举所有的 <spanclass="math inline">\(k\)</span>, 并且对 <spanclass="math inline">\(P_{U,k}\)</span> 以及 <spanclass="math inline">\(Q_{k,I}\)</span> 求偏导数. <spanclass="math display">\[\frac{\partial}{\partial P_{u,k}}{E_{U,I}}^2 = 2 E_{U,I}\frac{\partialE_{U,I}}{\partial P_{u,k}} = -2E_{U,I}Q_{k,I}\]</span></p><p><span class="math display">\[\frac{\partial}{\partial Q_{k,I}}{E_{U,I}}^2 = 2 E_{U,I}\frac{\partialE_{U,I}}{\partial Q_{k,I}} = -2E_{U,I}P_{U,k}\]</span></p><h2 id="五具体实现">五、具体实现</h2><h3 id="描述">1. 描述</h3><p>生成两个随机矩阵, 这两个随机矩阵就是之前式子中提到的 <spanclass="math inline">\(P\)</span> 和 <spanclass="math inline">\(Q\)</span>. 利用随机梯度下降的公式求出变化的趋势,再乘以一个非常小的变化量. 使用这样的方式对这两个矩阵不断更新.</p><p>代码中并没有达到完全收敛, 而是设定了一个矩阵更新次数的阈值. 并在每500 轮次时输出平均绝对误差和均方根误差, 用于观察收敛的效果.</p><h3 id="代码">2. 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> recommendersystem;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Matrix factorization for recommender systems.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatrixFactorization</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Used to generate random numbers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of users.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numUsers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of items.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numItems;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of ratings.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numRatings;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Training data.</span><br><span class="hljs-comment">     */</span><br>    Triple[] dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A parameter for controlling learning regular.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> alpha;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A parameter for controlling the learning speed.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> lambda;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The low rank of the small matrices.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> rank;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The user matrix U.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[][] userSubspace;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The item matrix V.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[][] itemSubspace;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The lower bound of the rating value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> ratingLowerBound;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The upper bound of the rating value.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> ratingUpperBound;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename   The data filename.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumUsers   The number of users.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumItems   The number of items.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumRatings The number of ratings.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MatrixFactorization</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span> paraNumUsers, <span class="hljs-type">int</span> paraNumItems,</span><br><span class="hljs-params">                               <span class="hljs-type">int</span> paraNumRatings, <span class="hljs-type">double</span> paraRatingLowerBound, <span class="hljs-type">double</span> paraRatingUpperBound)</span> &#123;<br>        numUsers = paraNumUsers;<br>        numItems = paraNumItems;<br>        numRatings = paraNumRatings;<br>        ratingLowerBound = paraRatingLowerBound;<br>        ratingUpperBound = paraRatingUpperBound;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            readData(paraFilename, paraNumUsers, paraNumItems, paraNumRatings);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;File &quot;</span> + paraFilename + <span class="hljs-string">&quot; cannot be read! &quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Set parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRank The given rank.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRank, <span class="hljs-type">double</span> paraAlpha, <span class="hljs-type">double</span> paraLambda)</span> &#123;<br>        rank = paraRank;<br>        alpha = paraAlpha;<br>        lambda = paraLambda;<br>    &#125;<span class="hljs-comment">// Of setParameters</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Read the data from the file.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The given file.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readData</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span> paraNumUsers, <span class="hljs-type">int</span> paraNumItems,</span><br><span class="hljs-params">                         <span class="hljs-type">int</span> paraNumRatings)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(paraFilename);<br>        <span class="hljs-keyword">if</span> (!tempFile.exists()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;File &quot;</span> + paraFilename + <span class="hljs-string">&quot; does not exists.&quot;</span>);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of if</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">tempBufferReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(tempFile));<br><br>        <span class="hljs-comment">// Allocate space.</span><br>        dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triple</span>[paraNumRatings];<br>        String tempString;<br>        String[] tempStringArray;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraNumRatings; i++) &#123;<br>            tempString = tempBufferReader.readLine();<br>            tempStringArray = tempString.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            dataset[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triple</span>(Integer.parseInt(tempStringArray[<span class="hljs-number">0</span>]),<br>                    Integer.parseInt(tempStringArray[<span class="hljs-number">1</span>]), Double.parseDouble(tempStringArray[<span class="hljs-number">2</span>]));<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        tempBufferReader.close();<br>    &#125;<span class="hljs-comment">// Of readData</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Initialize subspaces. Each value is in [0, 1].</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeSubspaces</span><span class="hljs-params">()</span> &#123;<br>        userSubspace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numUsers][rank];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numUsers; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rank; j++) &#123;<br>                userSubspace[i][j] = rand.nextDouble();<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        itemSubspace = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numItems][rank];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numItems; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rank; j++) &#123;<br>                itemSubspace[i][j] = rand.nextDouble();<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of initializeSubspaces</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Predict the rating of the user to the item</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraUser The user index.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">predict</span><span class="hljs-params">(<span class="hljs-type">int</span> paraUser, <span class="hljs-type">int</span> paraItem)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rank; i++) &#123;<br>            <span class="hljs-comment">// The row vector of a user and the column vector of an item</span><br>            resultValue += userSubspace[paraUser][i] * itemSubspace[paraItem][i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">return</span> resultValue;<br>    &#125;<span class="hljs-comment">// Of predict</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Train.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRounds The number of rounds.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRounds)</span> &#123;<br>        initializeSubspaces();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraRounds; i++) &#123;<br>            updateNoRegular();<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// Show the process</span><br>                System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + i);<br>                System.out.println(<span class="hljs-string">&quot;MAE: &quot;</span> + mae());<br>                System.out.println(<span class="hljs-string">&quot;RSME: &quot;</span> + rsme());<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Update sub-spaces using the training data.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNoRegular</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numRatings; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempUserId</span> <span class="hljs-operator">=</span> dataset[i].user;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempItemId</span> <span class="hljs-operator">=</span> dataset[i].item;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempRate</span> <span class="hljs-operator">=</span> dataset[i].rating;<br><br>            <span class="hljs-comment">// Residual</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempResidual</span> <span class="hljs-operator">=</span> tempRate - predict(tempUserId, tempItemId);<br><br>            <span class="hljs-comment">// Update user subspace</span><br>            <span class="hljs-type">double</span> tempValue;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rank; j++) &#123;<br>                tempValue = <span class="hljs-number">2</span> * tempResidual * itemSubspace[tempItemId][j];<br>                userSubspace[tempUserId][j] += alpha * tempValue;<br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-comment">// Update item subspace</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rank; j++) &#123;<br>                tempValue = <span class="hljs-number">2</span> * tempResidual * userSubspace[tempUserId][j];<br><br>                itemSubspace[tempItemId][j] += alpha * tempValue;<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of updateNoRegular</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Compute the RSME.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> RSME of the current factorization.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">rsme</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultRsme</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempTestCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numRatings; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempUserIndex</span> <span class="hljs-operator">=</span> dataset[i].user;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempItemIndex</span> <span class="hljs-operator">=</span> dataset[i].item;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempRate</span> <span class="hljs-operator">=</span> dataset[i].rating;<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempPrediction</span> <span class="hljs-operator">=</span> predict(tempUserIndex, tempItemIndex);<br>            <span class="hljs-comment">// DataInfo.mean_rating;</span><br><br>            <span class="hljs-keyword">if</span> (tempPrediction &lt; ratingLowerBound) &#123;<br>                tempPrediction = ratingLowerBound;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tempPrediction &gt; ratingUpperBound) &#123;<br>                tempPrediction = ratingUpperBound;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempError</span> <span class="hljs-operator">=</span> tempRate - tempPrediction;<br>            resultRsme += tempError * tempError;<br>            tempTestCount++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> Math.sqrt(resultRsme / tempTestCount);<br>    &#125;<span class="hljs-comment">// Of rsme</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Compute the MAE.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> MAE of the current factorization.</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">mae</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultMae</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempTestCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numRatings; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempUserIndex</span> <span class="hljs-operator">=</span> dataset[i].user;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempItemIndex</span> <span class="hljs-operator">=</span> dataset[i].item;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempRate</span> <span class="hljs-operator">=</span> dataset[i].rating;<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempPrediction</span> <span class="hljs-operator">=</span> predict(tempUserIndex, tempItemIndex);<br><br>            <span class="hljs-keyword">if</span> (tempPrediction &lt; ratingLowerBound) &#123;<br>                tempPrediction = ratingLowerBound;<br>            &#125; <span class="hljs-comment">// Of if</span><br>            <span class="hljs-keyword">if</span> (tempPrediction &gt; ratingUpperBound) &#123;<br>                tempPrediction = ratingUpperBound;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempError</span> <span class="hljs-operator">=</span> tempRate - tempPrediction;<br><br>            resultMae += Math.abs(tempError);<br>            tempTestCount++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> (resultMae / tempTestCount);<br>    &#125;<span class="hljs-comment">// Of mae</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     * Test accuracy</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * Out MAE and RSME</span><br><span class="hljs-comment">     * ***********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTrainingTesting</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span> paraNumUsers, <span class="hljs-type">int</span> paraNumItems,</span><br><span class="hljs-params">                                           <span class="hljs-type">int</span> paraNumRatings, <span class="hljs-type">double</span> paraRatingLowerBound, <span class="hljs-type">double</span> paraRatingUpperBound,</span><br><span class="hljs-params">                                           <span class="hljs-type">int</span> paraRounds)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Step 1. read the training and testing data</span><br>            <span class="hljs-type">MatrixFactorization</span> <span class="hljs-variable">tempMF</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatrixFactorization</span>(paraFilename, paraNumUsers,<br>                    paraNumItems, paraNumRatings, paraRatingLowerBound, paraRatingUpperBound);<br><br>            <span class="hljs-comment">// Step 2. read the training and testing data</span><br>            tempMF.setParameters(<span class="hljs-number">5</span>, <span class="hljs-number">0.0001</span>, <span class="hljs-number">0.005</span>);<br><br>            <span class="hljs-comment">// Step 3. update and predict</span><br>            System.out.println(<span class="hljs-string">&quot;Begin Training ! ! !&quot;</span>);<br>            tempMF.train(paraRounds);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempMAE</span> <span class="hljs-operator">=</span> tempMF.mae();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempRSME</span> <span class="hljs-operator">=</span> tempMF.rsme();<br>            System.out.println(<span class="hljs-string">&quot;Finally, MAE = &quot;</span> + tempMAE + <span class="hljs-string">&quot;, RSME = &quot;</span> + tempRSME);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-comment">// Of try</span><br>    &#125;<span class="hljs-comment">// Of testTrainingTesting</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Test this class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        testTrainingTesting(<span class="hljs-string">&quot;D:/Work/sampledata/movielens-943u1682m.txt&quot;</span>, <span class="hljs-number">943</span>, <span class="hljs-number">1682</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2000</span>);<br>    &#125;<span class="hljs-comment">// Of main</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triple</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> user;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> item;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> rating;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ********************</span><br><span class="hljs-comment">         * The constructor.</span><br><span class="hljs-comment">         * ********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triple</span><span class="hljs-params">(<span class="hljs-type">int</span> paraUser, <span class="hljs-type">int</span> paraItem, <span class="hljs-type">double</span> paraRating)</span> &#123;<br>            user = paraUser;<br>            item = paraItem;<br>            rating = paraRating;<br>        &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ********************</span><br><span class="hljs-comment">         * Show me.</span><br><span class="hljs-comment">         * ********************</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> + user + <span class="hljs-string">&quot;, &quot;</span> + item + <span class="hljs-string">&quot;, &quot;</span> + rating;<br>        &#125;<span class="hljs-comment">// Of toString</span><br>    &#125;<span class="hljs-comment">// Of class Triple</span><br>&#125; <span class="hljs-comment">// Of class MatrixFactorization</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022523185357.png" /></p><h1 id="总结">总结</h1><p>随机梯度下降的方法有点像牛顿迭代法求平方根的感觉.然后最神奇的地方还是考虑到隐藏属性这个点,然后依靠随机后再收敛的方法处理, 就不需要考虑用作计算的中间矩阵的各个值.纵使这些值能够得到, 但也免不了中间矩阵有空白出现.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>Matrix Factorization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.3_随机向量</title>
    <link href="/posts/5e39e101/"/>
    <url>/posts/5e39e101/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>这部分将线代和概率两者之间结合起来, 使用矩阵来解决概率方面的问题.</p><p>在概率论中, 用符号 <span class="math inline">\(\omega(\omega \in\Omega)\)</span> 代表基本事件, <span class="math inline">\(A(\in\mathcal{F})\)</span> 为事件, <spanclass="math inline">\(\mathcal{F}\)</span> 是事件的全部, <spanclass="math inline">\(P(A)\)</span> 称为事件的概率.</p><p>在概率空间 <spanclass="math inline">\((\Omega,\mathcal{F},P)\)</span>. 用 <spanclass="math inline">\(L_p=L_p(\Omega,\mathcal{F},P)\)</span>表示随机变量 <span class="math inline">\(\xi = \xi(\omega)\)</span>的空间. 其中 <span class="math inline">\(E \left \{ |\xi|^pdp &lt;\infty \right \}\)</span>, 称 <spanclass="math inline">\(L_p(p&gt;1)\)</span> 为 <spanclass="math inline">\(Banach\)</span> 空间.</p><p>在 <span class="math inline">\(Banach\)</span> 空间中, 有用的是空间<span class="math inline">\(L_2 = L_2(\Omega,\mathcal{F},P)\)</span>.这种空间就是具有有限二阶矩 <span class="math inline">\(E\left \{ |\xi|^2\right \} &lt; \infty\)</span> 的随机变量的 <spanclass="math inline">\(Hilbert\)</span> 空间, 简称为 <spanclass="math inline">\(L_2\)</span> 空间. 由此衍生出 <spanclass="math inline">\(L_2\)</span>理论用于研究向量空间中一阶和二阶统计性质, 解决一维和二维的问题.</p><h1 id="一概率密度函数">一、概率密度函数</h1><p>描述随机向量的统计函数有累计分布函数, 概率密度函数, 均值函数,协方差函数.</p><p>先解决累计分布函数和概率密度函数.</p><h2 id="实随机变量的概率密度函数">1. 实随机变量的概率密度函数</h2><p>现在有一个含有 <span class="math inline">\(m\)</span>个随机变量的实值向量</p><p><span class="math display">\[x(\xi) = [x_1(\xi),x_2(\xi),\dots,x_m(\xi)]^{\mathrm{T}}\]</span></p><p>称为 <span class="math inline">\(m \times 1\)</span> 实随机向量,或者简称随机向量(当维数无关紧要时). 式子中的 <spanclass="math inline">\(\xi\)</span> 表示样本点, 例如它可以是时间 <spanclass="math inline">\(t\)</span> , 角频率 <spanclass="math inline">\(\omega\)</span> 或位置 <spanclass="math inline">\(s\)</span> 等.</p><p>一个随机向量所有元素的联合累积分布函数常用符号 <spanclass="math inline">\(F_x(x_1,x_2,\dots,x_m)\)</span> 表示,联合概率密度函数常用 <spanclass="math inline">\(f_x(x_1,x_2,\dots,x_m)\)</span> 表示. 令 <spanclass="math inline">\(F(x) = F_x(x_1,x_2,\dots,x_m)\)</span> 和 <spanclass="math inline">\(f(x) = f_x(x_1,x_2,\dots,x_m)\)</span>.</p><p>一个随机向量由它的2联合累积分布函数或联合概率密度函数完全描述,一组概率的集合函数</p><p><span class="math display">\[F(x) \overset{def}{=} P \left \{ \xi : x_1(\xi) \le x_1,x_2(\xi) \lex_2,\dots,x_m(\xi) \le x_m\right \}\]</span></p><p>定义为向量 <span class="math inline">\(x_{\xi}\)</span>的联合累积分布函数, 简称分布函数, 式中 <spanclass="math inline">\(x_i\)</span> 为实数.</p><p>随机向量 <span class="math inline">\(x(\xi)\)</span>的（联合）概率密度函数定义为:</p><p><span class="math display">\[\begin{aligned}  f(x) &amp; \overset{def}{=} \lim_{\Delta x_1 \to 0,\dots,\Delta x_m\to 0} \frac{P \left \{ \xi : x_1 &lt; x_1(\xi) \le x_1 + \Deltax_1,\dots,x_m &lt; x_m(\xi) \le x_m + \Delta x_m \right \}}{\Delta x_1\dots \Delta x_m}\\  &amp;= \frac{\partial^m}{\partial x_1 \partial x_2 \dots \partialx_m}F_x(x_1,x_2,\dots,x_m)\end{aligned}\]</span></p><p><b>思考: </b>这个式子看起来非常的奇怪,怪就怪在有了多个变量之后分母变得奇怪,第一个等式后的分母中我也不知道为什么会有这些数相乘. 也可以这样想,各个变量之间相互独立就可以拆开为乘积的形式, 然后能理解了.</p><p><span class="math display">\[\frac{P \left \{ \xi : x_1 &lt; x_1(\xi) \le x_1 + \Delta x_1 \right\}}{\Delta x_1} \dots \frac{P \left \{ \xi : x_m &lt; x_m(\xi) \le x_m +\Delta x_1 \right \}}{\Delta x_m}\]</span></p><p>联合概率密度函数的 <span class="math inline">\(m - 1\)</span>重积分函数</p><p><span class="math display">\[f(x_i) \overset{def}{=} \int_{-\infty}^{\infty} \dots\int_{-\infty}^{\infty} f_x(x_1,x_2,\dots,x_m)dx_1 \dotsdx_{i-1}dx_{i+1} \dots dx_m\]</span></p><p>称为随机变量 <span class="math inline">\(x_i\)</span>的边缘概率密度函数.</p><p>最后就得到式子</p><p><span class="math display">\[F(x) = \int_{-\infty}^{x_1} \dots \int_{-\infty}^{x_m}f_v(v_1,v_2,\dots,v_m)dv_1 \dots dv_m\]</span></p><p>随机向量 <span class="math inline">\(x(\xi)\)</span>的联合分布函数等于其联合概率密度函数的积分.</p><p>由此有个定义, 这个定义就是之前思考那个式子想出的东西.</p><p>随机变量 <span class="math inline">\(x_1(\xi), x_2(\xi) , \dots ,x_m(\xi)\)</span> 称为 (联合) 独立, 若对于 <spanclass="math inline">\(m\)</span> 个事件 <spanclass="math inline">\(\left \{ x_1(\xi) \le x_1 \right \},\left \{x_2(\xi) \le x_2 \right \},\dots,\left \{ x_m(\xi) \le x_m \right\}\)</span>, 有概率关系</p><p><span class="math display">\[P \left \{x_1(\xi) \le x_1,\dots,x_m(\xi) \le x_m\right \} = P\left\{x_1(\xi) \le x_1 \right \} \dots P\left \{x_m(\xi) \le x_m \right \}\]</span></p><p>成立. 然后可以得出</p><p><span class="math display">\[F(x) = F_x(x-1,x_2,\dots,x_m) = F_{x_1}(x_1)F_{x_2}(x_2) \dotsF_{x_m}(x_m)\]</span></p><p>或者</p><p><span class="math display">\[f(x) = f_x(x-1,x_2,\dots,x_m) = f_{x_1}(x_1)f_{x_2}(x_2) \dotsf_{x_m}(x_m)\]</span></p><p>定义: <span class="math inline">\(m\)</span> 个随机变量的联合分布函数(或联合概率密度函数) 等于各个随机变量的边缘分布函数 (或边缘概率密度函数)之积, 则这 <span class="math inline">\(m\)</span>个随机变量是联合独立的, 被称为统计独立.</p><h2 id="复随机变量的概率密度函数">2. 复随机变量的概率密度函数</h2><p>处理复数就是要额外处理它的虚部, 首先一个复随机变量定义为 <spanclass="math inline">\(x(\xi) = x_R(\xi) + jx_I(\xi)\)</span>, 其中 <spanclass="math inline">\(x_R(\xi)\)</span> 和 <spanclass="math inline">\(x_I(\xi)\)</span> 分别为实值随机变量.</p><p>那么复随机向量可以表示为</p><p><span class="math display">\[x(\xi) = x_R(\xi) + jx_I(\xi) = \begin{bmatrix}  x_{R1}(\xi) \\  x_{R2}(\xi) \\  \vdots \\  x_{Rm}(\xi)\end{bmatrix} +j\begin{bmatrix}  x_{I1}(\xi) \\  x_{I2}(\xi) \\  \vdots \\  x_{Im}(\xi)\end{bmatrix}\]</span></p><p>复随机向量的累积分布函数定义为</p><p><span class="math display">\[F(x) \overset{def}{=} P \left \{ x(\xi) \le x \right \} \overset{def}{=}P \left \{ x_R(\xi) \le x_R, x_I(\xi) \le x_I \right \}\]</span></p><p>无非就是对实部和虚部分别处理.</p><p>概率密度函数定义为</p><p><span class="math display">\[f(x) \overset{def}{=} \frac{\partial^{2m}F(x)}{\partial x_{R1} \partialx_{I1} \dots \partial x_{Rm} \partial x_{Im}}\]</span></p><p>那么累积分布函数是概率密度函数关于所有实部和虚部的 <spanclass="math inline">\(2m\)</span> 重积分.</p><p><span class="math display">\[\begin{aligned}  F(x) &amp; = F_x(x_1,x_2,\dots,x_m)\\  &amp;= \int_{-\infty}^{x_{R1}} \int_{-\infty}^{x_{I1}} \dots\int_{-\infty}^{x_{Rm}} \int_{-\infty}^{x_{Im}}f(v_1,\dots,v_m)dv_{R1}dv_{I1} \dots dv_{Rm}dv_{Im} \\  &amp;= \int_{-\infty}^{x} f(v)dv\end{aligned}\]</span></p><p>特别地:</p><p><span class="math display">\[\int_{-\infty}^{\infty} f(x)dx = 1\]</span></p><h1 id="二随机向量的统计描述">二、随机向量的统计描述</h1><p>分布函数和概率函数常常不可知,但是随机向量可以很容易在一阶和二阶统计量上使用.</p><h2 id="均值向量">1. 均值向量</h2><p>随机向量的最重要统计运算为数学期望, 考察 <spanclass="math inline">\(m \times 1\)</span> 随机向量 <spanclass="math inline">\(x(\xi) =[x_1(\xi),x_2(\xi),\dots,x_m(\xi)]^{\mathrm{T}}\)</span>. 令随机变量<span class="math inline">\(x_i(\xi)\)</span> 的均值 <spanclass="math inline">\(E \left \{ x_i(\xi)\right \} = \mu_i\)</span>,则随机向量的数学期望称为均值向量, 记作 <spanclass="math inline">\(\mu_x\)</span> 定义为</p><p><span class="math display">\[\mu_x = E \left \{ x(\xi)\right \} = \begin{bmatrix}  E \left \{ x_1(\xi)\right \}   \\  E \left \{ x_2(\xi)\right \}   \\  \vdots   \\  E \left \{ x_m(\xi)\right \}\end{bmatrix} = \begin{bmatrix}  \mu_1 \\  \mu_2 \\  \vdots \\  \mu_m\end{bmatrix}\]</span></p><p>式子中的数学期望为</p><p><span class="math display">\[E \left \{ x(\xi)\right \} \overset{def}{=}\int_{-\infty}^{\infty}xf(x)dx\]</span></p><p>可以看出均值向量的元素是随机向量各个元素的均值.</p><h2 id="相关矩阵与协方差矩阵">2. 相关矩阵与协方差矩阵</h2><p>知乎上面有篇文章对这部分有解释, <ahref="https://zhuanlan.zhihu.com/p/447221519">链接:https://zhuanlan.zhihu.com/p/447221519</a>.</p><p>均值向量是随机向量的一阶矩, 描述随机向量的元素围绕其均值的散布情况.但是随机向量二阶矩为矩阵, 描述随机向量分布的散布情况.</p><p>自相关矩阵定义为样本向量与自身的外积的数学期望,其实就是自协方差矩阵不减去均值向量. 随机向量的自相关矩阵定义为</p><p><span class="math display">\[R_x \overset{def}{=} E \left \{ x(\xi) x^{\mathrm{H}}(\xi)\right \}\begin{bmatrix}  r_{11}&amp;  r_{12}&amp;  \cdots&amp; r_{1m}\\  r_{21}&amp;  r_{22}&amp;  \cdots&amp; r_{2m}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  r_{m1}&amp;  r_{m2}&amp;  \cdots&amp; r_{mm}\end{bmatrix}\]</span></p><p>式中, <span class="math inline">\(r_{ii}, i = 1,2,\dots,m\)</span>表示随机变量 <span class="math inline">\(x_i(\xi)\)</span> 的自相关函数,定义为</p><p><span class="math display">\[r_{ii} \overset{def}{=} E \left \{ |x_i(\xi)|^2 \right \}, \quad i =1,2,\dots,m\]</span></p><p>而 <span class="math inline">\(r_{ij}\)</span> 表示随机变量 <spanclass="math inline">\(x_i(\xi)\)</span> 和 <spanclass="math inline">\(x_j(\xi)\)</span> 之间的互相关函数, 定义为</p><p><span class="math display">\[r_{ij} \overset{def}{=} E \left \{ x_i(\xi) x_j^*(\xi) \right \}, \quadi,j = 1,2,\dots,m, i \neq j\]</span></p><p>可以得出自相关矩阵是共轭对称的, 即为 <spanclass="math inline">\(Hermitian\)</span> 矩阵.</p><p>随机变量 <span class="math inline">\(x(\xi)\)</span>的自协方差矩阵定义为</p><p><span class="math display">\[C_x \overset{def}{=} E \left \{ [x(\xi) - \mu_x][x(\xi) -\mu_x]^{\mathrm{H}} \right \} = \begin{bmatrix}  c_{11}&amp;  c_{12}&amp;  \cdots&amp; c_{1m}\\  c_{21}&amp;  c_{22}&amp;  \cdots&amp; c_{2m}\\  \vdots&amp;  \vdots&amp;  &amp; \vdots\\  c_{m1}&amp;  c_{m2}&amp;  \cdots&amp; c_{mm}\end{bmatrix}\]</span></p><p>主对角线上的元素</p><p><span class="math display">\[c_{ii} \overset{def}{=} E \left \{ |x(\xi) - \mu_x|^2\right \}, \quad i= 1,2,\dots,m\]</span></p><p>表示随机变量 <span class="math inline">\(x_i(\xi)\)</span> 的方差<span class="math inline">\(\sigma_i^2\)</span>, 其他非对角线元素</p><p><span class="math display">\[c_ij \overset{def}{=} E \left \{ [x_i(\xi) - \mu_i][x_j(\xi) - \mu_j]^*\right \} = E \left \{ x_i(\xi)x_j^*(\xi) - u_iu_j^* = c_{ji}^* \right\}\]</span></p><p>表示随机变量 <span class="math inline">\(x_i(\xi)\)</span> 和 <spanclass="math inline">\(x_j(\xi)\)</span> 之间的协方差. 自协方差矩阵也是<span class="math inline">\(Hermitian\)</span> 矩阵.</p><p>自相关矩阵和自协方差矩阵之间存在下列关系</p><p><span class="math display">\[C_x = R_x = \mu_x\mu_x^{\mathrm{H}}\]</span></p><p>推广自相关矩阵和自协方差矩阵, 则有随机向量 <spanclass="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 的互相关矩阵</p><p><span class="math display">\[R_{xy} \overset{def}{=} E \left \{ x(\xi)y^{\mathrm{H}}(\xi)\right \} =\begin{bmatrix}  r_{x_1,y_1}&amp;  r_{x_1,y_2}&amp;  \cdots&amp; r_{x_1,y_m}\\  r_{x_2,y_1}&amp;  r_{x_2,y_2}&amp;  \cdots&amp; r_{x_2,y_m}\\  \vdots&amp;  \vdots&amp;  \vdots&amp; \vdots\\  r_{x_m,y_1}&amp;  r_{x_m,y_2}&amp;  \cdots&amp; r_{x_m,y_m}\end{bmatrix}\]</span></p><p>和互协方差矩阵</p><p><span class="math display">\[\begin{aligned}  C_{xy} &amp;\overset{def}{=} E \left\{[x(\xi)-\mu_x][y(\xi)-\mu_y]^{\mathrm{H}}\right \} \\  &amp;= R_{xy} \quad \mu_x \mu_y^{\mathrm{H}} \\  &amp;= \begin{bmatrix}    c_{x_1,y_1}&amp;  c_{x_1,y_2}&amp;  \cdots&amp; c_{x_1,y_m}\\    c_{x_2,y_1}&amp;  c_{x_2,y_2}&amp;  \cdots&amp; c_{x_2,y_m}\\    \vdots&amp;  \vdots&amp;  \vdots&amp; \vdots\\    c_{x_m,y_1}&amp;  c_{x_m,y_2}&amp;  \cdots&amp; c_{x_m,y_m}  \end{bmatrix}\end{aligned}\]</span></p><h2 id="两个随机向量统计不相关与正交">3.两个随机向量统计不相关与正交</h2><p>一句话, 当采样点 <span class="math inline">\(\xi\)</span>取一系列值会产生多个随机信号. 随机信号减去均值得到随机变化部分.这一部分共性相乘会增强, 非共性相乘会在期望平均运算后抵消.而互协方差函数就能完成这一步, 所以互协方差函数越大,产生的两个随机信号的相关程度越强; 反之, 相关程度越弱.</p><p>两个随机变量 <span class="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 之间的相关系数定义为</p><p><span class="math display">\[\rho_{xy} \overset{def}{=} \frac{c_{xy}}{\sqrt{E\left \{|x(\xi)|^2\right\} E\left \{ |y(\xi)|^2\right\}}} =\frac{c_{xy}}{\sigma_x \sigma_y}\]</span></p><p><span class="math inline">\(c_{xy}\)</span> 是随机变量 <spanclass="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 之间的互协方差, 而 <spanclass="math inline">\(\sigma_x^2\)</span> <spanclass="math inline">\(\sigma_y^2\)</span> 分布是 <spanclass="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 的方差. 由相对系数的定义公式使用<span class="math inline">\(Cauchy-Schwartz\)</span> 不等式可得</p><p><span class="math display">\[0 \le |\rho_{xy}| \le 1\]</span></p><p>相关系数 <span class="math inline">\(\rho_{xy}\)</span>给出两个随机变量 <span class="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 之间的相似程度. <spanclass="math inline">\(\rho_{xy}\)</span> 越靠近 1 则相似度越大, 越靠近 0则相似度越小.</p><p>当 <span class="math inline">\(\rho_{xy}\)</span> 等于 0时说明两个随机变量 <span class="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 统计不相关.</p><p>得出定义:</p><p>若两个随机变量 <span class="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span>的互协方差矩阵等于零矩阵, 即 <spanclass="math inline">\(C_{xy} = O\)</span>. 则称两个随机变量 <spanclass="math inline">\(x(\xi)\)</span> 和 <spanclass="math inline">\(y(\xi)\)</span> 统计不相关.</p><p>若它们的互相关等于零, 即</p><p><span class="math display">\[r_{xy} = E \left \{ x(\xi)y^*(\xi) \right \} = 0\]</span></p><p>则将这两个随机变量 <span class="math inline">\(x(\xi)\)</span> 和<span class="math inline">\(y(\xi)\)</span> 称为正交.</p><p>若两个随机向量 <span class="math inline">\(\mathbf{x}(\xi)\)</span>和 <span class="math inline">\(\mathbf{y}(\xi)\)</span>的互相关矩阵等于零矩阵, 即 <span class="math inline">\(R_{xy} =O\)</span>, 则称这两个随机向量正交.</p><h2 id="随机向量的线性变换">4. 随机向量的线性变换</h2><p>令 <span class="math inline">\(A\)</span> 为一复常数矩阵, 则 <spanclass="math display">\[y(\xi) = Ax(\xi)\]</span></p><p>是复正态随机向量 <span class="math inline">\(x(\xi) \sim CN(\mu_x,\Gamma_x)\)</span> 的线性变换. 线性变换 <spanclass="math inline">\(y(\xi) = Ax(\xi)\)</span> 仍然为正态随机向量, 记作<span class="math inline">\(y(x) \sim CN(\mu_y, \Gamma_y)\)</span></p><p>其均值向量为 <span class="math display">\[\mu_y = E \left\{ y(\xi) \right\} = E \left\{ Ax(\xi) \right\} = AE\left\{ Ax(\xi) \right\} = A\mu_x\]</span></p><p>自相关矩阵为 <span class="math display">\[R_y = E\left\{ y(\xi)y^{\mathrm{H}}(\xi) \right\} = E \left\{Ax(\xi)x^{\mathrm{H}}(\xi)A^{\mathrm{H}} \right\} = AE\left\{x(\xi)x^{\mathrm{H}}(\xi) \right\}A^{\mathrm{H}} = AR_xA^{\mathrm{H}}\]</span></p><p>自协方差矩阵为 <span class="math display">\[C_y = AC_xA^{\mathrm{H}}\]</span></p><p>随机向量 <span class="math inline">\(x(\xi)\)</span> 与线性变换 <spanclass="math inline">\(y(\xi) = Ax(\xi)\)</span> 的互相关矩阵为 <spanclass="math display">\[\begin{aligned}R_{xy} &amp;= E\left\{ x(\xi)y^{\mathrm{H}}(\xi) \right\} = E\left\{x(\xi)x^{\mathrm{H}}(\xi)A^{\mathrm{H}} \right\} \\&amp;= E\left\{ x(\xi)x^{\mathrm{H}}(\xi) \right\}A^{\mathrm{H}} =R_xA^{\mathrm{H}}\end{aligned}\]</span></p><p>于是 <span class="math display">\[R_{yx} = R_{xy}^{\mathrm{H}} = (R_xA^{\mathrm{H}})^{\mathrm{H}} = AR_x\]</span></p><p>同理可得随机向量 <span class="math inline">\(x(\xi)\)</span>与其线性变换 <span class="math inline">\(y(\xi) = Ax(\xi)\)</span>之间的互协方差矩阵 <span class="math display">\[C_{xy} = C_xA^{\mathrm{H}}, \quad C_{yx} = AC_x\]</span></p><h1 id="三正态随机向量">三、正态随机向量</h1><p>若随机向量 <span class="math inline">\(x(\xi) =[x_1(\xi),x_2(\xi),\dots,x_m(\xi)]^{\mathrm{T}}\)</span>中各个分量为联合正态分布的随机变量则称 <spanclass="math inline">\(x(\xi)\)</span> 为正态随机向量.</p><p>一个均值向量为 <span class="math inline">\(\mu_x\)</span>和协方差矩阵为 <span class="math inline">\(\Gamma_x\)</span>的实正态随机向量记作 <span class="math inline">\(x \simN(\mu_x,\Gamma_x)\)</span>, 其概率密度为</p><p><span class="math display">\[f(x) = \frac{1}{(2\pi)^{m/2}|\Gamma_x|^{1/2}}exp[-\frac{1}{2}(x-\mu_x)^{\mathrm{T}}\Gamma_x^{-1}(x-\mu_x) ]\]</span></p><p>其中 <span class="math inline">\(|\Gamma_x|\)</span> 表示矩阵 <spanclass="math inline">\(\Gamma_x\)</span> 的行列式, 指数项 <spanclass="math inline">\((x -\mu_x)^{\mathrm{T}}\Gamma_x^{-1}(x-\mu_x)\)</span> 是 <spanclass="math inline">\(x_i\)</span> 的正定二次型函数, 也可以写作</p><p><span class="math display">\[(x - \mu_x)^{\mathrm{T}}\Gamma_x^{-1}(x-\mu_x) =\sum_{i=1}^{m}\sum_{j=1}^{m}\Gamma_x^{-1}(i,j)(x_i - \mu_i)(x_j - \mu_j)\]</span></p><p>其中 <span class="math inline">\(\Gamma_x^{-1}(i,j)\)</span>表示逆矩阵 <span class="math inline">\(\Gamma_x^{-1}\)</span> 的 <spanclass="math inline">\((i,j)\)</span> 元素, <spanclass="math inline">\(\mu_i = E \left \{ x_i\right \}\)</span>是随机变量 <span class="math inline">\(x_i\)</span> 的均值.</p><p>实正态随机向量的特征函数为</p><p><span class="math display">\[\Phi_x(\omega) = exp(j\omega^{\mathrm{T}}\mu_x =\frac{1}{2}\omega^{\mathrm{T}}\Gamma_x\omega)\]</span></p><p>式中, <span class="math inline">\(\omega =[\omega_1,\dots,\omega_m]^{\mathrm{T}}\)</span></p><p>对复正态随机向量, 令 <span class="math inline">\(x =[x_1,\dots,x_m]^{\mathrm{T}}\)</span>, 其每个元素服从复正态分布, 即<span class="math inline">\(x_i \sim CN(\mu_i.\sigma_i^2)\)</span>, 则<span class="math inline">\(x\)</span> 称为复正态随机向量, 记作 <spanclass="math inline">\(x \sim CN(\mu_x,\Gamma_x)\)</span>, 其中, <spanclass="math inline">\(\mu_x = [\mu_1,\dots,\mu_m]^{\mathrm{T}}\)</span>.若 <span class="math inline">\(x_i = \mu_i + jv_i\)</span>,并且实随机向量 <spanclass="math inline">\([\mu_1,v_1]^{\mathrm{T}},\dots,[\mu_m,v_m]^{\mathrm{T}}\)</span>统计独立, 则复随机正态向量 <span class="math inline">\(x\)</span>的概率密度函数为</p><p><span class="math display">\[\begin{aligned}f(x) &amp;= \prod_{i=1}^{m}f(x_i) =(\pi^m\prod_{i=1}^{m}\sigma_i^2)^{-1}exp(-\sum_{i=1}^{m}\frac{1}{\sigma_i^2}|x_i-\mu_i^2|)  \\&amp;=\frac{1}{\pi^m|\Gamma_x|}exp[-(x-\mu_x)^{\mathrm{H}}\Gamma_x^{-1}(x-\mu_x)]\end{aligned}\]</span></p><p>式子中, <span class="math inline">\(\Gamma_x =diag(\sigma_1^2,\dots,\sigma_m^2)\)</span>,复正态随机变量的特征函数由下式给出</p><p><span class="math display">\[\Phi_x(\omega) = exp[j\mathrm{Re}(\omega^{\mathrm{H}}\mu_x) -\frac{1}{4}\omega^{\mathrm{H}}\Gamma_x\omega]\]</span></p><p>正态随机向量具有非常重要的几个性质</p><ul><li><p>概率密度函数由均值向量和协方差矩阵完全描述.</p></li><li><p>若正态随机向量的各个分量相互统计不相关,则它们也是统计独立的.</p></li><li><p>均值向量 <span class="math inline">\(\mu_x\)</span> 和协方差矩阵<span class="math inline">\(\Gamma_x\)</span> 的正态随机向量 <spanclass="math inline">\(x\)</span> 的线性变换 <spanclass="math inline">\(y(\xi) = Ax(\xi)\)</span> 仍然是正态随机向量,其概率密度函数为</p></li></ul><p>实正态随机向量概率密度函数 <span class="math display">\[f(y) = \frac{1}{(2\pi)^{m/2}|\Gamma_y|^{1/2}}exp[-\frac{1}{2}(y-\mu_y)^{\mathrm{T}}\Gamma_y^{-1}(y-\mu_y) ]\]</span></p><p>复正态随机向量概率密度函数 <span class="math display">\[f(y) =\frac{1}{\pi^m|\Gamma_y|}exp[-(y-\mu_y)^{\mathrm{H}}\Gamma_y^{-1}(y-\mu_y)]\]</span></p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.2-向量空间_内积空间与线性映射</title>
    <link href="/posts/147efc73/"/>
    <url>/posts/147efc73/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><p>线性空间是某一类事物在矩阵代数里的一个抽象的集合表示,线性映射或线性变换则反映线性空间中元素间最基本的线性关系.</p><p>上面这句话出自书中第 14 页开头, 读下来第一感觉就是云里雾里,毕竟出现了新的名称.</p><p>对于线性空间可以简单的把它理解为几何空间(实际上不仅仅是几何空间这么简单), 例如一个 <span class="math inline">\(2\times 1\)</span> 的向量 <spanclass="math inline">\([x_0,y_0]^{\mathrm{T}}\)</span>可以想象为笛卡尔坐标系中的某个点. 同理, 一个 <spanclass="math inline">\(3 \times 1\)</span> 的向量 <spanclass="math inline">\([x_0,y_0,z_0]^{\mathrm{T}}\)</span>可以想象为三维坐标系中的某个点. 以此就可以推广到 <spanclass="math inline">\(n\)</span> 维空间.</p><p>除了我们能够想到的那些比较规则的坐标系外,有些坐标系是在笛卡尔坐标系或者三维坐标系的基础上放缩和旋转得到.线性变换就是要在这两个坐标系间变换,简单一点就是同一个点在两个坐标系中不同的表示.</p><h1 id="一集合的基本概念">一、集合的基本概念</h1><p>顾名思义, 集合就是一堆元素的集体表示.常用表示方法是大括号如下所示:</p><p><span class="math display">\[S=\left \{ a,b,c,d \right \}\]</span></p><p>要是 <span class="math inline">\(S\)</span> 是满足某种性质 <spanclass="math inline">\(P(x)\)</span> 的元素 <spanclass="math inline">\(x\)</span> 的集合, 则记为 <spanclass="math inline">\(S=\left \{ x: P(x) \right \}\)</span>.</p><p>有些常见的数学符号需要记忆一下.</p><p><span class="math inline">\(\forall \qquad \qquad\)</span> 表示"对所有..."</p><p><span class="math inline">\(x \in A \qquad\)</span> 读作 " <spanclass="math inline">\(x\)</span> 属于集合 <spanclass="math inline">\(A\)</span> ", 意味 <spanclass="math inline">\(x\)</span> 是集合 <spanclass="math inline">\(A\)</span> 的一个元素.</p><p><span class="math inline">\(x \notin A \qquad\)</span> 表示 <spanclass="math inline">\(x\)</span> 不是集合 <spanclass="math inline">\(A\)</span> 的元素.</p><p><span class="math inline">\(\ni \qquad \qquad\)</span> 代表"使得"</p><p><span class="math inline">\(\exists \qquad \qquad\)</span> 意味"存在"</p><p><span class="math inline">\(A \Rightarrow B \ \ \quad\)</span> 表示"若有条件 <span class="math inline">\(A\)</span>, 则有结果 <spanclass="math inline">\(B\)</span> " 或 "<spanclass="math inline">\(A\)</span> 意味着<spanclass="math inline">\(B\)</span>"</p><p>例如, "在集合 <span class="math inline">\(V\)</span> 中存在一个零元素<span class="math inline">\(\theta\)</span>", 使得加法 <spanclass="math inline">\(x + \theta = x = \theta + x\)</span> 对于 <spanclass="math inline">\(V\)</span> 中的所有元素 <spanclass="math inline">\(x\)</span> 均成立"这段描述用以上符号可表示为：</p><p><span class="math display">\[\exists \ \theta \in V \ni x + \theta = x = \theta + x, \quad \forall \x \in V\]</span></p><p>对集合自然也有一系列操作:</p><ul><li><p><span class="math inline">\(A \subseteq B\)</span> 读作 "集合<span class="math inline">\(A\)</span> 包含于集合 <spanclass="math inline">\(B\)</span>", 意味着 <spanclass="math inline">\(A\)</span> 的每一个元素都是 <spanclass="math inline">\(B\)</span> 的元素.</p></li><li><p><span class="math inline">\(A=B\)</span> 读作 "集合 <spanclass="math inline">\(A\)</span> 等于集合 <spanclass="math inline">\(B\)</span>", 两个集合中的元素相同.</p></li><li><p><span class="math inline">\(A \subset B\)</span> 则称 <spanclass="math inline">\(A\)</span> 是 <spanclass="math inline">\(B\)</span> 的一个真子集. 表达式为 <spanclass="math inline">\(A \neq B\)</span> 且 <span class="math inline">\(A\subseteq B\)</span>.</p></li><li><p><span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的并集记作 <spanclass="math inline">\(A \cup B\)</span>, 式子得到所有在集合 <spanclass="math inline">\(A \ B\)</span> 的元素(无重复).</p></li><li><p><span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的交集记作 <spanclass="math inline">\(A \cap B\)</span>, 式子得到同时存在于集合 <spanclass="math inline">\(A\)</span> 和 集合 <spanclass="math inline">\(B\)</span> 中的元素.</p></li><li><p>符号 <span class="math inline">\(Z=A+B\)</span> 表示 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的和集, 定义为 <spanclass="math display">\[Z=A+B=\left \{z=x+y \in Z : x \in A, y \in B\right \}\]</span></p></li><li><p>符号 <span class="math inline">\(X=A-B\)</span> 表示 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的差集, 定义为 <spanclass="math display">\[X=A-B=\left \{x \in X : x \in A, 但 \ x \notin B\right \}\]</span></p></li><li><p>子集合 <span class="math inline">\(A\)</span> 在集合 <spanclass="math inline">\(X\)</span> 中的补集定义为 <spanclass="math display">\[A^c = X - A = \left \{ x \in X : x \notin A \right \}\]</span></p></li><li><p>若 <span class="math inline">\(X\)</span> 和 <spanclass="math inline">\(Y\)</span> 为集合, 且 <spanclass="math inline">\(x \in X\)</span> 和 <span class="math inline">\(y\in Y\)</span>, 则所有有序对<span class="math inline">\((x,y)\)</span>的集合记为 <span class="math inline">\(X \times Y\)</span>, 称为集合<span class="math inline">\(X\)</span> 和 <spanclass="math inline">\(Y\)</span> 的笛卡尔积. <spanclass="math display">\[X \times Y = \left \{(x,y) : x \in X, y \in Y  \right \}\]</span></p></li></ul><h1 id="二向量空间">二、向量空间</h1><h2 id="运算规则和定理">1. 运算规则和定理</h2><p>以向量为元素的集合 <span class="math inline">\(V\)</span>称为向量空间.</p><p>那么之前所说可以将二维平面想象为一个向量空间,就是因为二维空间是由无数个向量组合而成.</p><p>这一小节归根到底就是对向量的运算法则做出阐释. 其中向量集合 <spanclass="math inline">\(V\)</span> 中存在向量 <spanclass="math inline">\(x,y,\omega\)</span>, 标量域 <spanclass="math inline">\(S\)</span> 中有 <spanclass="math inline">\(a_1,a_2\)</span> 两个标量.</p><ul><li>闭合性<ul><li>若 <span class="math inline">\(x \in V\)</span> 和 <spanclass="math inline">\(y \in V\)</span>, 则 <spanclass="math inline">\(x+y \in V\)</span>, 即 <spanclass="math inline">\(V\)</span> 在加法下是闭合的.这个也叫加法的闭合性.</li><li>若 <span class="math inline">\(a_1\)</span> 是一个标量, <spanclass="math inline">\(y \in V\)</span>, 则 <spanclass="math inline">\(a_1y \in V\)</span>, 即 <spanclass="math inline">\(V\)</span> 在标量乘法下是闭合的.这个也叫标量乘法的闭合性.</li></ul></li><li>加法公理<ul><li><span class="math inline">\(x + y = y + x \quad \forall x,y \inV\)</span></li><li><span class="math inline">\(x + (y + \omega) = (x + y) + \omega\quad \forall x,y,\omega \in V\)</span></li><li><span class="math inline">\(\exists \ 0 \in V, \exists \ y \inV\)</span> 恒有 <span class="math inline">\(y + 0 = y\)</span></li><li><span class="math inline">\(y \in V, \exists \ -y \in V \Rightarrowy + (-y) = 0 = (-y) + y\)</span></li></ul></li><li>标量乘法公理<ul><li><span class="math inline">\(a(by) = (ab)y\)</span> 对所有向量 <spanclass="math inline">\(y\)</span> 和所有标量 <spanclass="math inline">\(a,b\)</span> 成立.</li><li><span class="math inline">\(a(x+y) = ax + ay\)</span> 对所有向量<span class="math inline">\(x,y \in V\)</span> 和标量 <spanclass="math inline">\(a\)</span> 成立.</li><li><span class="math inline">\((a+b)y = ay + by\)</span> 对所有向量<span class="math inline">\(y\)</span> 和所有标量 <spanclass="math inline">\(a,b\)</span> 成立.</li><li><span class="math inline">\(1y = y\)</span> 对所有向量 <spanclass="math inline">\(y\)</span> 成立.</li></ul></li></ul><p>故, 有定理: 如果 <span class="math inline">\(V\)</span>是一个向量空间, 则</p><ul><li>零向量 <span class="math inline">\(0\)</span> 是唯一的.</li><li>对每一个向量 <span class="math inline">\(y\)</span>, 加法的逆运算<span class="math inline">\(-y\)</span> 是唯一的.</li><li>对每一个向量 <span class="math inline">\(y\)</span>, 恒有 <spanclass="math inline">\(0y = 0\)</span>.</li><li>对每一个标量 <span class="math inline">\(a\)</span>, 恒有 <spanclass="math inline">\(a0 = 0\)</span>.</li><li>若 <span class="math inline">\(ay=0\)</span>, 则 <spanclass="math inline">\(a=0\)</span> 或者 <spanclass="math inline">\(y=0\)</span>.</li><li><span class="math inline">\((-1)y=-y\)</span></li></ul><h2 id="rn和cn">2. <span class="math inline">\(R^n\)</span>和<spanclass="math inline">\(C^n\)</span></h2><p><span class="math inline">\(R^c\)</span> 指的是对一个正整数 <spanclass="math inline">\(n\)</span> 有一个有序实数 <spanclass="math inline">\(n\)</span> 元组 <spanclass="math inline">\([x_1,x_2,\dots,x_n]\)</span>,其中每一个元素称为向量 (<span class="math inline">\(n \times 1\)</span>大小). 当 <span class="math inline">\(n\)</span> 为 1 时, <spanclass="math inline">\(R\)</span> 的元素就变成了标量.</p><p>若对 <span class="math inline">\(R^n\)</span>定义两个向量加法和一个标量与一个向量的乘法, 则称 <spanclass="math inline">\(R^n\)</span> 为 <spanclass="math inline">\(n\)</span> 阶实向量空间. 同理可得复向量空间 <spanclass="math inline">\(C^n\)</span>.</p><p>子空间定义: 令 <span class="math inline">\(V\)</span> 和 <spanclass="math inline">\(W\)</span> 是两个向量空间, 若 <spanclass="math inline">\(W\)</span> 是 <spanclass="math inline">\(V\)</span> 中一个非空的子集合, 则称子集合 <spanclass="math inline">\(W\)</span> 是 <spanclass="math inline">\(V\)</span> 的一个子空间.</p><p>子空间定理: <span class="math inline">\(R^n\)</span> 的子集合 <spanclass="math inline">\(W\)</span> 是 <spanclass="math inline">\(R^n\)</span> 的子空间需要满足以下三个条件.</p><ol type="1"><li><p><span class="math inline">\(x,y \in W \Rightarrow (x+y) \inW\)</span>.</p></li><li><p><span class="math inline">\(x \in W\)</span> 且 <spanclass="math inline">\(a\)</span> 为标量时, 所得 <spanclass="math inline">\(ax \in W\)</span>.</p></li><li><p>零向量 <span class="math inline">\(0\)</span> 是 <spanclass="math inline">\(W\)</span> 的元素.</p></li></ol><p>简而言之就是向量进行加法或者与标量相乘得到的向量还在集合内并且包含了零向量,这样就可以说子集合谁谁是谁的子空间.像是在整个二维坐标系中取了一个有边界的图形(需要包含坐标零点),这个图形是属于二维坐标系的一部分.</p><p>接下来就是以此为基础出现的一些定义和定理了:</p><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是向量空间 <spanclass="math inline">\(V\)</span> 的两个子空间, 则 <spanclass="math display">\[A+B=\left \{ x+y: x \in A,y \in B\right \}\]</span></p><p>称为子空间 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的和, 子空间 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的交为: <span class="math display">\[A \cap B = \left \{ x \in V : x \in A \ 且 \ x \in B \right \}\]</span></p><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是向量空间 <spanclass="math inline">\(V\)</span> 的两个子空间, 满足 <spanclass="math inline">\(V=A+B\)</span> 和 <span class="math inline">\(A\cap B = \left \{ 0 \right \}\)</span>, 则称 <spanclass="math inline">\(V\)</span> 是子空间 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 的直接求和, 记作 <spanclass="math inline">\(V=A \oplus B\)</span> 好像就是互补的.</p><p>若 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 是向量空间 <spanclass="math inline">\(V\)</span> 的向量子空间, 则 <spanclass="math inline">\(V=A+B\)</span> 和 <span class="math inline">\(A\cap B\)</span> 也是 <span class="math inline">\(V\)</span>的向量子空间. 想象一下二维坐标系就好理解了.</p><h1 id="三实内积空间">三、实内积空间</h1><h2 id="内积">1. 内积</h2><p>对于实向量空间中两个向量之间求乘积(简称内积)</p><p>就一个非常简单的公式, 对于实 <span class="math inline">\(n\)</span>阶向量空间 <span class="math inline">\(R^n\)</span> 定义向量 <spanclass="math inline">\(x = [x_1,x_2,\dots,x_n]^{\mathrm{T}} , y =[y_1,y_2,\dots,y_n]^{\mathrm{T}}\)</span> 之间的内积为典范内积:</p><p><span class="math display">\[\left \langle x,y \right \rangle = \sum_{i=1}^{n}x_iy_i\]</span></p><p>则称 <span class="math inline">\(R^n\)</span> 为 <spanclass="math inline">\(n\)</span> 阶 <spanclass="math inline">\(Euclidean\)</span> 空间或者 <spanclass="math inline">\(Euclidean n\)</span> 空间.</p><p>更有意思的是令 <span class="math inline">\(x(t),y(t)\)</span> 是<span class="math inline">\(R\)</span> 的两个连续函数, 并且 <spanclass="math inline">\(t\)</span> 的定义域为 <spanclass="math inline">\([a,b]\)</span>, 则 <spanclass="math inline">\(x(t)\)</span> 和 <spanclass="math inline">\(y(t)\)</span> 之间的内积定义为</p><p><span class="math display">\[\left \langle x(t),y(t) \right \rangle \overset{def}{=}\int_{a}^{b}x(t)y(t)dt\]</span></p><p>不能拓展到高维, 所以就不是 <spanclass="math inline">\(Euclidean\)</span> 空间.</p><h2 id="范数">2. 范数</h2><p>定义: 若 <span class="math inline">\(R^n\)</span> 是一个实内积空间,并且 <span class="math inline">\(x \in E^n\)</span>, 则 <spanclass="math inline">\(x\)</span> 的范数 (或"长度") 记作 <spanclass="math inline">\(\Vert x \Vert\)</span> 并定义为: <spanclass="math display">\[\Vert x \Vert = \left \langle x,x \right \rangle ^{1/2}\]</span></p><p>向量 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 之间的距离定义为: <spanclass="math display">\[d = \Vert x - y \Vert = \left \langle x-y,x-y \right \rangle ^{1/2}\]</span></p><p>特别地, 对于 <span class="math inline">\(Euclidean n\)</span> 空间,向量范数取: <span class="math display">\[\Vert x  \Vert_2 = \sqrt{(a_1)^2+(a_2)^2+\dots+(a_n)^2}\]</span></p><p>并称为向量 <span class="math inline">\(x\)</span> 的 <spanclass="math inline">\(Euclidean\)</span> 长度, 向量距离取: <spanclass="math display">\[\Vert x - y \Vert_2 = \sqrt{(a_1-b_1)^2+(a_2-b_2)^2+\dots+(a_n-b_n)^2}\]</span></p><p>并称为向量 <span class="math inline">\(x\)</span> 和 <spanclass="math inline">\(y\)</span> 之间的 <spanclass="math inline">\(Euclidean\)</span> 距离.</p><p>实内积空间的范数具有的一般性质:</p><ol type="1"><li><p><span class="math inline">\(\Vert 0 \Vert = 0\)</span>, 并且<span class="math inline">\(\Vert x \Vert &gt; 0, \ \forall x \neq0\)</span></p></li><li><p><span class="math inline">\(\Vert cx \Vert = |c|\Vert x \Vert, \\forall x(向量),c(标量)\)</span></p></li><li><p>范数服从极化恒等式: <span class="math display">\[\left \langle x,y \right \rangle = \frac{1}{4}(\Vert x+y \Vert^2 - \Vertx-y \Vert^2), \ \forall x,y\]</span></p></li><li><p>范数满足平行四边形法则: <span class="math display">\[\Vert x+y \Vert^2 + \Vert x-y \Vert^2 = 2\Vert x \Vert^2 + 2\Vert y\Vert^2, \ \forall x,y\]</span></p></li><li><p>范数服从 <span class="math inline">\(Cauchy-Schwartz\)</span>不等式 (柯西不等式), <span class="math inline">\(|\left \langle x,y\right \rangle| = \Vert x \Vert \Vert y \Vert\)</span> 当且仅当 <spanclass="math inline">\(y=cx\)</span> 其中 <spanclass="math inline">\(c\)</span> 为某个非零常数. <spanclass="math display">\[|\left \langle x,y \right \rangle| \le \Vert x \Vert \Vert y \Vert\]</span></p></li><li><p>范数满足三角不等式 <span class="math display">\[\Vert x+y \Vert \le \Vert x \Vert + \Vert y \Vert, \ \forall x,y\]</span></p></li></ol><h1 id="四复内积空间">四、复内积空间</h1><p>复内积空间和实内积空间不同的地方就在于向量是复向量.所以此时公式就要转变:</p><p>定义向量 <span class="math inline">\(x =[x_1,x_2,\dots,x_n]^{\mathrm{T}} , y =[y_1,y_2,\dots,y_n]^{\mathrm{T}}\)</span></p><p><span class="math display">\[\left \langle x,y \right \rangle = x^{\mathrm{H}}y =\sum_{i=1}^{n}x_iy_i\]</span></p><p>复内积空间的范数具有的一般性质:</p><ol type="1"><li><p><span class="math inline">\(\Vert 0 \Vert = 0\)</span>, 并且<span class="math inline">\(\Vert x \Vert &gt; 0, \ \forall x \neq0\)</span></p></li><li><p><span class="math inline">\(\Vert cx \Vert = |c|\Vert x\Vert\)</span>, 其中 <span class="math inline">\(|c|\)</span> 表示复数<span class="math inline">\(c\)</span> 的模</p></li><li><p>极化恒等式: <span class="math display">\[\left \langle x,y \right \rangle = \frac{1}{4}(\Vert x+y \Vert^2 - \Vertx-y \Vert^2 - j\Vert x+jy \Vert^2 + j\Vert x-jy \Vert^2), \ \forall x,y\]</span></p></li><li><p>平行四边形法则: <span class="math display">\[\Vert x+y \Vert^2 + \Vert x-y \Vert^2 = 2\Vert x \Vert^2 + 2\Vert y\Vert^2\]</span></p></li><li><p><span class="math inline">\(Cauchy-Schwartz\)</span> 不等式(柯西不等式), <span class="math inline">\(|\left \langle x,y \right\rangle| = \Vert x \Vert \Vert y \Vert\)</span> 成立, 当且仅当 <spanclass="math inline">\(y=cx\)</span> 其中 <spanclass="math inline">\(c\)</span> 为某个复数.</p></li><li><p>三角不等式 <span class="math display">\[\Vert x+y \Vert \le \Vert x \Vert + \Vert y \Vert\]</span></p></li></ol><h1 id="五线性映射">五、线性映射</h1><p>回到文章最开头提出的那个线性变换,在有了子空间的基础上就能够更好的解释.</p><p>那么线性映射是个什么情况呢？就是将一个子空间的向量转换为另一个子空间向量的操作.这个步骤也牵涉到了矩阵乘法的核心.</p><p>令 <span class="math inline">\(V\)</span> 和 <spanclass="math inline">\(W\)</span> 分别是 <spanclass="math inline">\(R^m\)</span> 和 <spanclass="math inline">\(R^n\)</span> 的子空间, 并且 <spanclass="math inline">\(T: V \rightarrow W\)</span> 是一映射. 称 <spanclass="math inline">\(T\)</span> 为线性映射或线性变换, 若对于 <spanclass="math inline">\(v \in V, \omega \in W\)</span> 和所有标量 <spanclass="math inline">\(c\)</span>, 映射 <spanclass="math inline">\(T\)</span> 满足线性关系式:</p><p><span class="math display">\[T(v + \omega) = T(v) + T(\omega)\]</span></p><p>和</p><p><span class="math display">\[T(cv) = cT(v)\]</span></p><p>是否是线性变换就看下列式子是否成立: <span class="math display">\[T(c_1u_1+c_2u_2+\dots+c_pu_p) = c_1T(u_1) + c_2T(u_2) + \dots+ c_pT(u_p)\]</span></p><p>当线性映射或线性变换 <span class="math inline">\(T\)</span>是一个矩阵的时候体现的就是矩阵乘法的核心.这个核心就是对右乘矩阵的所有列向量进行线性映射.</p><p>最后一个定理, 令 <span class="math inline">\(V\)</span> 和 <spanclass="math inline">\(W\)</span> 是两个向量空间, <spanclass="math inline">\(T: V \rightarrow W\)</span> 为一线性变换则有:</p><ul><li><p>若 <span class="math inline">\(M\)</span> 是 <spanclass="math inline">\(V\)</span> 的线性子空间, 则 <spanclass="math inline">\(T(M)\)</span> 是 <spanclass="math inline">\(W\)</span> 的线性子空间.</p></li><li><p>若 <span class="math inline">\(N\)</span> 是 <spanclass="math inline">\(W\)</span> 的线性子空间, 则线性反变换 <spanclass="math inline">\(T^{-1}(N)\)</span> 是 <spanclass="math inline">\(V\)</span> 的线性子空间.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵分析与应用-1.1-矩阵的基本运算</title>
    <link href="/posts/fe10153/"/>
    <url>/posts/fe10153/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文学习过程来源是《矩阵分析与应用-张贤达》一书. 可以通过 <ahref="https://zh.zlib.life">z-lib</a> 下载.</p><h1 id="一矩阵与向量">一、矩阵与向量</h1><h2 id="式中矩阵与向量">1. 式中矩阵与向量</h2><p>在科学和工程中, 面对的是 <span class="math inline">\(m \timesn\)</span> 线性方程组.</p><p><span class="math display">\[\left\{\begin{array}{c}    a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b_1 \\    a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b_2 \\    \cdots \\    a_{m1}x_1+a_{m2}x_2+\cdots+a_{mn}x_n=b_m\end{array}\right. \tag{1}\]</span></p><p>再简单通俗一点就是解 <span class="math inline">\(n\)</span>元一次方程. 引入矩阵向量之后就可以化简为以下式子：</p><p><span class="math display">\[Ax = b \tag{2}\]</span></p><p>式子</p><p><span class="math display">\[A =\begin{bmatrix}  a_{11}&amp;  a_{12}&amp;  \cdots&amp;  a_{1n} \\  a_{21}&amp;  a_{22}&amp;  \cdots&amp;  a_{2n} \\  \vdots&amp;  \vdots&amp;  \vdots&amp;  \vdots \\  a_{m1}&amp;  a_{m2}&amp;  \cdots&amp;  a_{mn}\end{bmatrix} \tag{3}\]</span></p><p>被称为一个 <span class="math inline">\(m \times n\)</span> 的矩阵,其中数字可以是复数也可以是实数.</p><p>而 (2) 中剩余两个变量为: <span class="math display">\[x =\begin{bmatrix}  x_1\\  x_2\\  \vdots\\  x_m\\\end{bmatrix}, \quadb =\begin{bmatrix}  b_1\\  b_2\\  \vdots\\  b_n\\\end{bmatrix}\tag{4}\]</span></p><p>分别是 <span class="math inline">\(m \times 1\)</span> 和 <spanclass="math inline">\(n \times 1\)</span> 的向量,其中的数字可以是复数也可以是实数. 因为其只有一列所以也叫做列向量.</p><p>同理, 如果只有一行, 就可以称之为行向量, 如下面式子所示.</p><p><span class="math display">\[a = [a1,a2,\cdots,a_n] \tag{5}\]</span></p><p>代表了一个 <span class="math inline">\(1 \times n\)</span>的行向量.</p><h2 id="向量分类">2. 向量分类</h2><p>矩阵可以是线性系统、滤波器、无线信道等的符号表示. 因为具有二维性,类似表格所以才能这样表示.</p><p>而向量在科学和工程中常被分为三种:</p><ol type="1"><li><p>速度、加速度和位移这样的有值和方向的物理向量.</p></li><li><p>用于表示有向线段的几何向量. 例如 起点 <spanclass="math inline">\(A\)</span> 点到 终点 <spanclass="math inline">\(B\)</span> 点的有向线段可以用向量 <spanclass="math inline">\(v = \overrightarrow{AB}\)</span> 表示.</p></li><li><p>同 2 中, 若起点坐标 <span class="math inline">\(A =(a_1,a_2)\)</span>, 终点坐标 <span class="math inline">\(B =(b_1,b_2)\)</span>. 那么此时的向量 <spanclass="math inline">\(v=\begin{bmatrix} b_1 - a_1 \\ b_2 - a_2\end{bmatrix}\)</span> 就从几何向量变成了代数向量,因为几何上的点有了确定的数值.</p></li></ol><p>以此类推,二维空间的向量就可以推广到三维空间甚至更高维度的空间并可以使用代数表示.</p><p>根据向量中的元素不同也有不同的分类:</p><ol type="1"><li><p>常数向量：向量中元素全为实数或者复数. 如 <spanclass="math inline">\(a=[1,5,4]^\mathrm{T}\)</span>, 其中 <spanclass="math inline">\(\mathrm{T}\)</span> 表示转置,相当于旋转一下矩阵或者向量.</p></li><li><p>函数向量: 向量中元素包含函数值. 如 <spanclass="math inline">\(x=[1,x^2,\dots,x^n]^\mathrm{T}\)</span>.</p></li><li><p>随机向量: 向量中元素为随机变量或者随机过程. 如 <spanclass="math inline">\(x(n)=[x_1(n),x_2(n),\dots,x_m(n)]^\mathrm{T}\)</span>.其中 <span class="math inline">\(x_1(n),x_2(n),\dots,x_m(n)\)</span> 是<span class="math inline">\(m\)</span> 个随机变量或随机过程.</p></li></ol><h2 id="常见的矩阵和向量">3. 常见的矩阵和向量</h2><p>对角矩阵: 在一个 <span class="math inline">\(n \times n\)</span>的矩阵中, 如果矩阵主对角线以外的元素全为 0 , 则被称为对角矩阵. 如下所示.<span class="math display">\[A =  \begin{bmatrix}  a_{11}&amp;  0&amp;  \cdots&amp;  0 \\  0&amp;  a_{22}&amp;  \cdots&amp;  0 \\  0&amp;  0&amp;  a_{33}&amp;  0 \\  \vdots&amp;  \vdots&amp;  \vdots&amp;  \vdots \\  0&amp;  0&amp;  \cdots&amp;  a_{nn}\end{bmatrix} \tag{6}\]</span></p><p><span class="math inline">\(a_{11} \ a_{22} \ a_{33} \dots \a_{nn}\)</span> 所在的这一条线就叫做主对角线. 如果它们全为 1, 则矩阵<span class="math inline">\(A\)</span> 就叫做单位矩阵, 用符号 <spanclass="math inline">\(I_{n \times n}\)</span> 表示.</p><p>另外, 在大小为 <span class="math inline">\(m \times n\)</span>的矩阵中, 如果全部元素为 0, 该矩阵就被称为零矩阵, 记做 <spanclass="math inline">\(O_{m \times n}\)</span>.</p><p>可以想到, 向量无非是矩阵中的一行或者一列, 自然就可以用向量来表示矩阵.除了这种方式, 矩阵同样可以用矩阵表示, 这样的做法称之为分块矩阵.分块矩阵如下所示.</p><p><span class="math display">\[A=[A_{ij}]=\begin{bmatrix}  A_{11}&amp;  A_{12}&amp;  \cdots&amp;  A_{1n} \\  A_{21}&amp;  A_{22}&amp;  \cdots&amp;  A_{2n} \\  \vdots&amp;  \vdots&amp;  \vdots&amp;  \vdots \\  A_{m1}&amp;  A_{m2}&amp;  \cdots&amp;  A_{mn}\end{bmatrix} \tag{7}\]</span></p><h1 id="二矩阵的基本运算">二、矩阵的基本运算</h1><h2 id="矩阵转置和共轭">1. 矩阵转置和共轭</h2><p>若 <span class="math inline">\(A=[a_{ij}]\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 则 <spanclass="math inline">\(A\)</span> 的转置记作 <spanclass="math inline">\(A^\mathrm{T}\)</span>, 是一个 <spanclass="math inline">\(n \times m\)</span> 矩阵, 定义为 <spanclass="math inline">\([A^\mathrm{T}]_{ij} = a_{ji}\)</span>.</p><p>矩阵 <span class="math inline">\(A\)</span> 的复数共轭 <spanclass="math inline">\(A^*\)</span> 定义为 <spanclass="math inline">\([A^*]_{ij} = a^*_{ij}\)</span>. 复共轭转置记作<span class="math inline">\(A^\mathrm{H}\)</span>, 定义为</p><p><span class="math display">\[A^\mathrm{H}=\begin{bmatrix}  a^*_{11}&amp;  a^*_{21}&amp;  \cdots&amp;  a^*_{m1} \\  a^*_{12}&amp;  a^*_{22}&amp;  \cdots&amp;  a^*_{m2} \\  \vdots&amp;    \vdots&amp;    \vdots&amp;  \vdots   \\  a^*_{1n}&amp;  a^*_{2n}&amp;  \cdots&amp;  a^*_{mn} \tag{8}\end{bmatrix}\]</span></p><p>共轭转置又叫 <span class="math inline">\(Hermitian\)</span>伴随、<span class="math inline">\(Hermitian\)</span> 转置或 <spanclass="math inline">\(Hermitian\)</span> 共轭. 满足 <spanclass="math inline">\(A^\mathrm{H} = A\)</span> 的正方复矩阵称为 <spanclass="math inline">\(Hermitian\)</span> 矩阵或者共轭对称矩阵.</p><p>共轭转置和转置之间存在以下关系:</p><p><span class="math display">\[A^\mathrm{H} = (A^*)^\mathrm{T} = (A^\mathrm{T})^* \tag{9}\]</span></p><p>一个 <span class="math inline">\(m \times n\)</span> 分块矩阵 A的共轭转置是一个由 <span class="math inline">\(A\)</span>的元素的共轭转置组成的 <span class="math inline">\(n \times m\)</span>分块矩阵.</p><p><span class="math display">\[A^\mathrm{H}=\begin{bmatrix}  A^\mathrm{H}_{11}&amp;  A^\mathrm{H}_{21}&amp;  \cdots&amp;  A^\mathrm{H}_{m1}\\  A^\mathrm{H}_{12}&amp;  A^\mathrm{H}_{22}&amp;  \cdots&amp;  A^\mathrm{H}_{m2}\\  \vdots&amp;    \vdots&amp;    \vdots&amp;  \vdots   \\  A^\mathrm{H}_{1n}&amp;  A^\mathrm{H}_{2n}&amp;  \cdots&amp;  A^\mathrm{H}_{mn}\end{bmatrix}\]</span></p><p>列向量的转置结果为行向量, 行向量的转置结果为列向量.</p><p>！！！这个地方需要特别注意的是 <spanclass="math inline">\(A^*\)</span> 在之前学的时候是表示的伴随矩阵,而不是这个地方的共轭转置矩阵, 具体求法在这个部分没有体现,需要学习线性代数的酉空间了解.</p><h2 id="矩阵加法">2. 矩阵加法</h2><p>两个 <span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A = [a_{ij}]\)</span> 和 <spanclass="math inline">\(B = [b_{ij}]\)</span> 之和记作 <spanclass="math inline">\(A+B\)</span> 定义为：</p><p><span class="math display">\[A+B = [A+B]_{ij} = a_{ij} + b_{ij} \tag{10}\]</span></p><h2 id="矩阵和标量相乘">3. 矩阵和标量相乘</h2><p>令 <span class="math inline">\(A = [a_{ij}]\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 且 <spanclass="math inline">\(\alpha\)</span> 是一个标量. 乘积 <spanclass="math inline">\(\alpha A\)</span> 是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 定义为 <spanclass="math inline">\([\alpha A]_{ij} = \alpha a_{ij}\)</span></p><h2 id="矩阵和向量相乘">4. 矩阵和向量相乘</h2><p><span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A=[a_{ij}]\)</span> 与 <spanclass="math inline">\(r \times 1\)</span> 向量 <spanclass="math inline">\(x=[x_1,x_2,\dots,x_r]^\mathrm{T}\)</span> 的乘积<span class="math inline">\(Ax\)</span> 只有当 <spanclass="math inline">\(n = r\)</span> 时才存在, 它是一个 <spanclass="math inline">\(m \times 1\)</span> 向量, 定义为:</p><p><span class="math display">\[[Ax]_i = \sum_{j=1}^{n}a_{ij}x_{j}, \quad i=1,2,\dots,m \tag{11}\]</span></p><h2 id="矩阵和矩阵相乘">5. 矩阵和矩阵相乘</h2><p><span class="math inline">\(m \times n\)</span> 矩阵 <spanclass="math inline">\(A=[a_{ij}]\)</span> 与 <spanclass="math inline">\(r \times s\)</span> 矩阵 <spanclass="math inline">\(B=[b_{ij}]\)</span> 的乘积 <spanclass="math inline">\(AB\)</span> 只有当 <spanclass="math inline">\(n=r\)</span> 时才存在, 它是一个 <spanclass="math inline">\(m \times n\)</span> 矩阵, 定义为：</p><p><span class="math display">\[[AB]_{ij} = \sum_{k=1}^{n}a_{ik}b_{kj}, \quad i=1,2,\dots,m;\quadj=1,2,\dots,s; \tag{12}\]</span></p><h2 id="运算规则">6. 运算规则</h2><p>和实数运算类似, 矩阵运算也有一些与之相通的规则.</p><ul><li><p>加法交换律: <span class="math inline">\(A + B = B +A\)</span></p></li><li><p>加法结合律: <span class="math inline">\((A + B) + C = A + (B +C)\)</span></p></li></ul><p>除了加法, 矩阵还有乘法. 看矩阵是否能够分配交换结合只需要注意一点.例如矩阵 <span class="math inline">\(A_{ij}\)</span> 和 矩阵 <spanclass="math inline">\(B_{mn}\)</span> 相乘, 在之前就说过必须要 <spanclass="math inline">\(j = m\)</span> 才能相乘.那么交换分配也要满足这个式子,即前个矩阵的列数与后一个矩阵的行数一定要相等.那么我们就有乘法相关运算规则.</p><ul><li><p>乘法结合律: <span class="math inline">\(A(BC) =(AB)C\)</span></p></li><li><p>乘法左分配律: <span class="math inline">\((A+B)C = AC +BC\)</span></p></li><li><p>乘法右分配律: <span class="math inline">\(A(B+C) = AB +AC\)</span></p></li></ul><p>证明方法也很简单, 就是分别算出等式左右的式子, 然后再进行比较.</p><h2 id="逆矩阵">7. 逆矩阵</h2><p>什么叫逆矩阵？</p><p>令 <span class="math inline">\(A\)</span> 是一个 <spanclass="math inline">\(n \times n\)</span> 矩阵. 要想使 <spanclass="math inline">\(A\)</span> 可逆, 若可以找到一个 <spanclass="math inline">\(n \times n\)</span> 矩阵 <spanclass="math inline">\(A^{-1}\)</span> 满足 <spanclass="math inline">\(AA^{-1} = A^{-1}A = I\)</span>, 则称 <spanclass="math inline">\(A^{-1}\)</span> 是矩阵 <spanclass="math inline">\(A\)</span> 的逆矩阵.</p><p>逆矩阵和共轭、转置、共轭转置之间关系</p><ul><li><p>分配律: <span class="math display">\[\begin{aligned}(A+B)^* &amp;= A^* + B^* \\(A+B)^\mathrm{T} &amp;= A^\mathrm{T} + B^\mathrm{T} \\(A+B)^\mathrm{H} &amp;= A^\mathrm{H} + B^\mathrm{H}\end{aligned}\tag{13}\]</span></p></li><li><p>乘积关系: <span class="math display">\[\begin{aligned}(AB)^\mathrm{T} &amp;= B^\mathrm{T} A^\mathrm{T}\\(AB)^\mathrm{H} &amp;= B^\mathrm{H} A^\mathrm{H} \\(AB)^{-1} &amp;= B^{-1} A^{-1} (A,B为可逆方阵)\end{aligned} \tag{14}\]</span></p></li><li><p>相互转换: <span class="math display">\[(A^*)^{-1} = (A^{-1})^*, \quad (A^\mathrm{T})^{-1} =(A^{-1})^\mathrm{T}, \quad (A^\mathrm{H})^{-1} = (A^{-1})^\mathrm{H}\tag{15}\]</span></p></li><li><p>对任意矩阵 <span class="math inline">\(A\)</span>, 矩阵 <spanclass="math inline">\(B=A^{\mathrm{H}}A\)</span> 都是 <spanclass="math inline">\(Hermitian\)</span> 矩阵. 若 <spanclass="math inline">\(A\)</span> 可逆, 则对 <spanclass="math inline">\(Hermitian\)</span> 矩阵 <spanclass="math inline">\(B=A^{\mathrm{H}}A\)</span>, 有 <spanclass="math inline">\(A^{-\mathrm{H}}BA^{-1} =A^{-\mathrm{H}}A^{\mathrm{H}}AA^{-1} = I\)</span>. 矩阵 <spanclass="math inline">\(A^{-\mathrm{H}}\)</span> 表示矩阵 <spanclass="math inline">\(A^{\mathrm{H}}\)</span> 的逆矩阵.</p></li></ul><h2 id="其他">8. 其他</h2><ul><li><p>幂等矩阵 <span class="math inline">\(A_{n \times n}\)</span>：<span class="math inline">\(A^2 = AA = A\)</span></p></li><li><p>对合矩阵 <span class="math inline">\(A_{n \times n}\)</span>：<span class="math inline">\(A^2 = AA = I\)</span></p></li><li><p>复矩阵 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 内积 ：<spanclass="math inline">\(\left \langle A,B \right \rangle =A^{\mathrm{H}}B\)</span></p></li><li><p>矩阵的指数和对数: <span class="math display">\[exp(A)=\sum_{k=0}^{\infty}\frac{1}{k!}A^k \tag{16}\]</span> <span class="math display">\[log(I_n - A) = -\sum_{k=0}^{\infty}\frac{1}{k!}A^k \tag{17}\]</span></p></li></ul><p>矩阵的导数和积分就是在之前微积分的基础上对矩阵中的每个含参元素进行求导和积分.这是一个从局部到整体的过程.</p><ul><li><p>矩阵导数定义: 如果矩阵 <span class="math inline">\(A\)</span>的元素 <span class="math inline">\(a_{ij}\)</span> 都是参数 <spanclass="math inline">\(t\)</span> 的函数, 则矩阵导数定义为 <spanclass="math display">\[\frac{dA}{dt} = A =\begin{bmatrix}\frac{da_{11}}{dt}&amp;  \frac{da_{12}}{dt}&amp;  \cdots&amp;  \frac{da_{1n}}{dt}\\\frac{da_{21}}{dt}&amp;  \frac{da_{22}}{dt}&amp;  \cdots&amp;  \frac{da_{2n}}{dt}\\\vdots&amp;              \vdots&amp;              \vdots&amp;  \vdots             \\\frac{da_{m1}}{dt}&amp;  \frac{da_{m2}}{dt}&amp;  \cdots&amp;  \frac{da_{mn}}{dt}\end{bmatrix} \tag{18}\]</span></p></li><li><p>矩阵积分定义: <span class="math display">\[\frac{dA}{dt} = A =\begin{bmatrix}\int a_{11}dt&amp;  \int a_{12}dt&amp;  \cdots&amp;  \int a_{1n}dt \\\int a_{21}dt&amp;  \int a_{22}dt&amp;  \cdots&amp;  \int a_{2n}dt \\\vdots&amp;         \vdots&amp;         \vdots&amp;  \vdots        \\\int a_{m1}dt&amp;  \int a_{m2}dt&amp;  \cdots&amp;  \int a_{mn}dt\end{bmatrix} \tag{19}\]</span></p></li></ul><p>矩阵函数及其导数定义</p><ul><li><p>指数矩阵函数 <span class="math display">\[exp(At) =I+At+\frac{A^2t^2}{2!}+\frac{A^3t^3}{3!}+\dots \tag{20}\]</span></p></li><li><p>指数矩阵函数的导数 <span class="math display">\[\frac{d}{dt}exp(At)=Aexp(At)=exp(At)A \tag{21}\]</span></p></li><li><p>矩阵乘积的导数 <span class="math display">\[\frac{d}{dt}(AB)=\frac{dA}{dt}B + A\frac{dB}{dt} \tag{22}\]</span></p></li></ul><p>其中, <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 都是变量 <spanclass="math inline">\(t\)</span> 的矩阵函数.指数矩阵的导数很像指数函数求导, 矩阵乘积的导数又像对乘积的求导法则.变化无非是从单个函数变成了以矩阵组织的多个函数.</p><h1id="三向量的线性无关性与非奇异矩阵">三、向量的线性无关性与非奇异矩阵</h1><h2 id="线性无关性">1. 线性无关性</h2><p>在最开始提到的 <span class="math inline">\(m \times n\)</span>线性方程组, 可以写成 <span class="math inline">\(Ax=b\)</span>, 用向量<span class="math inline">\(a_n\)</span> 表示 <spanclass="math inline">\(A\)</span> 可得 <spanclass="math inline">\(A=[a_1,a_2,\dots,a_n]\)</span>.此时方程可以化简为： <span class="math display">\[a_1x_1 + a_2x_2 + \dots +a_nx_n = b\]</span></p><p>并称为列向量 <span class="math inline">\(a_1,a_2,\dots,a_n\)</span>的线性组合.</p><p>一组 <span class="math inline">\(m\)</span> 维向量组 <spanclass="math inline">\({u_1,u_2,\dots,u_n}\)</span> 称为线性无关, 若方程<span class="math display">\[c_1u_1 + c_2u_2 + \dots + c_nu_n = 0\]</span></p><p>只有零解 <span class="math inline">\(c_1 = c_2 = \dots = c_n =0\)</span>. 要是找到一组不为 0 的解就称这个向量组线性相关.</p><p>若向量组线性无关, 那么方程就有唯一零解.</p><h2 id="非奇异矩阵">2. 非奇异矩阵</h2><p>奇异这个词语听起来很奇怪, 倒不如把它理解为奇怪的意思.奇怪的矩阵和不是奇怪的矩阵. 那么矩阵奇怪在哪个地方呢？</p><p>之前看 MIT 的课程, Gilbert Strang说过要是这个可逆就会拥有一系列的优秀性质, 就能给计算提供极大的帮助,这样它就不奇怪了.</p><p>所谓可逆, 就是和之前线性无关性相对应. 如果一个向量组线性无关,那么方程只有 0 解, 那么这个矩阵就可逆, 就被称为非奇异矩阵. 特殊的是,这句话只存在于这个矩阵是一个 <span class="math inline">\(n \timesn\)</span> 的方阵.</p><h1 id="四初等行变换与阶梯型矩阵">四、初等行变换与阶梯型矩阵</h1><h2 id="初等行变换">1. 初等行变换</h2><p>这部分是矩阵运算中的精髓,开始之前我们需要了解一下矩阵的一部分性质.</p><ul><li><p>互换矩阵任意两行叫做 I 型初等行变换.</p></li><li><p>矩阵中一行元素乘以一个非 0 常数 <spanclass="math inline">\(\alpha\)</span>, 称为 II 型初等行变换.</p></li><li><p>矩阵中一行元素乘以一个非 0 常数 <spanclass="math inline">\(\beta\)</span>, 然后加给另一行, 称为 III型初等行变换.</p></li></ul><p>最重要的一点就是通过初等行变换的两个矩阵是等价的.</p><h2 id="阶梯型矩阵">2. 阶梯型矩阵</h2><p>阶梯型矩阵需要满足的条件:</p><ul><li><p>全为 0 的行在矩阵最下面.</p></li><li><p>非零行从左往右数第一个非零元素总是出现在上一行左往右数第一个非零元素右边.</p></li><li><p>非零行从左往右数第一个非零元素下面同一列元素要为0.</p></li></ul><p>举例： <span class="math display">\[A=\begin{bmatrix}  1&amp;  0&amp;  3&amp;  0 \\  0&amp;  2&amp;  4&amp;  0 \\  0&amp;  0&amp;  0&amp;  0 \\  0&amp;  0&amp;  8&amp;  3\end{bmatrix} \tag{example 1}\]</span></p><p><span class="math inline">\(A\)</span>矩阵不是阶梯型矩阵,因为第三行全0行不在矩阵最下面.</p><p><span class="math display">\[B=\begin{bmatrix}  0&amp;  1&amp;  3&amp;  0 \\  2&amp;  0&amp;  4&amp;  0 \\  0&amp;  0&amp;  4&amp;  0 \\  0&amp;  0&amp;  0&amp;  3\end{bmatrix} \tag{example 2}\]</span></p><p><span class="math inline">\(B\)</span>矩阵不是阶梯型矩阵,因为第二行首个非 0 元素 2 在第一行首个非 0 元素 1 的左边.</p><p><span class="math display">\[C=\begin{bmatrix}  1&amp;  1&amp;  3&amp;  0 \\  0&amp;  2&amp;  4&amp;  0 \\  0&amp;  2&amp;  4&amp;  0 \\  0&amp;  0&amp;  0&amp;  3\end{bmatrix} \tag{example 3}\]</span></p><p><span class="math inline">\(C\)</span>矩阵不是阶梯型矩阵,因为第二行首个非 0 元素 2 同一列下面元素为 2 和 0, 而不是全 0.</p><p><span class="math display">\[D=\begin{bmatrix}  1&amp;  1&amp;  3&amp;  0 \\  0&amp;  2&amp;  4&amp;  0 \\  0&amp;  0&amp;  4&amp;  0 \\  0&amp;  0&amp;  0&amp;  3\end{bmatrix} \tag{example 4}\]</span></p><p><span class="math inline">\(D\)</span>矩阵是阶梯型矩阵,满足阶梯型矩阵的三个条件.</p><h1id="五基于初等行变换的矩阵方程求解">五、基于初等行变换的矩阵方程求解</h1><p>步骤就是通过初等行变换将矩阵转换为阶梯型矩阵. 没有什么概念,那么我就通过实际解决一个问题来展示.</p><p>求解方程组: <span class="math display">\[\left\{\begin{array}{r}    -3x_1 +  6x_2 - x_3  = 1 \\     3x_1 -  2x_2 + 4x_3 = 0 \\     6x_1 -  4x_2 + 5x_3 = 8\end{array}\right.\]</span></p><p>根据方程组可以将其转化为 <spanclass="math inline">\(Ax=b\)</span></p><p>其中矩阵 <span class="math inline">\(A\)</span> 为 <spanclass="math display">\[A = \begin{bmatrix}  -3&amp;   6&amp;  -1 \\   3&amp;  -2&amp;   4 \\   6&amp;  -4&amp;   5\end{bmatrix}\]</span></p><p>向量 <span class="math inline">\(b\)</span> 为 <spanclass="math display">\[b = \begin{bmatrix}  1 \\  0 \\  8\end{bmatrix}\]</span></p><p>根据解决的办法, 将向量 <span class="math inline">\(b\)</span>做为新的一列添加到 <span class="math inline">\(A\)</span> 中得 <spanclass="math inline">\(A&#39;\)</span> <span class="math display">\[A&#39; = \begin{bmatrix}  -3&amp;   6&amp;  -1&amp;  1 \\   3&amp;  -2&amp;   4&amp;  0 \\   6&amp;  -4&amp;   5&amp;  8\end{bmatrix}\]</span></p><p>可得矩阵 <span class="math inline">\(A&#39;\)</span> 是一个 <spanclass="math inline">\(3 \times 5\)</span> 的矩阵.</p><p>Step1: 第一行乘以 1 加到第二行, 第一行乘以 2 加到第 3 行得到 <spanclass="math display">\[A&#39;_1 = \begin{bmatrix}  -3&amp;   6&amp;  -1&amp;  1 \\   0&amp;   4&amp;   3&amp;  1 \\   6&amp;  -4&amp;   5&amp;  8\end{bmatrix}\]</span></p><p>Step2: 第一行乘以 2 加到第 3 行得到 <span class="math display">\[A&#39;_2 = \begin{bmatrix}  -3&amp;   6&amp;  -1&amp;  1 \\   0&amp;   4&amp;   3&amp;  1 \\   0&amp;   8&amp;   3&amp;  10\end{bmatrix}\]</span></p><p>Step3: 第二行乘以 -2 加到第三行得到 <span class="math display">\[A&#39;_3 = \begin{bmatrix}  -3&amp;   6&amp;  -1&amp;  1 \\   0&amp;   4&amp;   3&amp;  1 \\   0&amp;   0&amp;  -3&amp;  8\end{bmatrix}\]</span></p><p>至此得到了阶梯型矩阵 <span class="math inline">\(A&#39;_3\)</span>.为了方便计算再次化简使得 <span class="math inline">\(A\)</span>矩阵那部分主对角线值为 1</p><p>Step4: 第一行除以 -3 , 第二行除以 4 , 第三行除以 -3 得 <spanclass="math display">\[A&#39;_4 = \begin{bmatrix}  1&amp;   -2&amp;  1/3&amp;  -1/3 \\  0&amp;   1&amp;   3/4&amp;   1/4 \\  0&amp;   0&amp;     1&amp;  -8/3\end{bmatrix}\]</span></p><p>所以就有方程组 <span class="math display">\[\left\{\begin{array}{l}    x_1 - 2x_2 + \frac{1}{3}x_3 = -\frac{1}{3} \\    x_2 + \frac{3}{4}x_3 = \frac{1}{4} \\    x_3 = -\frac{8}{3}\end{array}\right.\]</span></p><p>更容易得到 <span class="math display">\[\left\{\begin{array}{l}    x_1 = \frac{91}{18}\\    x_2 = \frac{9}{4}\\    x_3 = -\frac{8}{3}\end{array}\right.\]</span></p><p>至此求出了矩阵方程的解.</p><p>如果方程组右边为全0, 这样就被叫做齐次线性方程组 <spanclass="math display">\[\left\{\begin{array}{c}    a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=0 \\    a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=0 \\    \cdots \\    a_{m1}x_1+a_{m2}x_2+\cdots+a_{mn}x_n=0\end{array}\right.\]</span></p><p>显然 <spanclass="math inline">\(x=[0,0,\dots,0]^{\mathrm{T}}\)</span>是这个齐次线性方程组的一个解. 这样全零解称为平凡解,平凡解之外的其他任何解被称为非平凡解.</p><p>对于复矩阵方程 <span class="math inline">\(A_{m \times n}x_{n \times1} = b_{m \times 1}\)</span> 都可以写为</p><p><span class="math display">\[(A_r + jA_i)(x_r + jx_i) = b_r + jb_i \tag{23}\]</span></p><p>式中, <span class="math inline">\(A_r,x_r,b_r\)</span> 和 <spanclass="math inline">\(A_i,x_i,b_i\)</span> 分别代表 <spanclass="math inline">\(A,x,b\)</span> 的实部和虚部. 展开式子 （14）得</p><p><span class="math display">\[A_rx_r - A_ix_i = b_r \tag{24}\]</span></p><p><span class="math display">\[A_ix_r + A_rx_i = b_i \tag{25}\]</span></p><p>利用矩阵分块形式, 上式可合并为 <span class="math display">\[\begin{bmatrix}  A_r&amp;   -A_i \\  A_i&amp;    A_r\end{bmatrix}\begin{bmatrix}  x_r \\  x_i\end{bmatrix}=\begin{bmatrix}  b_r \\  b_i\end{bmatrix} \tag{26}\]</span></p><p>于是, 含 <span class="math inline">\(n\)</span> 个复未知数的 <spanclass="math inline">\(m\)</span> 个复方程转变为含 <spanclass="math inline">\(2n\)</span> 个实未知数的 <spanclass="math inline">\(2m\)</span> 个实方程.</p>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
      <category>矩阵分析与应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day33</title>
    <link href="/posts/2e6a7a7a/"/>
    <url>/posts/2e6a7a7a/</url>
    
    <content type="html"><![CDATA[<h1 id="主动学习之-alec">主动学习之 ALEC</h1><h2 id="一半监督学习">一、半监督学习</h2><p>在第 28 天的时候谈到了针对分类问题的监督式学习和无监督式学习.无监督式学习相对监督式的优点就是不需要标签, 分类结果正确与否有待商榷.监督式学习需要的数据集含有标签, 就能更加容易确定分类的正确性.</p><p>但是在现实世界中的数据集并不是全部都有标签,可能只有数据集合中一少部分数据具有标签.针对这个问题就提出了半监督式学习.</p><p>例如在第一阶段 A 中, 给出含有 1000 个样本的数据集 S1. S1 中 100个样本带有标签, 剩余 900 个样本没有标签. 我们通过 S1 中 1000个样本来生成一个分类器 Classfy. 在第二阶段 B 中, 给出不同于数据集 S1中所有样本的数据集 S2. S2 中含有 500 个新的样本, 此时再使用分类器Classfy 对其进行分类.</p><p>在这里需要关注的点就是数据集 S1 中那没有标签的 900 个样本会对分类器Classfy 的精度产生什么样的影响.</p><h2 id="二主动学习">二、主动学习</h2><h3 id="数据集操作">1. 数据集操作</h3><p>在主动学习之前有两个概念叫做 Close World 和 Open World.</p><p>Close World 顾名思义就是在一个封闭的数据集操作. 例如上午给定 1000个样本, 有权查询其中 100 个样本. 建立分类器后对其它 900个样本进行分类.</p><p>不同于 Close World 的 Close, Open World 需要两部分样本.一部分用于构建分类器, 另一部分用于测试. 例如上午给定 1000 个样本,有权查询其中 100 个样本, 并建立分类器. 下午给定 500 个新样本,要求分类.</p><p>为什么只能选样本中的一部分?这不就和半监督学习中部分有标记样本不谋而合吗.</p><h3 id="场景解释">2. 场景解释</h3><p>首先机器学习算法从有标签的数据集中学习到一个分类器,然后再从没有标签的数据集中选择一些样本交由人工标注标签.然后将这部分有标签的样本加入到含标签数据集中. 简要过程如 图 1 所示.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022513203117.png" /></p><center>图 1. 主动学习场景</center><p>其中 labled training set 表示有标签的数据集. Machine Learning Model表示从有标签的数据集中所得到的分类器. unlabeled pool表示没有标签的数据集. oracle 表示人工,在流程中起到对无标签样本进行标注标签的作用.</p><h2 id="三三支主动学习">三、三支主动学习</h2><p>基于聚类的主动学习如下 图 2 所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022513204150.png" /></p><center>图 2. 三支主动学习</center><p>整体上看样本 7 和 样本 11 都存在下划线, 表示对这两个样本进行了查询.两个样本后的 + - 号表示所属的类别, 并以此来对其进行聚类.两个样本分别做为两棵树的根节点对整棵树进行划分.形成的两棵新树就是两个簇.</p><p>不断重复这个过程, 直到每个聚类形成的簇中全为 + 或者 全为 - 就表示簇为pure 然后退出运行.</p><p>如果出现极端情况, 每一个样本为一簇.此时我们就规定每一簇中最少要有多少个样本, 在簇不为 pure 时让其"少数服从多数".</p><p>基于这样的思想提出 ALEC 算法.</p><h2 id="四alec算法">四、ALEC算法</h2><h3 id="思路">1. 思路</h3><p>ALEC 算法的关键就是选择需要查询的样本.</p><p>这个选择需要一个叫做 Density 的值,并用来评估样本的重要性和独立性.</p><ol type="1"><li><p>以样本 X 为中心, dc 为半径, 一维数据可以获得一个区间,二维数据可以获得一个圆, 三维数据可以获得一个球,四维数据可以获得一个超球. 在获得的区间或图形中有多少个样本, 则 X 的密度Density 就取该值. 值越大, 样本重要性越高.</p></li><li><p>比样本 X1 的 Density 更高, 并且离它最近的样本 X2 的距离表示该样本X 的独立性. 值越大, 表示独立性越高.</p></li></ol><p>样本的独立性与重要性的乘积称为代表性, 以此来对样本进行选择.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> activelearning;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">import</span> weka.core.Instances;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Active learning through density clustering.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alec</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The whole dataset.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The maximal number of queries that can be provided.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> maxNumQuery;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The actual number of queries.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numQuery;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The radius, also dc in the paper. It is employed for density computation.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The densities of instances, also rho in the paper.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] densities;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * distanceToMaster</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] distanceToMaster;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sorted indices, where the first element indicates the instance with the</span><br><span class="hljs-comment">     * biggest density.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] descendantDensities;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Priority</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] priority;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The maximal distance between any pair of points.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> maximalDistance;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Who is my master?</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] masters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Predicted labels.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] predictedLabels;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Instance status. 0 for unprocessed, 1 for queried, 2 for classified.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] instanceStatusArray;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The descendant indices to show the representativeness of instances in a</span><br><span class="hljs-comment">     * descendant order.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] descendantRepresentatives;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Indicate the cluster of each instance. It is only used in</span><br><span class="hljs-comment">     * clusterInTwo(int[]);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] clusterIndices;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Blocks with size no more than this threshold should not be split further.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">smallBlockThreshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * The constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The data filename.</span><br><span class="hljs-comment">     *                     *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alec</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">tempReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(tempReader);<br>            dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>            tempReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Alec Error&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of fry</span><br>        computeMaximalDistance();<br>        clusterIndices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>    &#125;<span class="hljs-comment">// Of the constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Merge sort in descendant order to obtain an index array. The original</span><br><span class="hljs-comment">     * array is unchanged. The method should be tested further. &lt;br&gt;</span><br><span class="hljs-comment">     * Examples: input [1.2, 2.3, 0.4, 0.5], output [1, 0, 3, 2]. &lt;br&gt;</span><br><span class="hljs-comment">     * input [3.1, 5.2, 6.3, 2.1, 4.4], output [2, 1, 4, 0, 3].</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraArray the original array</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The sorted indices.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] mergeSortToIndices(<span class="hljs-type">double</span>[] paraArray) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempLength</span> <span class="hljs-operator">=</span> paraArray.length;<br>        <span class="hljs-type">int</span>[][] resultMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][tempLength];<span class="hljs-comment">// For merge sort.</span><br><br>        <span class="hljs-comment">// Initialize</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempLength; i++) &#123;<br>            resultMatrix[tempIndex][i] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Merge</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempCurrentLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// The indices for current merged groups.</span><br>        <span class="hljs-type">int</span> tempFirstStart, tempSecondStart, tempSecondEnd;<br><br>        <span class="hljs-keyword">while</span> (tempCurrentLength &lt; tempLength) &#123;<br>            <span class="hljs-comment">// Divide into a number of groups.</span><br>            <span class="hljs-comment">// Here the boundary is adaptive to array length not equal to 2^k.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Math.ceil((tempLength + <span class="hljs-number">0.0</span>) / tempCurrentLength / <span class="hljs-number">2</span>); i++) &#123;<br>                <span class="hljs-comment">// Boundaries of the group</span><br>                tempFirstStart = i * tempCurrentLength * <span class="hljs-number">2</span>;<br><br>                tempSecondStart = tempFirstStart + tempCurrentLength;<br><br>                tempSecondEnd = tempSecondStart + tempCurrentLength - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (tempSecondEnd &gt;= tempLength) &#123;<br>                    tempSecondEnd = tempLength - <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-comment">// Merge this group</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempFirstIndex</span> <span class="hljs-operator">=</span> tempFirstStart;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempSecondIndex</span> <span class="hljs-operator">=</span> tempSecondStart;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempCurrentIndex</span> <span class="hljs-operator">=</span> tempFirstStart;<br><br>                <span class="hljs-keyword">if</span> (tempSecondStart &gt;= tempLength) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> tempFirstIndex; j &lt; tempLength; j++) &#123;<br>                        resultMatrix[(tempIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>][tempCurrentIndex] = resultMatrix[tempIndex<br>                                % <span class="hljs-number">2</span>][j];<br>                        tempFirstIndex++;<br>                        tempCurrentIndex++;<br>                    &#125; <span class="hljs-comment">// Of for j</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-keyword">while</span> ((tempFirstIndex &lt;= tempSecondStart - <span class="hljs-number">1</span>)<br>                        &amp;&amp; (tempSecondIndex &lt;= tempSecondEnd)) &#123;<br><br>                    <span class="hljs-keyword">if</span> (paraArray[resultMatrix[tempIndex<br>                            % <span class="hljs-number">2</span>][tempFirstIndex]] &gt;= paraArray[resultMatrix[tempIndex<br>                            % <span class="hljs-number">2</span>][tempSecondIndex]]) &#123;<br>                        resultMatrix[(tempIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>][tempCurrentIndex] = resultMatrix[tempIndex<br>                                % <span class="hljs-number">2</span>][tempFirstIndex];<br>                        tempFirstIndex++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        resultMatrix[(tempIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>][tempCurrentIndex] = resultMatrix[tempIndex<br>                                % <span class="hljs-number">2</span>][tempSecondIndex];<br>                        tempSecondIndex++;<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                    tempCurrentIndex++;<br>                &#125; <span class="hljs-comment">// Of while</span><br><br>                <span class="hljs-comment">// Remaining part</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> tempFirstIndex; j &lt; tempSecondStart; j++) &#123;<br>                    resultMatrix[(tempIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>][tempCurrentIndex] = resultMatrix[tempIndex<br>                            % <span class="hljs-number">2</span>][j];<br>                    tempCurrentIndex++;<br>                &#125; <span class="hljs-comment">// Of for j</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> tempSecondIndex; j &lt;= tempSecondEnd; j++) &#123;<br>                    resultMatrix[(tempIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>][tempCurrentIndex] = resultMatrix[tempIndex<br>                            % <span class="hljs-number">2</span>][j];<br>                    tempCurrentIndex++;<br>                &#125; <span class="hljs-comment">// Of for j</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            tempCurrentLength *= <span class="hljs-number">2</span>;<br>            tempIndex++;<br>        &#125; <span class="hljs-comment">// Of while</span><br><br>        <span class="hljs-keyword">return</span> resultMatrix[tempIndex % <span class="hljs-number">2</span>];<br>    &#125;<span class="hljs-comment">// Of mergeSortToIndices</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * The Euclidean distance between two instances. Other distance measures</span><br><span class="hljs-comment">     * unsupported for simplicity.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraI The index of the first instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraJ The index of the second instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The distance.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distance</span><span class="hljs-params">(<span class="hljs-type">int</span> paraI, <span class="hljs-type">int</span> paraJ)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultDistance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> tempDifference;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numAttributes() - <span class="hljs-number">1</span>; i++) &#123;<br>            tempDifference = dataset.instance(paraI).value(i) - dataset.instance(paraJ).value(i);<br>            resultDistance += tempDifference * tempDifference;<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        resultDistance = Math.sqrt(resultDistance);<br><br>        <span class="hljs-keyword">return</span> resultDistance;<br>    &#125;<span class="hljs-comment">// Of distance</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Compute the maximal distance. The result is stored in a member variable.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeMaximalDistance</span><span class="hljs-params">()</span> &#123;<br>        maximalDistance = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> tempDistance;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dataset.numInstances(); j++) &#123;<br>                tempDistance = distance(i, j);<br>                <span class="hljs-keyword">if</span> (maximalDistance &lt; tempDistance) &#123;<br>                    maximalDistance = tempDistance;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;maximalDistance = &quot;</span> + maximalDistance);<br>    &#125;<span class="hljs-comment">// Of computeMaximalDistance</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Compute the densities using Gaussian kernel.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeDensitiesGaussian</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;radius = &quot;</span> + radius);<br>        densities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numInstances()];<br>        <span class="hljs-type">double</span> tempDistance;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dataset.numInstances(); j++) &#123;<br>                tempDistance = distance(i, j);<br>                densities[i] += Math.exp(-tempDistance * tempDistance / radius / radius);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;The densities are &quot;</span> + Arrays.toString(densities) + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    &#125;<span class="hljs-comment">// Of computeDensitiesGaussian</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Compute distanceToMaster, the distance to its master.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeDistanceToMaster</span><span class="hljs-params">()</span> &#123;<br>        distanceToMaster = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numInstances()];<br>        masters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>        descendantDensities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>        instanceStatusArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br><br>        descendantDensities = mergeSortToIndices(densities);<br>        distanceToMaster[descendantDensities[<span class="hljs-number">0</span>]] = maximalDistance;<br><br>        <span class="hljs-type">double</span> tempDistance;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            <span class="hljs-comment">// Initialize.</span><br>            distanceToMaster[descendantDensities[i]] = maximalDistance;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= i - <span class="hljs-number">1</span>; j++) &#123;<br>                tempDistance = distance(descendantDensities[i], descendantDensities[j]);<br>                <span class="hljs-keyword">if</span> (distanceToMaster[descendantDensities[i]] &gt; tempDistance) &#123;<br>                    distanceToMaster[descendantDensities[i]] = tempDistance;<br>                    masters[descendantDensities[i]] = descendantDensities[j];<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        System.out.println(<span class="hljs-string">&quot;First compute, masters = &quot;</span> + Arrays.toString(masters));<br>        System.out.println(<span class="hljs-string">&quot;descendantDensities = &quot;</span> + Arrays.toString(descendantDensities));<br>    &#125;<span class="hljs-comment">// Of computeDistanceToMaster</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Compute priority. Element with higher priority is more likely to be</span><br><span class="hljs-comment">     * selected as a cluster center. Now it is rho * distanceToMaster. It can</span><br><span class="hljs-comment">     * also be rho^alpha * distanceToMaster.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computePriority</span><span class="hljs-params">()</span> &#123;<br>        priority = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[dataset.numInstances()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            priority[i] = densities[i] * distanceToMaster[i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of computePriority</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * The block of a node should be same as its master. This recursive method</span><br><span class="hljs-comment">     * is efficient.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraIndex The index of the given node.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The cluster index of the current node.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">coincideWithMaster</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (clusterIndices[paraIndex] == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempMaster</span> <span class="hljs-operator">=</span> masters[paraIndex];<br>            clusterIndices[paraIndex] = coincideWithMaster(tempMaster);<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-keyword">return</span> clusterIndices[paraIndex];<br>    &#125;<span class="hljs-comment">// Of coincideWithMaster</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Cluster a block in two. According to the master tree.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBlock The given block.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The new blocks where the two most represent instances serve as the root.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] clusterInTwo(<span class="hljs-type">int</span>[] paraBlock) &#123;<br>        <span class="hljs-comment">// Reinitialize. In fact, only instances in the given block is</span><br>        <span class="hljs-comment">// considered.</span><br>        Arrays.fill(clusterIndices, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// Initialize the cluster number of the two roots.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            clusterIndices[paraBlock[i]] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : paraBlock) &#123;<br>            <span class="hljs-keyword">if</span> (clusterIndices[j] != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// Already have a cluster number.</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            clusterIndices[j] = coincideWithMaster(masters[j]);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// The sub blocks.</span><br>        <span class="hljs-type">int</span>[][] resultBlocks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempFistBlockCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> clusterIndex : clusterIndices) &#123;<br>            <span class="hljs-keyword">if</span> (clusterIndex == <span class="hljs-number">0</span>) &#123;<br>                tempFistBlockCount++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        resultBlocks[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempFistBlockCount];<br>        resultBlocks[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraBlock.length - tempFistBlockCount];<br><br>        <span class="hljs-comment">// Copy. You can design shorter code when the number of clusters is</span><br>        <span class="hljs-comment">// greater than 2.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempFirstIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempSecondIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : paraBlock) &#123;<br>            <span class="hljs-keyword">if</span> (clusterIndices[j] == <span class="hljs-number">0</span>) &#123;<br>                resultBlocks[<span class="hljs-number">0</span>][tempFirstIndex] = j;<br>                tempFirstIndex++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                resultBlocks[<span class="hljs-number">1</span>][tempSecondIndex] = j;<br>                tempSecondIndex++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Split (&quot;</span> + paraBlock.length + <span class="hljs-string">&quot;) instances &quot;</span><br>                + Arrays.toString(paraBlock) + <span class="hljs-string">&quot;\r\nto (&quot;</span> + resultBlocks[<span class="hljs-number">0</span>].length + <span class="hljs-string">&quot;) instances &quot;</span><br>                + Arrays.toString(resultBlocks[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;\r\nand (&quot;</span> + resultBlocks[<span class="hljs-number">1</span>].length<br>                + <span class="hljs-string">&quot;) instances &quot;</span> + Arrays.toString(resultBlocks[<span class="hljs-number">1</span>]));<br>        <span class="hljs-keyword">return</span> resultBlocks;<br>    &#125;<span class="hljs-comment">// Of clusterInTwo</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Classify instances in the block by simple voting.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBlock The given block.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">vote</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraBlock)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempClassCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numClasses()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : paraBlock) &#123;<br>            <span class="hljs-keyword">if</span> (instanceStatusArray[j] == <span class="hljs-number">1</span>) &#123;<br>                tempClassCounts[(<span class="hljs-type">int</span>) dataset.instance(j).classValue()]++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMaxClass</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMaxCount</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempClassCounts.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempMaxCount &lt; tempClassCounts[i]) &#123;<br>                tempMaxClass = i;<br>                tempMaxCount = tempClassCounts[i];<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Classify unprocessed instances.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : paraBlock) &#123;<br>            <span class="hljs-keyword">if</span> (instanceStatusArray[j] == <span class="hljs-number">0</span>) &#123;<br>                predictedLabels[j] = tempMaxClass;<br>                instanceStatusArray[j] = <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of vote</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Cluster based active learning. Prepare for</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRatio               The ratio of the maximal distance as the dc.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraMaxNumQuery         The maximal number of queries for the whole dataset.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraSmallBlockThreshold The small block threshold.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clusterBasedActiveLearning</span><span class="hljs-params">(<span class="hljs-type">double</span> paraRatio, <span class="hljs-type">int</span> paraMaxNumQuery,</span><br><span class="hljs-params">                                           <span class="hljs-type">int</span> paraSmallBlockThreshold)</span> &#123;<br>        radius = maximalDistance * paraRatio;<br>        smallBlockThreshold = paraSmallBlockThreshold;<br><br>        maxNumQuery = paraMaxNumQuery;<br>        predictedLabels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            predictedLabels[i] = -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        computeDensitiesGaussian();<br>        computeDistanceToMaster();<br>        computePriority();<br>        descendantRepresentatives = mergeSortToIndices(priority);<br>        System.out.println(<br>                <span class="hljs-string">&quot;descendantRepresentatives = &quot;</span> + Arrays.toString(descendantRepresentatives));<br><br>        numQuery = <span class="hljs-number">0</span>;<br>        clusterBasedActiveLearning(descendantRepresentatives);<br>    &#125;<span class="hljs-comment">// Of clusterBasedActiveLearning</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Cluster based active learning.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBlock The given block. This block must be sorted according to the priority in descendant order.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clusterBasedActiveLearning</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraBlock)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;clusterBasedActiveLearning for block &quot;</span> + Arrays.toString(paraBlock));<br><br>        <span class="hljs-comment">// Step 1. How many labels are queried for this block.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempExpectedQueries</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) Math.sqrt(paraBlock.length);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumQuery</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : paraBlock) &#123;<br>            <span class="hljs-keyword">if</span> (instanceStatusArray[j] == <span class="hljs-number">1</span>) &#123;<br>                tempNumQuery++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 2. Vote for small blocks.</span><br>        <span class="hljs-keyword">if</span> ((tempNumQuery &gt;= tempExpectedQueries) &amp;&amp; (paraBlock.length &lt;= smallBlockThreshold)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempNumQuery + <span class="hljs-string">&quot; instances are queried, vote for block: \r\n&quot;</span><br>                    + Arrays.toString(paraBlock));<br>            vote(paraBlock);<br><br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-comment">// Step 3. Query enough labels.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempExpectedQueries; i++) &#123;<br>            <span class="hljs-keyword">if</span> (numQuery &gt;= maxNumQuery) &#123;<br>                System.out.println(<span class="hljs-string">&quot;No more queries are provided, numQuery = &quot;</span> + numQuery + <span class="hljs-string">&quot;.&quot;</span>);<br>                vote(paraBlock);<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            <span class="hljs-keyword">if</span> (instanceStatusArray[paraBlock[i]] == <span class="hljs-number">0</span>) &#123;<br>                instanceStatusArray[paraBlock[i]] = <span class="hljs-number">1</span>;<br>                predictedLabels[paraBlock[i]] = (<span class="hljs-type">int</span>) dataset.instance(paraBlock[i]).classValue();<br>                numQuery++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 4. Pure?</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempFirstLabel</span> <span class="hljs-operator">=</span> predictedLabels[paraBlock[<span class="hljs-number">0</span>]];<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tempPure</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; tempExpectedQueries; i++) &#123;<br>            <span class="hljs-keyword">if</span> (predictedLabels[paraBlock[i]] != tempFirstLabel) &#123;<br>                tempPure = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">if</span> (tempPure) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Classify for pure block: &quot;</span> + Arrays.toString(paraBlock));<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> tempExpectedQueries; i &lt; paraBlock.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (instanceStatusArray[paraBlock[i]] == <span class="hljs-number">0</span>) &#123;<br>                    predictedLabels[paraBlock[i]] = tempFirstLabel;<br>                    instanceStatusArray[paraBlock[i]] = <span class="hljs-number">2</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-comment">// Step 5. Split in two and process them independently.</span><br>        <span class="hljs-type">int</span>[][] tempBlocks = clusterInTwo(paraBlock);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-comment">// Attention: recursive invoking here.</span><br>            clusterBasedActiveLearning(tempBlocks[i]);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of clusterBasedActiveLearning</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************</span><br><span class="hljs-comment">     * Show the statistics information.</span><br><span class="hljs-comment">     * ******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] tempStatusCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>            tempStatusCounts[instanceStatusArray[i]]++;<br>            <span class="hljs-keyword">if</span> (predictedLabels[i] == (<span class="hljs-type">int</span>) dataset.instance(i).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(unhandled, queried, classified) = &quot;</span><br>                + Arrays.toString(tempStatusCounts);<br>        resultString += <span class="hljs-string">&quot;\r\nCorrect = &quot;</span> + tempCorrect + <span class="hljs-string">&quot;, accuracy = &quot;</span><br>                + (tempCorrect / dataset.numInstances());<br><br>        <span class="hljs-keyword">return</span> resultString;<br>    &#125;<span class="hljs-comment">// Of toString</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * The entrance of the program.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args: Not used now.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">tempStart</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;Starting ALEC.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">arffFilename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>;<br><br><br>        <span class="hljs-type">Alec</span> <span class="hljs-variable">tempAlec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Alec</span>(arffFilename);<br>        <span class="hljs-comment">// The settings for iris</span><br>        tempAlec.clusterBasedActiveLearning(<span class="hljs-number">0.15</span>, <span class="hljs-number">30</span>, <span class="hljs-number">3</span>);<br><br>        System.out.println(tempAlec);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">tempEnd</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;Runtime: &quot;</span> + (tempEnd - tempStart) + <span class="hljs-string">&quot;ms.&quot;</span>);<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class Alec</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><img src="https://img.omnitrix.top/MDImage/img/2022513212646.png" /><img src="https://img.omnitrix.top/MDImage/img/2022513212720.png" /></p><h1 id="总结">总结</h1><p>代码太长了, 然后这部分也只梳理了简单的思想, 要想完全理解 ALEC算法还需要对代码进一步理解, 看来这部分还需要写一篇博客才能完成.想法和实现之间真的像是一条巨大的鸿沟, 加油吧.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>AdaBoosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day32</title>
    <link href="/posts/596d4aec/"/>
    <url>/posts/596d4aec/</url>
    
    <content type="html"><![CDATA[<h1 id="集成学习之-adaboosting">集成学习之 AdaBoosting</h1><h2 id="一基本思路">一、基本思路</h2><p>对于一个复杂任务来说, 将多个专家的判断进行适当的综合所得出的判断,要比其中任何一个专家单独的判断好.</p><p>实际上就是谚语中 "三个臭皮匠顶个诸葛亮" 的道理.</p><p>对于分类问题而言, 给定一个训练样本集,求比较粗糙的分类规则要比较精确的分类规则容易得多. 那么 AdaBoosting就是从这些比较粗糙的分类规则中学习并得到一系列分类器,然后通过组合这些分类器构成一个比较精确的分类器.</p><p>大多数的提升方式都是改变训练数据的概率分布或者是训练数据的权值.然后再根据不同的概率分布或者是权值调用一个分类器.</p><p>总体来看, 对于 AdaBoosting 有两个问题需要解决.</p><p>一是每一轮中如何改变训练数据的概率分布或权值.</p><p>二是如何把粗糙分类规则下生成的多个分类器组合起来形成一个拥有比较精确分类规则的分类器.</p><h2 id="二adaboosting-算法">二、AdaBoosting 算法</h2><h3 id="样本数据">1. 样本数据</h3><p>假设给定一个二类分类的训练数据集</p><p><span class="math display">\[T = \{ (x_1,y_1), (x_2,y_2), ... ,(x_N,y_N) \}\]</span></p><p>其中每个样本点由实例和类别组成. 实例 <span class="math inline">\(x_i\in X \subseteq R^n\)</span>, 类别 <span class="math inline">\(y_i \in Y= \{ -1, +1\}\)</span>. <spanclass="math inline">\(X\)</span>是实例空间, <spanclass="math inline">\(Y\)</span>是类别集合. AdaBoosting就是要在这些训练数据中得到一系列的分类器,并将这些分类器组合起来成为一个更准确的分类器.</p><p>为了方便解释, 我将训练中使用粗糙分类的分类规则叫做弱学习算法,得到的分类器叫做弱分类器. 使用精确分类的分类规则叫做强学习算法,得到的分类器叫做强分类器, 它是由多个弱分类器组合而成..</p><h3 id="算法流程">2. 算法流程</h3><p>输入:</p><ol type="1"><li><p>训练数据集 <span class="math inline">\(T = \{ (x_1,y_1),(x_2,y_2), ... ,(x_N,y_N) \}\)</span>, 其中<spanclass="math inline">\(x_i \in X \subseteq R^n\)</span>, <spanclass="math inline">\(y_i \in Y = \{ -1, +1\}\)</span>.</p></li><li><p>弱学习算法</p></li></ol><p>输出:</p><p>最终分类器 <span class="math inline">\(G(x)\)</span></p><p>Step 1 : 初始化训练数据的权值分布</p><p><span class="math display">\[D1 = (\omega_{11}, ... , \omega_{1i} , ... , \omega_{1N}), \quad\omega_{1i} = \frac{1}{N},\quad i = 1,2,...,N\]</span></p><p>Step 2 : 对弱分类器编号 <span class="math inline">\(m = 1,2, ... ,M\)</span>.</p><p>Step 2.1 : 使用具有权值分布 <span class="math inline">\(D_m\)</span>的训练数据集学习, 得到一个弱分类器.</p><p><span class="math display">\[G_m(x) : X \longrightarrow \{ -1,+1 \}\]</span></p><p>Step 2.2 : 计算 <span class="math inline">\(G_m(x)\)</span>在训练数据集上的分类误差率.</p><p><span class="math display">\[e_m = \sum_{i=1}^{N}P(G_m(x_i) \neq y_i) =\sum_{i=1}^{N}\omega_{mi}I(G_m(x_i) \neq y_i) \tag{1}\]</span></p><p>其中函数 <span class="math inline">\(I(x)\)</span> 表示指示函数.当取消 <span class="math inline">\(I(x)\)</span> 后, 式子 <spanclass="math inline">\(\sum_{i=1}^{N}\omega_{mi}= 1\)</span>.</p><p>Step 2.3 : 计算 <span class="math inline">\(G_m(x)\)</span>的系数.</p><p><span class="math display">\[\alpha_m = \frac{1}{2} \log \frac{1 - e_m}{e_m} \tag{2}\]</span></p><p>这里的 <span class="math inline">\(\log\)</span> 是自然对数.</p><p>Step 2.4 : 更新数据集的权值分布.</p><p><span class="math display">\[D_{m+1} = ((\omega_{m+1,1}),...,(\omega_{m+1,i}),...,(\omega_{m+1,N}))\tag{3}\]</span></p><p><span class="math display">\[\omega_{m+1,i} = \frac{\omega_{mi}}{Z_m}exp(-\alpha_m y_i G_m(x_i)),\quad i = 1,2,...,N \tag{4}\]</span></p><p>这里 <span class="math inline">\(Z_m\)</span> 是规范化因子</p><p><span class="math display">\[Z_m = \sum_{i=1}^{N}\omega_{mi}exp(-\alpha_m y_i G_m(x_i)) \tag{5}\]</span></p><p>(5) 式使得 <span class="math inline">\(D_{m+1}\)</span>成为一个概率分布.</p><p>Step 3 : 构建弱分类器的线性组合.</p><p><span class="math display">\[f(x) = \sum_{m=1}^{M}\alpha_m G_m(x) \tag{6}\]</span></p><p>得到最终的分类器</p><p><span class="math display">\[\begin{aligned}G(x) &amp;= sign(f(x)) \\&amp;= sign \left(\sum_{m=1}^{M} \alpha_m G_m(x)\right)\end{aligned}\tag{7}\]</span></p><p>这里的 <span class="math inline">\(sign(x)\)</span> 函数将大于 0的分为 +1, 小于 0 的分为 -1.</p><p><span class="math display">\[ sign(x)=\left\{    \begin{aligned}    +1, \quad x &gt; 0 \\    -1, \quad x &lt; 0    \end{aligned}\right.\]</span></p><h3 id="概括总结">3. 概括总结</h3><p>开始我们是假设数据集具有均匀的权值分布,只有做出这个假设才能得到最开始的分类器 <spanclass="math inline">\(G_1(x)\)</span>.</p><p>然后不断进行递推获得新的权值分布和分类器. 计算分类误差率,最后的结果就是分类错误的数据实例在更新权值的时候要多些,分类正确的对应的权值就会减少.</p><p>最后输出的分类器是之前得到分类器的权值之和,需要注意的是用于表示权值的 <span class="math inline">\(\alpha_m\)</span>之和不为 1. 在这里就需要对其进行归一化处理.</p><h2 id="三具体实现">三、具体实现</h2><h3 id="权值更新">1. 权值更新</h3><p><b>代码</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> adaboosting;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> weka.core.Instances;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Weighted instances.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeightedInstances</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Instances</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Just the requirement of some classes, any number is ok.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">11087456L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Weights.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[] weights;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFileReader The given reader to read data from file.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeightedInstances</span><span class="hljs-params">(FileReader paraFileReader)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>(paraFileReader);<br>        setClassIndex(numAttributes() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// Initialize weights</span><br>        weights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numInstances()];<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempAverage</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span> / numInstances();<br><br>        Arrays.fill(weights, tempAverage);<br>        System.out.println(<span class="hljs-string">&quot;Instances weights are: &quot;</span> + Arrays.toString(weights));<br>    &#125; <span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * The second constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstances The given instance.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeightedInstances</span><span class="hljs-params">(Instances paraInstances)</span> &#123;<br>        <span class="hljs-built_in">super</span>(paraInstances);<br>        setClassIndex(numAttributes() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// Initialize weights</span><br>        weights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numInstances()];<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempAverage</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span> / numInstances();<br><br>        Arrays.fill(weights, tempAverage);<br>        System.out.println(<span class="hljs-string">&quot;Instances weights are: &quot;</span> + Arrays.toString(weights));<br>    &#125; <span class="hljs-comment">// Of the second constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Getter.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraIndex The given index.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The weight of the given index.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> &#123;<br>        <span class="hljs-keyword">return</span> weights[paraIndex];<br>    &#125; <span class="hljs-comment">// Of getWeight</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Adjust the weights.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraCorrectArray Indicate which instances have been correctly classified.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraAlpha        The weight of the last classifier.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustWeights</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[] paraCorrectArray, <span class="hljs-type">double</span> paraAlpha)</span> &#123;<br>        <span class="hljs-comment">// Step 1. Calculate alpha.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempIncrease</span> <span class="hljs-operator">=</span> Math.exp(paraAlpha);<br><br>        <span class="hljs-comment">// Step 2. Adjust.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempWeightsSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// For normalization.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; weights.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (paraCorrectArray[i]) &#123;<br>                weights[i] /= tempIncrease;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                weights[i] *= tempIncrease;<br>            &#125; <span class="hljs-comment">// Of if</span><br>            tempWeightsSum += weights[i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 3. Normalize.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; weights.length; i++) &#123;<br>            weights[i] /= tempWeightsSum;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;After adjusting, instances weights are: &quot;</span> + Arrays.toString(weights));<br>    &#125; <span class="hljs-comment">// Of adjustWeights</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Test the method.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustWeightsTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span>[] tempCorrectArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[numInstances()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempCorrectArray.length / <span class="hljs-number">2</span>; i++) &#123;<br>            tempCorrectArray[i] = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempWeightedError</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.3</span>;<br><br>        adjustWeights(tempCorrectArray, tempWeightedError);<br><br>        System.out.println(<span class="hljs-string">&quot;After adjusting&quot;</span>);<br><br>    &#125; <span class="hljs-comment">// Of adjustWeightsTest</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * For display.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am a weighted Instances object.\r\n&quot;</span> + <span class="hljs-string">&quot;I have &quot;</span> + numInstances() + <span class="hljs-string">&quot; instances and &quot;</span><br>                + (numAttributes() - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; conditional attributes.\r\n&quot;</span> + <span class="hljs-string">&quot;My weights are: &quot;</span> + Arrays.toString(weights)<br>                + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;My data are: \r\n&quot;</span> + <span class="hljs-built_in">super</span>.toString();<br>    &#125; <span class="hljs-comment">// Of toString</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * For unit test.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not provided.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WeightedInstances</span> <span class="hljs-variable">tempWeightedInstances</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempFilename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">tempFileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(tempFilename);<br>            tempWeightedInstances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeightedInstances</span>(tempFileReader);<br>            tempFileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + tempFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + exception1);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        System.out.println(tempWeightedInstances.toString());<br><br>        tempWeightedInstances.adjustWeightsTest();<br>    &#125; <span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class WeightedInstances</span><br></code></pre></td></tr></table></figure><p><b>运行截图</b></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022511203448.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022511203531.png" /></p><h3 id="树桩分类器">2. 树桩分类器</h3><p>不一定非要使用树桩分类器, 也可以使用其他的分类器.为了代码拓展性就先写一个抽象类.</p><p><b>抽象类代码</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> adaboosting;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> weka.core.Instance;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The super class of any simple classifier.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleClassifier</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The index of the current attribute.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> selectedAttribute;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Weighted data.</span><br><span class="hljs-comment">     */</span><br>    WeightedInstances weightedInstances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The accuracy on the training set.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> trainingAccuracy;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of classes. For binary classification it is 2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numClasses;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of instances.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numInstances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of conditional attributes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numConditions;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * For random number generation.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraWeightedInstances The given instances.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleClassifier</span><span class="hljs-params">(WeightedInstances paraWeightedInstances)</span> &#123;<br>        weightedInstances = paraWeightedInstances;<br><br>        numConditions = weightedInstances.numAttributes() - <span class="hljs-number">1</span>;<br>        numInstances = weightedInstances.numInstances();<br>        numClasses = weightedInstances.classAttribute().numValues();<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Train the classifier.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Classify an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstance The given instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Predicted label.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Which instances in the training set are correctly classified.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The correctness array.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span>[] computeCorrectnessArray() &#123;<br>        <span class="hljs-type">boolean</span>[] resultCorrectnessArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[weightedInstances.numInstances()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; resultCorrectnessArray.length; i++) &#123;<br>            <span class="hljs-type">Instance</span> <span class="hljs-variable">tempInstance</span> <span class="hljs-operator">=</span> weightedInstances.instance(i);<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>) (tempInstance.classValue()) == classify(tempInstance)) &#123;<br>                resultCorrectnessArray[i] = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            <span class="hljs-comment">// System.out.print(&quot;\t&quot; + classify(tempInstance));</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-comment">// System.out.println();</span><br>        <span class="hljs-keyword">return</span> resultCorrectnessArray;<br>    &#125;<span class="hljs-comment">// Of computeCorrectnessArray</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Compute the accuracy on the training set.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The training accuracy.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeTrainingAccuracy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span>[] tempCorrectnessArray = computeCorrectnessArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : tempCorrectnessArray) &#123;<br>            <span class="hljs-keyword">if</span> (b) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / tempCorrectnessArray.length;<br>    &#125;<span class="hljs-comment">// Of computeTrainingAccuracy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Compute the weighted error on the training set. It is at least 1e-6 to</span><br><span class="hljs-comment">     * avoid NaN.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The weighted error.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeWeightedError</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultError</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span>[] tempCorrectnessArray = computeCorrectnessArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempCorrectnessArray.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!tempCorrectnessArray[i]) &#123;<br>                resultError += weightedInstances.getWeight(i);<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">if</span> (resultError &lt; <span class="hljs-number">1e-6</span>) &#123;<br>            resultError = <span class="hljs-number">1e-6</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-keyword">return</span> resultError;<br>    &#125;<span class="hljs-comment">// Of computeWeightedError</span><br>&#125; <span class="hljs-comment">//Of class SimpleClassifier</span><br></code></pre></td></tr></table></figure><p><b>树桩分类器代码</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> adaboosting;<br><br><span class="hljs-keyword">import</span> weka.core.Instance;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The stump classifier.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StumpClassifier</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleClassifier</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The best cut for the current attribute on weightedInstances.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> bestCut;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The class label for attribute value less than bestCut.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> leftLeafLabel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The class label for attribute value no less than bestCut.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> rightLeafLabel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * The only constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraWeightedInstances The given instances.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StumpClassifier</span><span class="hljs-params">(WeightedInstances paraWeightedInstances)</span> &#123;<br>        <span class="hljs-built_in">super</span>(paraWeightedInstances);<br>    &#125;<span class="hljs-comment">// Of the only constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Train the classifier.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Step 1. Randomly choose an attribute.</span><br>        selectedAttribute = random.nextInt(numConditions);<br><br>        <span class="hljs-comment">// Step 2. Find all attribute values and sort.</span><br>        <span class="hljs-type">double</span>[] tempValuesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numInstances];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempValuesArray.length; i++) &#123;<br>            tempValuesArray[i] = weightedInstances.instance(i).value(selectedAttribute);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        Arrays.sort(tempValuesArray);<br><br>        <span class="hljs-comment">// Step 3. Initialize, classify all instances as the same with the</span><br>        <span class="hljs-comment">// original cut.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumLabels</span> <span class="hljs-operator">=</span> numClasses;<br>        <span class="hljs-type">double</span>[] tempLabelCountArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempNumLabels];<br>        <span class="hljs-type">int</span> tempCurrentLabel;<br><br>        <span class="hljs-comment">// Step 3.1 Scan all labels to obtain their counts.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-comment">// The label of the ith instance</span><br>            tempCurrentLabel = (<span class="hljs-type">int</span>) weightedInstances.instance(i).classValue();<br>            tempLabelCountArray[tempCurrentLabel] += weightedInstances.getWeight(i);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 3.2 Find the label with the maximal count.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempMaxCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempBestLabel</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempLabelCountArray.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempMaxCorrect &lt; tempLabelCountArray[i]) &#123;<br>                tempMaxCorrect = tempLabelCountArray[i];<br>                tempBestLabel = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 3.3 The cut is a little smaller than the minimal value.</span><br>        bestCut = tempValuesArray[<span class="hljs-number">0</span>] - <span class="hljs-number">0.1</span>;<br>        leftLeafLabel = tempBestLabel;<br>        rightLeafLabel = tempBestLabel;<br><br>        <span class="hljs-comment">// Step 4. Check candidate cuts one by one.</span><br>        <span class="hljs-comment">// Step 4.1 To handle multi-class data, left and right.</span><br>        <span class="hljs-type">double</span> tempCut;<br>        <span class="hljs-type">double</span>[][] tempLabelCountMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">2</span>][tempNumLabels];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempValuesArray.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// Step 4.1 Some attribute values are identical, ignore them.</span><br>            <span class="hljs-keyword">if</span> (tempValuesArray[i] == tempValuesArray[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br>            tempCut = (tempValuesArray[i] + tempValuesArray[i + <span class="hljs-number">1</span>]) / <span class="hljs-number">2</span>;<br><br>            <span class="hljs-comment">// Step 4.2 Scan all labels to obtain their counts wrt. the cut.</span><br>            <span class="hljs-comment">// Initialize again since it is used many times.</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tempNumLabels; k++) &#123;<br>                    tempLabelCountMatrix[j][k] = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-comment">// Of for k</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numInstances; j++) &#123;<br>                <span class="hljs-comment">// The label of the jth instance</span><br>                tempCurrentLabel = (<span class="hljs-type">int</span>) weightedInstances.instance(j).classValue();<br>                <span class="hljs-keyword">if</span> (weightedInstances.instance(j).value(selectedAttribute) &lt; tempCut) &#123;<br>                    tempLabelCountMatrix[<span class="hljs-number">0</span>][tempCurrentLabel] += weightedInstances.getWeight(j);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    tempLabelCountMatrix[<span class="hljs-number">1</span>][tempCurrentLabel] += weightedInstances.getWeight(j);<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Step 4.3 Left leaf.</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempLeftMaxCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempLeftBestLabel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempLabelCountMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (tempLeftMaxCorrect &lt; tempLabelCountMatrix[<span class="hljs-number">0</span>][j]) &#123;<br>                    tempLeftMaxCorrect = tempLabelCountMatrix[<span class="hljs-number">0</span>][j];<br>                    tempLeftBestLabel = j;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Step 4.4 Right leaf.</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempRightMaxCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempRightBestLabel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempLabelCountMatrix[<span class="hljs-number">1</span>].length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (tempRightMaxCorrect &lt; tempLabelCountMatrix[<span class="hljs-number">1</span>][j]) &#123;<br>                    tempRightMaxCorrect = tempLabelCountMatrix[<span class="hljs-number">1</span>][j];<br>                    tempRightBestLabel = j;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Step 4.5 Compare with the current best.</span><br>            <span class="hljs-keyword">if</span> (tempMaxCorrect &lt; tempLeftMaxCorrect + tempRightMaxCorrect) &#123;<br>                tempMaxCorrect = tempLeftMaxCorrect + tempRightMaxCorrect;<br>                bestCut = tempCut;<br>                leftLeafLabel = tempLeftBestLabel;<br>                rightLeafLabel = tempRightBestLabel;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Attribute = &quot;</span> + selectedAttribute + <span class="hljs-string">&quot;, cut = &quot;</span> + bestCut + <span class="hljs-string">&quot;, leftLeafLabel = &quot;</span><br>                + leftLeafLabel + <span class="hljs-string">&quot;, rightLeafLabel = &quot;</span> + rightLeafLabel);<br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Classify an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstance The given instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Predicted label.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultLabel</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (paraInstance.value(selectedAttribute) &lt; bestCut) &#123;<br>            resultLabel = leftLeafLabel;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resultLabel = rightLeafLabel;<br>        &#125; <span class="hljs-comment">// Of if</span><br>        <span class="hljs-keyword">return</span> resultLabel;<br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * For display.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am a stump classifier.\r\n&quot;</span> + <span class="hljs-string">&quot;I choose attribute #&quot;</span> + selectedAttribute<br>                + <span class="hljs-string">&quot; with cut value &quot;</span> + bestCut + <span class="hljs-string">&quot;.\r\n&quot;</span> + <span class="hljs-string">&quot;The left and right leaf labels are &quot;</span> + leftLeafLabel<br>                + <span class="hljs-string">&quot; and &quot;</span> + rightLeafLabel + <span class="hljs-string">&quot;, respectively.\r\n&quot;</span> + <span class="hljs-string">&quot;My weighted error is: &quot;</span> + computeWeightedError()<br>                + <span class="hljs-string">&quot;.\r\n&quot;</span> + <span class="hljs-string">&quot;My weighted accuracy is : &quot;</span> + computeTrainingAccuracy() + <span class="hljs-string">&quot;.&quot;</span>;<br>    &#125;<span class="hljs-comment">// Of toString</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * For unit test.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not provided.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WeightedInstances</span> <span class="hljs-variable">tempWeightedInstances</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempFilename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">tempFileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(tempFilename);<br>            tempWeightedInstances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeightedInstances</span>(tempFileReader);<br>            tempFileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + tempFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        <span class="hljs-type">StumpClassifier</span> <span class="hljs-variable">tempClassifier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StumpClassifier</span>(tempWeightedInstances);<br>        tempClassifier.train();<br>        System.out.println(tempClassifier);<br><br>        System.out.println(Arrays.toString(tempClassifier.computeCorrectnessArray()));<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class StumpClassifier</span><br></code></pre></td></tr></table></figure><p><b>运行截图</b> <imgsrc="https://img.omnitrix.top/MDImage/img/2022511204635.png" /></p><h3 id="集成分类器">3. 集成分类器</h3><p><b>代码</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> adaboosting;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><br><span class="hljs-keyword">import</span> weka.core.Instance;<br><span class="hljs-keyword">import</span> weka.core.Instances;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The booster which ensembles base classifiers.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Booster</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Classifiers.</span><br><span class="hljs-comment">     */</span><br>    SimpleClassifier[] classifiers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of classifiers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numClassifiers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Whether or not stop after the training error is 0.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">stopAfterConverge</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The weights of classifiers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] classifierWeights;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The training data.</span><br><span class="hljs-comment">     */</span><br>    Instances trainingData;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The testing data.</span><br><span class="hljs-comment">     */</span><br>    Instances testingData;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * The first constructor. The testing set is the same as the training set.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraTrainingFilename The data filename.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Booster</span><span class="hljs-params">(String paraTrainingFilename)</span> &#123;<br>        <span class="hljs-comment">// Step 1. Read training set.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">tempFileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraTrainingFilename);<br>            trainingData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(tempFileReader);<br>            tempFileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + paraTrainingFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        <span class="hljs-comment">// Step 2. Set the last attribute as the class index.</span><br>        trainingData.setClassIndex(trainingData.numAttributes() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// Step 3. The testing data is the same as the training data.</span><br>        testingData = trainingData;<br><br>        stopAfterConverge = <span class="hljs-literal">true</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;****************Data**********\r\n&quot;</span> + trainingData);<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Set the number of base classifier, and allocate space for them.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumBaseClassifiers The number of base classifier.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumBaseClassifiers</span><span class="hljs-params">(<span class="hljs-type">int</span> paraNumBaseClassifiers)</span> &#123;<br>        numClassifiers = paraNumBaseClassifiers;<br><br>        <span class="hljs-comment">// Step 1. Allocate space (only reference) for classifiers</span><br>        classifiers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleClassifier</span>[numClassifiers];<br><br>        <span class="hljs-comment">// Step 2. Initialize classifier weights.</span><br>        classifierWeights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClassifiers];<br>    &#125;<span class="hljs-comment">// Of setNumBaseClassifiers</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Train the booster.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> StumpClassifier#train()</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">train</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Step 1. Initialize.</span><br>        <span class="hljs-type">WeightedInstances</span> <span class="hljs-variable">tempWeightedInstances</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">double</span> tempError;<br>        numClassifiers = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Step 2. Build other classifiers.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classifiers.length; i++) &#123;<br>            <span class="hljs-comment">// Step 2.1 Key code: Construct or adjust the weightedInstances</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                tempWeightedInstances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeightedInstances</span>(trainingData);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Adjust the weights of the data.</span><br>                tempWeightedInstances.adjustWeights(classifiers[i - <span class="hljs-number">1</span>].computeCorrectnessArray(),<br>                        classifierWeights[i - <span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            <span class="hljs-comment">// Step 2.2 Train the next classifier.</span><br>            classifiers[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StumpClassifier</span>(tempWeightedInstances);<br>            classifiers[i].train();<br><br>            tempError = classifiers[i].computeWeightedError();<br><br>            <span class="hljs-comment">// Key code: Set the classifier weight.</span><br>            classifierWeights[i] = <span class="hljs-number">0.5</span> * Math.log(<span class="hljs-number">1</span> / tempError - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (classifierWeights[i] &lt; <span class="hljs-number">1e-6</span>) &#123;<br>                classifierWeights[i] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br><br>            System.out.println(<span class="hljs-string">&quot;Classifier #&quot;</span> + i + <span class="hljs-string">&quot; , weighted error = &quot;</span> + tempError + <span class="hljs-string">&quot;, weight = &quot;</span><br>                    + classifierWeights[i] + <span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            numClassifiers++;<br><br>            <span class="hljs-comment">// The accuracy is enough.</span><br>            <span class="hljs-keyword">if</span> (stopAfterConverge) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempTrainingAccuracy</span> <span class="hljs-operator">=</span> computeTrainingAccuray();<br>                System.out.println(<span class="hljs-string">&quot;The accuracy of the booster is: &quot;</span> + tempTrainingAccuracy + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>                <span class="hljs-keyword">if</span> (tempTrainingAccuracy &gt; <span class="hljs-number">0.999999</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Stop at the round: &quot;</span> + i + <span class="hljs-string">&quot; due to converge.\r\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of train</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Classify an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstance The given instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The predicted label.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-type">double</span>[] tempLabelsCountArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[trainingData.classAttribute().numValues()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClassifiers; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempLabel</span> <span class="hljs-operator">=</span> classifiers[i].classify(paraInstance);<br>            tempLabelsCountArray[tempLabel] += classifierWeights[i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultLabel</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempLabelsCountArray.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempMax &lt; tempLabelsCountArray[i]) &#123;<br>                tempMax = tempLabelsCountArray[i];<br>                resultLabel = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for</span><br><br>        <span class="hljs-keyword">return</span> resultLabel;<br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Test the booster on the training data.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The classification accuracy.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Testing on &quot;</span> + testingData.numInstances() + <span class="hljs-string">&quot; instances.\r\n&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> test(testingData);<br>    &#125;<span class="hljs-comment">// Of test</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Test the booster.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstances The testing set.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The classification accuracy.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Instances paraInstances)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        paraInstances.setClassIndex(paraInstances.numAttributes() - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraInstances.numInstances(); i++) &#123;<br>            <span class="hljs-type">Instance</span> <span class="hljs-variable">tempInstance</span> <span class="hljs-operator">=</span> paraInstances.instance(i);<br>            <span class="hljs-keyword">if</span> (classify(tempInstance) == (<span class="hljs-type">int</span>) tempInstance.classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultAccuracy</span> <span class="hljs-operator">=</span> tempCorrect / paraInstances.numInstances();<br>        System.out.println(<span class="hljs-string">&quot;The accuracy is: &quot;</span> + resultAccuracy);<br><br>        <span class="hljs-keyword">return</span> resultAccuracy;<br>    &#125; <span class="hljs-comment">// Of test</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * Compute the training accuracy of the booster. It is not weighted.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The training accuracy.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeTrainingAccuray</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; trainingData.numInstances(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (classify(trainingData.instance(i)) == (<span class="hljs-type">int</span>) trainingData.instance(i).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / trainingData.numInstances();<br>    &#125;<span class="hljs-comment">// Of computeTrainingAccuracy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     * For integration test.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not provided.</span><br><span class="hljs-comment">     * *****************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Starting AdaBoosting...&quot;</span>);<br>        <span class="hljs-type">Booster</span> <span class="hljs-variable">tempBooster</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Booster</span>(<span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>);<br><br>        tempBooster.setNumBaseClassifiers(<span class="hljs-number">100</span>);<br>        tempBooster.train();<br><br>        System.out.println(<span class="hljs-string">&quot;The training accuracy is: &quot;</span> + tempBooster.computeTrainingAccuray());<br>        tempBooster.test();<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">//Of class Booster</span><br></code></pre></td></tr></table></figure><p><b>运行截图</b></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022511205538.png" /></p><h1 id="总结">总结</h1><p>感觉 AdaBoost 像极了有个叫做分布式计算的东西,只不过前者是串行和需要权值.</p><p>代码中还有很多不了解的地方, 还需要花点时间在代码上仔细想想.总的来说是一个很神奇的算法.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>AdaBoosting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day31</title>
    <link href="/posts/c0641b56/"/>
    <url>/posts/c0641b56/</url>
    
    <content type="html"><![CDATA[<h1 id="一决策树">一、决策树</h1><p>决策树是一种机器学习的方法. 决策树的生成算法有 ID3, C4.5 和 C5.0 等.本文主要介绍 ID3 生成算法.</p><p>决策树是一种树形结构, 其中每个内部节点表示一个属性上的判断,每个分支代表一个判断结果的输出, 最后每个叶节点代表一种分类结果.</p><p>例如在下图中, 使用 Yes 和 No 来表示出去玩和不出去玩两个分类结果.首先对属性 Outlook 判断, Outlook 表示天气, 具有 Sunny, Overcast,Rain三个判断值. 如果属性 Outlook 判断值是 Sunny, 接下来就要对 Humidity属性判断. 如果 Outlook 的判断值是 Overcast, 就可以直接输出分类结果为Yes.</p><p>以此类推可以通过叶节点得到所有情况下对于是否出去玩这一事件的分类结果.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202259212644.png" /></p><h1 id="二构建步骤">二、构建步骤</h1><p>1.节点的分裂：一般当一个节点所代表的属性无法给出判断时,则选择将这一节点分成2个子节点(如不是二叉树的情况会分成 n 个子节点).在上面的示例中对 Outlook 属性的判断就将其分裂成了三个子节点.</p><p>2.谁做父节点：这个的意思就是为什么要选 Outlook属性做为这棵决策树的根节点．这就是之前所提到的 ID3 生成算法.</p><p>ID3: 由增熵 (Entropy) 原理来决定哪个做父节点, 哪个节点需要分裂.对于一组数据, 熵越小说明分类结果越好. 熵定义如下：</p><p><span class="math display">\[Entropy = - \sum_{i=1}^{n}p(x_i)\log{p(x_i)}\]</span></p><p>其中 <span class="math inline">\(p(x_i)\)</span> 表示随机事件为 <spanclass="math inline">\(x_i\)</span> 的概率.</p><p>例如在数据集 weather.arff 中 <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">@relation weather<br>@attribute Outlook &#123;Sunny, Overcast, Rain&#125;<br>@attribute Temperature &#123;Hot, Mild, Cool&#125;<br>@attribute Humidity &#123;High, Normal, Low&#125;<br>@attribute Windy &#123;<span class="hljs-literal">FALSE</span>, <span class="hljs-literal">TRUE</span>&#125;<br>@attribute Play &#123;N, P&#125;<br>@data<br><span class="hljs-built_in">Sunny,</span>Hot,High,<span class="hljs-literal">FALSE</span>,N<br><span class="hljs-built_in">Sunny,</span>Hot,High,<span class="hljs-literal">TRUE</span>,N<br><span class="hljs-built_in">Overcast,</span>Hot,High,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,High,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Cool,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Cool,Normal,<span class="hljs-literal">TRUE</span>,N<br><span class="hljs-built_in">Overcast,</span>Cool,Normal,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Sunny,</span>Mild,High,<span class="hljs-literal">FALSE</span>,N<br><span class="hljs-built_in">Sunny,</span>Cool,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Sunny,</span>Mild,Normal,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Overcast,</span>Mild,High,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Overcast,</span>Hot,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,High,<span class="hljs-literal">TRUE</span>,N<br></code></pre></td></tr></table></figure></p><p>含有 Sunny 的实例有 5 个, 其中 Play 结果为 N 的有 3 个, 结果为 P 的有2 个. 那么就有</p><p>在出太阳时候不出去玩的概率为:</p><p><span class="math display">\[p(Play = N | Outlook = Sunny) = \frac{3}{5} \tag{1}\]</span></p><p>在出太阳时候出去玩的概率为: <span class="math display">\[p(Play = P | Outlook = Sunny) = \frac{2}{5} \tag{2}\]</span></p><p>(1) (2) 式子就是之前所提到的 <spanclass="math inline">\(p(x_i)\)</span></p><h1 id="三具体实现">三、具体实现</h1><h2 id="想法思路">1. 想法思路</h2><p>和一般构建一颗树是一样的, 先要确立一个父节点.在决策树中父节点的选择是通过之前增熵对每个属性处理后来选择.当一个属性选择后就会从整体中删除表示不能够再使用.那么实际步骤就是一个递归的过程.</p><p>需要注意的是这里表示树形结构使用的是数组的双亲表示法.</p><h2 id="具体代码">2. 具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> decisiontree;<br><br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> weka.core.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The ID3 decision tree inductive algorithm.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ID3</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The data.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Is this dataset pure (only one label)?</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> pure;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of classes. For binary classification it is 2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numClasses;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Available instances. Other instances do not belong this branch.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] availableInstances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Available attributes. Other attributes have been selected in the path</span><br><span class="hljs-comment">     * from the root.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] availableAttributes;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The selected attribute.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> splitAttribute;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The children nodes.</span><br><span class="hljs-comment">     */</span><br>    ID3[] children;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * My label. Inner nodes also have a label. For example, &lt;outlook = sunny,</span><br><span class="hljs-comment">     * humidity = high&gt; never appear in the training data, but &lt;humidity = high&gt;</span><br><span class="hljs-comment">     * is valid in other cases.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> label;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Small block cannot be split further.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">smallBlockThreshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * The constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The given file.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ID3</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        dataset = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(fileReader);<br>            fileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + paraFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>        numClasses = dataset.classAttribute().numValues();<br><br>        availableInstances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; availableInstances.length; i++) &#123;<br>            availableInstances[i] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        availableAttributes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numAttributes() - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; availableAttributes.length; i++) &#123;<br>            availableAttributes[i] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Initialize.</span><br>        children = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// Determine the label by simple voting.</span><br>        label = getMajorityClass(availableInstances);<br>        <span class="hljs-comment">// Determine whether or not it is pure.</span><br>        pure = pureJudge(availableInstances);<br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * The constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraDataset The given dataset.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ID3</span><span class="hljs-params">(Instances paraDataset, <span class="hljs-type">int</span>[] paraAvailableInstances, <span class="hljs-type">int</span>[] paraAvailableAttributes)</span> &#123;<br>        <span class="hljs-comment">// Copy its reference instead of clone the availableInstances.</span><br>        dataset = paraDataset;<br>        availableInstances = paraAvailableInstances;<br>        availableAttributes = paraAvailableAttributes;<br><br>        <span class="hljs-comment">// Initialize.</span><br>        children = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// Determine the label by simple voting.</span><br>        label = getMajorityClass(availableInstances);<br>        <span class="hljs-comment">// Determine whether or not it is pure.</span><br>        pure = pureJudge(availableInstances);<br>    &#125;<span class="hljs-comment">// Of the second constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Is the given block pure?</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBlock The block.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> True if pure.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pureJudge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraBlock)</span> &#123;<br>        pure = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// Just compare with 0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; paraBlock.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (dataset.instance(paraBlock[i]).classValue() != dataset.instance(paraBlock[<span class="hljs-number">0</span>]).classValue()) &#123;<br>                pure = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> pure;<br>    &#125;<span class="hljs-comment">// Of pureJudge</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Compute the majority class of the given block for voting.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraBlock The block.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The majority class.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMajorityClass</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraBlock)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempClassCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numClasses()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : paraBlock) &#123;<br>            tempClassCounts[(<span class="hljs-type">int</span>) dataset.instance(i).classValue()]++;<br>        &#125; <span class="hljs-comment">// Of foreach</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultMajorityClass</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMaxCount</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempClassCounts.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempMaxCount &lt; tempClassCounts[i]) &#123;<br>                resultMajorityClass = i;<br>                tempMaxCount = tempClassCounts[i];<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultMajorityClass;<br>    &#125;<span class="hljs-comment">// Of getMajorityClass</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Select the best attribute.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The best attribute index.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">selectBestAttribute</span><span class="hljs-params">()</span> &#123;<br>        splitAttribute = -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempMinimalEntropy</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">double</span> tempEntropy;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> availableAttribute : availableAttributes) &#123;<br>            tempEntropy = conditionalEntropy(availableAttribute);<br>            <span class="hljs-keyword">if</span> (tempMinimalEntropy &gt; tempEntropy) &#123;<br>                tempMinimalEntropy = tempEntropy;<br>                splitAttribute = availableAttribute;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of foreach</span><br>        <span class="hljs-keyword">return</span> splitAttribute;<br>    &#125;<span class="hljs-comment">// Of selectBestAttribute</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Compute the conditional entropy of an attribute.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraAttribute The given attribute.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The entropy.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">conditionalEntropy</span><span class="hljs-params">(<span class="hljs-type">int</span> paraAttribute)</span> &#123;<br>        <span class="hljs-comment">// Step 1. Statistics.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumClasses</span> <span class="hljs-operator">=</span> dataset.numClasses();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumValues</span> <span class="hljs-operator">=</span> dataset.attribute(paraAttribute).numValues();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumInstances</span> <span class="hljs-operator">=</span> availableInstances.length;<br>        <span class="hljs-type">double</span>[] tempValueCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempNumValues];<br>        <span class="hljs-type">double</span>[][] tempCountMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempNumValues][tempNumClasses];<br><br>        <span class="hljs-type">int</span> tempClass, tempValue;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> availableInstance : availableInstances) &#123;<br>            tempClass = (<span class="hljs-type">int</span>) dataset.instance(availableInstance).classValue();<br>            tempValue = (<span class="hljs-type">int</span>) dataset.instance(availableInstance).value(paraAttribute);<br>            tempValueCounts[tempValue]++;<br>            tempCountMatrix[tempValue][tempClass]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 2.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultEntropy</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> tempEntropy, tempFraction;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumValues; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempValueCounts[i] == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-comment">// Of if</span><br>            tempEntropy = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempNumClasses; j++) &#123;<br>                tempFraction = tempCountMatrix[i][j] / tempValueCounts[i];<br>                <span class="hljs-keyword">if</span> (tempFraction == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-comment">// 信息熵越小, 信息的纯度越高, 信息量就越少</span><br>                <span class="hljs-comment">// H(X) = -p(x) * log p(x)</span><br>                tempEntropy += -tempFraction * Math.log(tempFraction);<br>            &#125; <span class="hljs-comment">// Of for j\</span><br>            <span class="hljs-comment">// 最小化条件信息熵</span><br>            resultEntropy += tempValueCounts[i] / tempNumInstances * tempEntropy;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultEntropy;<br>    &#125;<span class="hljs-comment">// Of conditionalEntropy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Split the data according to the given attribute.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The blocks.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] splitData(<span class="hljs-type">int</span> paraAttribute) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempNumValues</span> <span class="hljs-operator">=</span> dataset.attribute(paraAttribute).numValues();<br><br>        <span class="hljs-type">int</span>[][] resultBlocks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempNumValues][];<br>        <span class="hljs-type">int</span>[] tempSizes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempNumValues];<br><br>        <span class="hljs-comment">// First scan to count the size of each block.</span><br>        <span class="hljs-type">int</span> tempValue;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> availableInstance : availableInstances) &#123;<br>            tempValue = (<span class="hljs-type">int</span>) dataset.instance(availableInstance).value(paraAttribute);<br>            tempSizes[tempValue]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Allocate space.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumValues; i++) &#123;<br>            resultBlocks[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempSizes[i]];<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Second scan to fill.</span><br>        Arrays.fill(tempSizes, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> availableInstance : availableInstances) &#123;<br>            tempValue = (<span class="hljs-type">int</span>) dataset.instance(availableInstance).value(paraAttribute);<br>            <span class="hljs-comment">// Copy data.</span><br>            resultBlocks[tempValue][tempSizes[tempValue]] = availableInstance;<br>            tempSizes[tempValue]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultBlocks;<br>    &#125;<span class="hljs-comment">// Of splitData</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Build the tree recursively.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildTree</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Is pure return.</span><br>        <span class="hljs-keyword">if</span> (pureJudge(availableInstances)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-comment">// Less than or equal to small block just return</span><br>        <span class="hljs-keyword">if</span> (availableInstances.length &lt;= smallBlockThreshold) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        selectBestAttribute();<br>        <span class="hljs-type">int</span>[][] tempSubBlocks = splitData(splitAttribute);<br>        children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ID3</span>[tempSubBlocks.length];<br><br>        <span class="hljs-comment">// Construct the remaining attribute set.</span><br>        <span class="hljs-type">int</span>[] tempRemainingAttributes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[availableAttributes.length - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; availableAttributes.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (availableAttributes[i] &lt; splitAttribute) &#123;<br>                tempRemainingAttributes[i] = availableAttributes[i];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (availableAttributes[i] &gt; splitAttribute) &#123;<br>                tempRemainingAttributes[i - <span class="hljs-number">1</span>] = availableAttributes[i];<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Construct children.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((tempSubBlocks[i] == <span class="hljs-literal">null</span>) || (tempSubBlocks[i].length == <span class="hljs-number">0</span>)) &#123;<br>                children[i] = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// System.out.println(&quot;Building children #&quot; + i + &quot; with</span><br>                <span class="hljs-comment">// instances &quot; + Arrays.toString(tempSubBlocks[i]));</span><br>                children[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ID3</span>(dataset, tempSubBlocks[i], tempRemainingAttributes);<br><br>                <span class="hljs-comment">// Important code: do this recursively</span><br>                children[i].buildTree();<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of buildTree</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Classify an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraInstance The given instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The prediction.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-keyword">if</span> (children == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> label;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-type">ID3</span> <span class="hljs-variable">tempChild</span> <span class="hljs-operator">=</span> children[(<span class="hljs-type">int</span>) paraInstance.value(splitAttribute)];<br>        <span class="hljs-keyword">if</span> (tempChild == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> label;<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-keyword">return</span> tempChild.classify(paraInstance);<br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Test on a testing set.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraDataset The given testing data.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The accuracy.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Instances paraDataset)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraDataset.numInstances(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (classify(paraDataset.instance(i)) == (<span class="hljs-type">int</span>) paraDataset.instance(i).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of i</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / paraDataset.numInstances();<br>    &#125;<span class="hljs-comment">// Of test</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     * Test on the training set.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The accuracy.</span><br><span class="hljs-comment">     * *********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">selfTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> test(dataset);<br>    &#125;<span class="hljs-comment">// Of selfTest</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************</span><br><span class="hljs-comment">     * Overrides the method claimed in Object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The tree structure.</span><br><span class="hljs-comment">     * ******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempAttributeName</span> <span class="hljs-operator">=</span> dataset.attribute(splitAttribute).name();<br>        <span class="hljs-keyword">if</span> (children == <span class="hljs-literal">null</span>) &#123;<br>            resultString.append(<span class="hljs-string">&quot;class = &quot;</span>).append(label);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (children[i] == <span class="hljs-literal">null</span>) &#123;<br>                    resultString.append(tempAttributeName)<br>                            .append(<span class="hljs-string">&quot; = &quot;</span>)<br>                            .append(dataset.attribute(splitAttribute).value(i))<br>                            .append(<span class="hljs-string">&quot;:&quot;</span>)<br>                            .append(<span class="hljs-string">&quot;class = &quot;</span>)<br>                            .append(label)<br>                            .append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resultString.append(tempAttributeName)<br>                            .append(<span class="hljs-string">&quot; = &quot;</span>)<br>                            .append(dataset.attribute(splitAttribute).value(i))<br>                            .append(<span class="hljs-string">&quot;:&quot;</span>)<br>                            .append(children[i])<br>                            .append(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-keyword">return</span> resultString.toString();<br>    &#125;<span class="hljs-comment">// Of toString</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Test this class.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">id3Test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ID3</span> <span class="hljs-variable">tempID3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ID3</span>(<span class="hljs-string">&quot;D:/Work/sampledata/weather.arff&quot;</span>);<br><br>        ID3.smallBlockThreshold = <span class="hljs-number">3</span>;<br>        tempID3.buildTree();<br><br>        System.out.println(<span class="hljs-string">&quot;The tree is: \r\n&quot;</span> + tempID3);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempAccuracy</span> <span class="hljs-operator">=</span> tempID3.selfTest();<br>        System.out.println(<span class="hljs-string">&quot;The accuracy is: &quot;</span> + tempAccuracy);<br>    &#125;<span class="hljs-comment">// Of id3Test</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Test this class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        id3Test();<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class ID3</span><br></code></pre></td></tr></table></figure><h2 id="运行截图">3. 运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/202259220117.png" /></p><h1 id="四总结">四、总结</h1><p>对建决策树的大致过程了解了, 相比起简单的 if-else, 决策树的精髓就在与ID3 生成算法, 采用了信息熵这一个通信方面的知识.果然研究要集百家之长才能得到更好的解决方法.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>decisiontree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day30</title>
    <link href="/posts/b7632bc0/"/>
    <url>/posts/b7632bc0/</url>
    
    <content type="html"><![CDATA[<h1 id="数值型数据的-nb-算法">数值型数据的 NB 算法</h1><h2 id="一数据处理">一、数据处理</h2><h3 id="发现问题">1. 发现问题</h3><p>不同于之前符号型的数据,数值型的数据在理论和实际上来说它的取值点是无穷的.我们只能通过限定一段区间来说明概率.</p><p>如设考试成绩为 Score 则及格的概率为 <span class="math inline">\(P(60\le Score)\)</span> 是可以的, 但是如果说刚好及格的概率 <spanclass="math inline">\(P(Score = 60)\)</span> 这个式子就为 0.</p><p>所以我们这里所做的工作就是把之前式子中的概率 <spanclass="math inline">\(P\)</span> 换为概率密度函数 <spanclass="math inline">\(p\)</span>.</p><h3 id="处理">2. 处理</h3><p>在第 29 天的时候得到了如下的这样一个式子.</p><p><span class="math display">\[P(D|\mathrm{x}) = \frac{P(\mathrm{x}D)}{P(\mathrm{x})} = \frac{P(D)\prod_{i=1}^{m}P(x_i|D) }{P(\mathrm{x})} \tag{1}\]</span></p><p>这里需要做两件事:</p><ul><li>根据数据及分布假设, 求得概率密度函数 <spanclass="math inline">\(p(x)\)</span></li></ul><p><span class="math display">\[p(x) = \frac{1}{\sqrt{2\pi} \sigma } exp\left(-\frac{(x-\mu)^2}{2\sigma^2} \right ) \tag{2}\]</span></p><ul><li>直接用 <span class="math inline">\(p(x)\)</span> 替换掉式 (1) 中的<span class="math inline">\(P(x_i|D)\)</span>, 常用的 <spanclass="math inline">\(p(x)\)</span> 为正态高斯分布. 替换后对其进行求 log的操作, 以防数值溢出. 如下所示得到我们最后需要求的表达式.</li></ul><p><span class="math display">\[d(\mathrm{x}) = \underset{1 \le a \le m}{\mathrm{argmax}}\\log{P^L(D_a)} + \sum_{b=1}^{n}(-\log\sigma_{ab}) +(-\frac{(x_b-\mu_{ab})^2}{2\sigma_{ab}^2}) \tag{3}\]</span></p><p>这里的 <span class="math inline">\(\mu\)</span> 和 <spanclass="math inline">\(\sigma\)</span> 表示均值和标准差. a表示具体对应的某一个类别下标. b 表示实例中某个属性的下标. m表示类别总数, n 表示属性总数. <span class="math inline">\(x_b\)</span>表示一个实例. 求出的值为<span class="math inline">\(\log{P^L (D_a) } +\sum_{b=1}^{n} (-\log\sigma_{ab}) +(-\frac{(x_b-\mu_{ab})^2}{2\sigma_{ab}^2})\)</span>式子最大时 a的值.</p><h2 id="二算法实现">二、算法实现</h2><h3 id="具体代码">1. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bayes;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> weka.core.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Naive Bayes algorithm.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NaiveBayesForNumerical</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     * An inner class to store parameters.</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GaussianParameters</span> &#123;<br>        <span class="hljs-type">double</span> mu;<br>        <span class="hljs-type">double</span> sigma;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">GaussianParameters</span><span class="hljs-params">(<span class="hljs-type">double</span> paraMu, <span class="hljs-type">double</span> paraSigma)</span> &#123;<br>            mu = paraMu;<br>            sigma = paraSigma;<br>        &#125;<span class="hljs-comment">// Of the constructor</span><br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(&quot;</span> + mu + <span class="hljs-string">&quot;, &quot;</span> + sigma + <span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<span class="hljs-comment">// Of toString</span><br>    &#125;<span class="hljs-comment">// Of GaussianParameters</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The data.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of classes. For binary classification it is 2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numClasses;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of instances.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numInstances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of conditional attributes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numConditions;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The prediction, including queried and predicted labels.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] predicts;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Class distribution.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] classDistribution;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Class distribution with Laplacian smooth.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] classDistributionLaplacian;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The Gaussian parameters.</span><br><span class="hljs-comment">     */</span><br>    GaussianParameters[][] gaussianParameters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Data type.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> dataType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Numerical.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUMERICAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * The constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The given file.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NaiveBayesForNumerical</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        dataset = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(fileReader);<br>            fileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + paraFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>        numConditions = dataset.numAttributes() - <span class="hljs-number">1</span>;<br>        numInstances = dataset.numInstances();<br>        numClasses = dataset.attribute(numConditions).numValues();<br>    &#125;<span class="hljs-comment">// Of the constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Set the data type.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataType</span><span class="hljs-params">(<span class="hljs-type">int</span> paraDataType)</span> &#123;<br>        dataType = paraDataType;<br>    &#125;<span class="hljs-comment">// Of setDataType</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Calculate the class distribution with Laplacian smooth.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateClassDistribution</span><span class="hljs-params">()</span> &#123;<br>        classDistribution = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br>        classDistributionLaplacian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br><br>        <span class="hljs-type">double</span>[] tempCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempClassValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dataset.instance(i).classValue();<br>            tempCounts[tempClassValue]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            classDistribution[i] = tempCounts[i] / numInstances;<br>            classDistributionLaplacian[i] = (tempCounts[i] + <span class="hljs-number">1</span>) / (numInstances + numClasses);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Class distribution: &quot;</span> + Arrays.toString(classDistribution));<br>        System.out.println(<span class="hljs-string">&quot;Class distribution Laplacian: &quot;</span> + Arrays.toString(classDistributionLaplacian));<br>    &#125;<span class="hljs-comment">// Of calculateClassDistribution</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Calculate the conditional probabilities with Laplacian smooth.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateGaussianParameters</span><span class="hljs-params">()</span> &#123;<br>        gaussianParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GaussianParameters</span>[numClasses][numConditions];<br><br>        <span class="hljs-type">double</span>[] tempValuesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numInstances];<br>        <span class="hljs-type">int</span> tempNumValues;<br>        <span class="hljs-type">double</span> tempSum;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                tempSum = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-comment">// Obtain values for this class.</span><br>                tempNumValues = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; numInstances; k++) &#123;<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>) dataset.instance(k).classValue() != i) &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125; <span class="hljs-comment">// Of if</span><br><br>                    tempValuesArray[tempNumValues] = dataset.instance(k).value(j);<br>                    tempSum += tempValuesArray[tempNumValues];<br>                    tempNumValues++;<br>                &#125; <span class="hljs-comment">// Of for k</span><br><br>                <span class="hljs-comment">// Obtain parameters.</span><br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempMu</span> <span class="hljs-operator">=</span> tempSum / tempNumValues;<br><br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempSigma</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tempNumValues; k++) &#123;<br>                    tempSigma += (tempValuesArray[k] - tempMu) * (tempValuesArray[k] - tempMu);<br>                &#125; <span class="hljs-comment">// Of for k</span><br>                tempSigma /= tempNumValues;<br>                tempSigma = Math.sqrt(tempSigma);<br><br>                gaussianParameters[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GaussianParameters</span>(tempMu, tempSigma);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(Arrays.deepToString(gaussianParameters));<br>    &#125;<span class="hljs-comment">// Of calculateGaussianParameters</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Classify all instances, the results are stored in predicts[].</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">classify</span><span class="hljs-params">()</span> &#123;<br>        predicts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numInstances];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            predicts[i] = classify(dataset.instance(i));<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Classify an instances.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dataType == NUMERICAL) &#123;<br>            <span class="hljs-keyword">return</span> classifyNumerical(paraInstance);<br>        &#125; <span class="hljs-comment">// Of if</span><br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-comment">// Of classify</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Classify an instances with numerical data.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classifyNumerical</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-comment">// Find the biggest one</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempBiggest</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultBestIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempPseudoProbability</span> <span class="hljs-operator">=</span> Math.log(classDistributionLaplacian[i]);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempAttributeValue</span> <span class="hljs-operator">=</span> paraInstance.value(j);<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempSigma</span> <span class="hljs-operator">=</span> gaussianParameters[i][j].sigma;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempMu</span> <span class="hljs-operator">=</span> gaussianParameters[i][j].mu;<br><br>                tempPseudoProbability += -Math.log(tempSigma) - (tempAttributeValue - tempMu)<br>                        * (tempAttributeValue - tempMu) / (<span class="hljs-number">2</span> * tempSigma * tempSigma);<br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-keyword">if</span> (tempBiggest &lt; tempPseudoProbability) &#123;<br>                tempBiggest = tempPseudoProbability;<br>                resultBestIndex = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultBestIndex;<br>    &#125;<span class="hljs-comment">// Of classifyNumerical</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     * Compute accuracy.</span><br><span class="hljs-comment">     ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeAccuracy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-keyword">if</span> (predicts[i] == (<span class="hljs-type">int</span>) dataset.instance(i).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / numInstances;<br>    &#125;<span class="hljs-comment">// Of computeAccuracy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     * Test numerical data.</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNumerical</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, Naive Bayes. I only want to test the numerical data with Gaussian assumption.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempFilename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/Work/sampledata/iris-imbalance.arff&quot;</span>;<br><br>        <span class="hljs-type">NaiveBayesForNumerical</span> <span class="hljs-variable">tempLearner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NaiveBayesForNumerical</span>(tempFilename);<br>        tempLearner.setDataType(NUMERICAL);<br>        tempLearner.calculateClassDistribution();<br>        tempLearner.calculateGaussianParameters();<br>        tempLearner.classify();<br><br>        System.out.println(<span class="hljs-string">&quot;The accuracy is: &quot;</span> + tempLearner.computeAccuracy());<br>    &#125;<span class="hljs-comment">// Of testNominal</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     * Test this class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     *************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        testNumerical();<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class NaiveBayesForNumerical</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">2. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/202256151947.png" /></p><h1 id="总结">总结</h1><ol type="1"><li><p>数值型数据相比之前符号性数据处理就只有一个概率变概率密度的过程.</p></li><li><p>假设所有属性的属性值都服从高斯分布. 也可以做其它假设.在大多数工具包中, 例如 Python 对这样的处理也是默认的高斯分布.</p></li><li><p>将概率密度当成概率值直接使用 Bayes 公式.和这个处理方式类似的还有就是核密度估计.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>NB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day29</title>
    <link href="/posts/d7a4a225/"/>
    <url>/posts/d7a4a225/</url>
    
    <content type="html"><![CDATA[<h1 id="符号型数据的-nb-算法">符号型数据的 NB 算法</h1><p>符号型数据是指数据集中的数据是由字符或者字符串构成. NB (Native Bayes)算法通常被翻译成朴素贝叶斯算法, 基于贝叶斯算法, 常用于分类问题.同时这也是贝叶斯算法中最简单、最常见的一种.</p><h2 id="一-符号型数据集">一、 符号型数据集</h2><p>在 <ahref="https://gitee.com/fansmale/javasampledata">https://gitee.com/fansmale/javasampledata</a>中可以获得 weather.arff 文件.</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">@relation weather<br>@attribute Outlook &#123;Sunny, Overcast, Rain&#125;<br>@attribute Temperature &#123;Hot, Mild, Cool&#125;<br>@attribute Humidity &#123;High, Normal, Low&#125;<br>@attribute Windy &#123;<span class="hljs-literal">FALSE</span>, <span class="hljs-literal">TRUE</span>&#125;<br>@attribute Play &#123;N, P&#125;<br>@data<br><span class="hljs-built_in">Sunny,</span>Hot,High,<span class="hljs-literal">FALSE</span>,N<br><span class="hljs-built_in">Sunny,</span>Hot,High,<span class="hljs-literal">TRUE</span>,N<br><span class="hljs-built_in">Overcast,</span>Hot,High,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,High,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Cool,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Cool,Normal,<span class="hljs-literal">TRUE</span>,N<br><span class="hljs-built_in">Overcast,</span>Cool,Normal,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Sunny,</span>Mild,High,<span class="hljs-literal">FALSE</span>,N<br><span class="hljs-built_in">Sunny,</span>Cool,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Sunny,</span>Mild,Normal,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Overcast,</span>Mild,High,<span class="hljs-literal">TRUE</span>,P<br><span class="hljs-built_in">Overcast,</span>Hot,Normal,<span class="hljs-literal">FALSE</span>,P<br><span class="hljs-built_in">Rain,</span>Mild,High,<span class="hljs-literal">TRUE</span>,N<br></code></pre></td></tr></table></figure><p>文件中对 weather 有 Outlook、Temperature、Humidity、Windy 和 Play五个属性. 在五个属性中存在着具体的描述, 我们的任务就是要通过除 Play之外的所有属性来预测 Play 的值. 也就是说这还是一个分类问题,但是获得的数据就不再是之前的数值, 而是一段描述字符串.</p><h2 id="二-理论推导">二、 理论推导</h2><h3 id="条件概率">1. 条件概率</h3><p><span class="math display">\[P(AB) = P(A)P(B|A) \tag{1}\]</span></p><ul><li><span class="math inline">\(P(A)\)</span> 表示事件 <spanclass="math inline">\(A\)</span> 发生的概率.</li><li><span class="math inline">\(P(AB)\)</span> 表示事件 <spanclass="math inline">\(A\)</span> 和 事件<spanclass="math inline">\(B\)</span> 同时发生的概率.</li><li><span class="math inline">\(P(B|A)\)</span> 表示在事件 <spanclass="math inline">\(A\)</span> 发生的情况下, 事件<spanclass="math inline">\(B\)</span>也发生的概率.</li></ul><p>例: <span class="math inline">\(A\)</span> 表示天气是晴天, 即 Outlook= Sunny; <span class="math inline">\(B\)</span> 表示湿度高, 即 Humidity= High.</p><p>14 天中有 5 天为 Sunny , 则 <span class="math inline">\(P(A) =P(Outlook = Sunny) = 5/14\)</span></p><p>在 5 天为 Sunny 中又有 3 天湿度高, 则有 <spanclass="math inline">\(P(B|A) = P(Humidity = High|Outlook = Sunny) =3/5\)</span></p><p>最后我们就能得到即是晴天又湿度高的概率 <spanclass="math inline">\(P(AB) = P(Outlook = Sunny \wedge Humidity = High)= P(A)P(B|A) = 3/14\)</span></p><h3 id="独立性假设">2. 独立性假设</h3><p>令 $ = x_1 x_2 ... x_m $ 表示一个条件的组合, 如 Play = Sunny <spanclass="math inline">\(\wedge\)</span> Hot <spanclass="math inline">\(\wedge\)</span> High <spanclass="math inline">\(\wedge\)</span> FALSE = N.</p><p>令 <span class="math inline">\(D\)</span> 表示一个事件, 如：Play = N,根据 (1) 式有:</p><p><span class="math display">\[P(D|\mathrm{x}) = \frac{P(\mathrm{x}D)}{P(\mathrm{x})} =\frac{P(D)P(\mathrm{x}|D)}{P(\mathrm{x})} \tag{2}\]</span></p><p>接下来就是一个非常精彩的操作, 我们假设 <spanclass="math inline">\(x_1,x_2,...,x_m\)</span> 它们之间相互独立.这在现实世界中就显得有些荒谬. 比如阴天容易刮风, 晴天湿度低.这里姑且算其成立.</p><p><span class="math display">\[P(\mathrm{x}|D) = P(x_1|D)P(x_2|D)...P(x_m|D) =  \prod_{i=1}^{m}P(x_i|D)\tag{3}\]</span></p><p>综合 (2) (3) 式可得:</p><p><span class="math display">\[P(D|\mathrm{x}) = \frac{P(\mathrm{x}D)}{P(\mathrm{x})} = \frac{P(D)\prod_{i=1}^{m}P(x_i|D) }{P(\mathrm{x})} \tag{4}\]</span></p><p>因为计算不了分母 <span class="math inline">\(P(\mathrm{x})\)</span>所以我们就只需要比较分子大小, 谁大归哪个类.</p><p>在这里使用 <span class="math inline">\(\log\)</span>使得乘法变成加法, 这是一个防止溢出的常规操作. 此时预测方案就变为了:</p><p><span class="math display">\[\begin{aligned}d(x) &amp;= \underset{1 \le i \le k}{argmax} P(D_i|\mathrm{x}) \\&amp;= \underset{1 \le i \le k}{argmax} P(D_i)\prod_{j=1}^{m}P(x_j|D_i)\\&amp;= \underset{1 \le i \le k}{argmax} \left ( \log P(D_i) +\sum_{j=1}^{m}\log P(x_j|D_i) \right )\end{aligned} \tag{5}\]</span></p><h3 id="laplacian-平滑">3. Laplacian 平滑</h3><p>由于数据集中不能保证每个数据都出现, 若是按照以上算法就会导致出现 0的情况. 但是在现实世界中真实存在着导致结果为 0 的数据,我们自然不希望这样的事情发生. 所以 Laplacian 平滑由此诞生.</p><p><span class="math display">\[P^{L}(x_i|D) = \frac{nP(x_iD) + 1}{nP(D)+v_i} \tag{6}\]</span></p><p>其中 n 表示数据集中所有数据的个数, <spanclass="math inline">\(v_i\)</span> 表示第 <spanclass="math inline">\(i\)</span> 个属性的可能取值数. 如 i 表示 Humidity属性时, <span class="math inline">\(v_i = 3\)</span>.</p><h2 id="三-代码流程">三、 代码流程</h2><h3 id="具体代码">1. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bayes;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> weka.core.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Naive Bayes algorithm.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NaiveBayesForNominal</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The data.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of classes. For binary classification it is 2.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numClasses;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of instances.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numInstances;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of conditional attributes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> numConditions;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The prediction, including queried and predicted labels.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] predicts;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Class distribution.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] classDistribution;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Class distribution with Laplacian smooth.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[] classDistributionLaplacian;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * To calculate the conditional probabilities for all classes over all</span><br><span class="hljs-comment">     * attributes on all values.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[][][] conditionalCounts;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The conditional probabilities with Laplacian smooth.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span>[][][] conditionalProbabilitiesLaplacian;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Data type.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> dataType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Nominal.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NOMINAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * The constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The given file.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NaiveBayesForNominal</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        dataset = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(fileReader);<br>            fileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + paraFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br><br>        dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>        numConditions = dataset.numAttributes() - <span class="hljs-number">1</span>;<br>        numInstances = dataset.numInstances();<br>        numClasses = dataset.attribute(numConditions).numValues();<br>    &#125;<span class="hljs-comment">// Of the constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Set the data type.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataType</span><span class="hljs-params">(<span class="hljs-type">int</span> paraDataType)</span> &#123;<br>        dataType = paraDataType;<br>    &#125;<span class="hljs-comment">// Of setDataType</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Calculate the class distribution with Laplacian smooth.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateClassDistribution</span><span class="hljs-params">()</span> &#123;<br>        classDistribution = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br>        classDistributionLaplacian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br><br>        <span class="hljs-type">double</span>[] tempCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempClassValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dataset.instance(i).classValue();<br>            tempCounts[tempClassValue]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            classDistribution[i] = tempCounts[i] / numInstances;<br>            classDistributionLaplacian[i] = (tempCounts[i] + <span class="hljs-number">1</span>) / (numInstances + numClasses);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Class distribution: &quot;</span> + Arrays.toString(classDistribution));<br>        System.out.println(<span class="hljs-string">&quot;Class distribution Laplacian: &quot;</span> + Arrays.toString(classDistributionLaplacian));<br>    &#125;<span class="hljs-comment">// Of calculateClassDistribution</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Calculate the conditional probabilities with Laplacian smooth. ONLY scan</span><br><span class="hljs-comment">     * the dataset once. There was a simpler one, I have removed it because the</span><br><span class="hljs-comment">     * time complexity is higher.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateConditionalProbabilities</span><span class="hljs-params">()</span> &#123;<br>        conditionalCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses][numConditions][];<br>        conditionalProbabilitiesLaplacian = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClasses][numConditions][];<br><br>        <span class="hljs-comment">// Allocate space</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempNumValues</span> <span class="hljs-operator">=</span> dataset.attribute(j).numValues();<br>                conditionalCounts[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempNumValues];<br>                conditionalProbabilitiesLaplacian[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[tempNumValues];<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Count the numbers</span><br>        <span class="hljs-type">int</span>[] tempClassCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numClasses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempClass</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dataset.instance(i).classValue();<br>            tempClassCounts[tempClass]++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) dataset.instance(i).value(j);<br>                conditionalCounts[tempClass][j][tempValue]++;<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Now for the real probability with Laplacian</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempNumValues</span> <span class="hljs-operator">=</span> dataset.attribute(j).numValues();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tempNumValues; k++) &#123;<br>                    conditionalProbabilitiesLaplacian[i][j][k] = (conditionalCounts[i][j][k] + <span class="hljs-number">1</span>) / (tempClassCounts[i] + tempNumValues);<br>                &#125; <span class="hljs-comment">// Of for k</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;Conditional probabilities: &quot;</span> + Arrays.deepToString(conditionalCounts));<br>    &#125;<span class="hljs-comment">// Of calculateConditionalProbabilities</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Classify all instances, the results are stored in predicts[].</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">classify</span><span class="hljs-params">()</span> &#123;<br>        predicts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numInstances];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            predicts[i] = classify(dataset.instance(i));<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Classify an instances.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classify</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dataType == NOMINAL) &#123;<br>            <span class="hljs-keyword">return</span> classifyNominal(paraInstance);<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-comment">// Of classify</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Classify an instances with nominal data.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">classifyNominal</span><span class="hljs-params">(Instance paraInstance)</span> &#123;<br>        <span class="hljs-comment">// Find the biggest one</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempBiggest</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10000</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultBestIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClasses; i++) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempClassProbabilityLaplacian</span> <span class="hljs-operator">=</span> Math.log(classDistributionLaplacian[i]);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempPseudoProbability</span> <span class="hljs-operator">=</span> tempClassProbabilityLaplacian;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numConditions; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tempAttributeValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) paraInstance.value(j);<br><br>                <span class="hljs-comment">// Laplacian smooth.</span><br>                tempPseudoProbability += Math.log(conditionalProbabilitiesLaplacian[i][j][tempAttributeValue]);<br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-keyword">if</span> (tempBiggest &lt; tempPseudoProbability) &#123;<br>                tempBiggest = tempPseudoProbability;<br>                resultBestIndex = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultBestIndex;<br>    &#125;<span class="hljs-comment">// Of classifyNominal</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     * Compute accuracy.</span><br><span class="hljs-comment">     * *******************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeAccuracy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numInstances; i++) &#123;<br>            <span class="hljs-keyword">if</span> (predicts[i] == (<span class="hljs-type">int</span>) dataset.instance(i).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / numInstances;<br>    &#125;<span class="hljs-comment">// Of computeAccuracy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Test nominal data.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNominal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, Naive Bayes. I only want to test the nominal data.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempFilename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/Work/sampledata/mushroom.arff&quot;</span>;<br><br>        <span class="hljs-type">NaiveBayesForNominal</span> <span class="hljs-variable">tempLearner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NaiveBayesForNominal</span>(tempFilename);<br>        tempLearner.setDataType(NOMINAL);<br>        tempLearner.calculateClassDistribution();<br>        tempLearner.calculateConditionalProbabilities();<br>        tempLearner.classify();<br><br>        System.out.println(<span class="hljs-string">&quot;The accuracy is: &quot;</span> + tempLearner.computeAccuracy());<br>    &#125;<span class="hljs-comment">// Of testNominal</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Test this class.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        testNominal();<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class NaiveBayesForNominal</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">2. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022530105653.png" /></p><h1 id="总结">总结</h1><p>优点：</p><ol type="1"><li><p>算法逻辑简单, 易于实现</p></li><li><p>分类过程中时空开销小</p></li></ol><p>缺点:</p><p>理论上, 朴素贝叶斯模型与其他分类方法相比具有最小的误差率.但是实际上并非总是如此, 这是因为朴素贝叶斯模型假设属性之间相互独立,这个假设在实际应用中往往是不成立的,在属性个数比较多或者属性之间相关性较大时, 分类效果不好.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>NB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day28</title>
    <link href="/posts/a0a392b3/"/>
    <url>/posts/a0a392b3/</url>
    
    <content type="html"><![CDATA[<h1 id="kmeans-聚类">kMeans 聚类</h1><h2 id="一聚类">一、聚类</h2><p><b>监督式学习:</b> 训练集有明确答案, 监督学习就是寻找问题(又称输入、特征、自变量) 与答案 (又称输出、目标、因变量)之间关系的学习方式. 监督学习模型有两类, 分类和回归.</p><ul><li><p>分类模型: 目标变量是离散的分类型变量</p></li><li><p>回归模型: 目标变量是连续性数值型变量</p></li></ul><p><b>无监督式学习:</b> 只有数据, 无明确答案, 即训练集没有标签.常见的无监督学习算法有聚类 (clustering), 由计算机自己找出规律,把有相似属性的样本放在一组, 每个组也称为簇 (cluster). 接下来要谈到的KMeans 就是其中之一.</p><h2 id="二kmeans步骤">二、kMeans步骤</h2><p>K-Means 聚类步骤是一个循环迭代的算法, 非常简单易懂：</p><ol type="1"><li><p>假定我们要对 N 个样本观测做聚类, 要求聚为 K 类, 首先选择 K个点作为初始中心点</p></li><li><p>接下来, 按照距离初始中心点最小的原则,把所有观测分到各中心点所在的类中</p></li><li><p>每类中有若干个观测, 计算 K 个类中所有样本点的均值,作为第二次迭代的 K 个中心点</p></li><li><p>然后根据这个中心重复第2、3步，直到收敛(中心点不再改变或达到指定的迭代次数), 聚类过程结束</p></li></ol><h2 id="三代码分析">三、代码分析</h2><h3 id="流程">1. 流程</h3><p>Step 1: 从特定文件 iris.arff 读入数据存放在一个特定的数据结构中,我将它命名为 dataset.</p><p>Step 2: 人为地为最后要分的类个数做出规定, 我们这里把类别固定为3,当然这一操作就感觉是一种上帝视角了.</p><p>Step 3: 开始聚类</p><p>Step 3.1: 获得一个混淆后的整数数组, 其中存放的是下标,这个下标指的是数据在 dataset 里的下标.</p><p>Step 3.2: 用欧式距离找到各点到中心点距离,然后把它归到最近的那个类中.</p><p>Step 3.3: 重新找中心点, 就是将每个类中所有数据各类别加起来取平均值.重复 Step 3的步骤直到中心点不变.</p><h3 id="完整代码">2. 完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> kmeans;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> weka.core.Instances;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * kMeans clustering.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMeans</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Manhattan distance.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MANHATTAN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Euclidean distance.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EUCLIDEAN</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The distance measure.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">distanceMeasure</span> <span class="hljs-operator">=</span> EUCLIDEAN;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A random instance;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The data.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of clusters.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numClusters</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The clusters.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[][] clusters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The data filename.</span><br><span class="hljs-comment">     *  ******************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KMeans</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        dataset = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(fileReader);<br>            fileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Cannot read the file: &quot;</span> + paraFilename + <span class="hljs-string">&quot;\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     * A setter.</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumClusters</span><span class="hljs-params">(<span class="hljs-type">int</span> paraNumClusters)</span> &#123;<br>        numClusters = paraNumClusters;<br>    &#125;<span class="hljs-comment">// Of the setter</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Get a random indices for data randomization.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLength The length of the sequence.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> An array of indices, e.g., &#123;4, 3, 1, 5, 0, 2&#125; with length 6.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getRandomIndices(<span class="hljs-type">int</span> paraLength) &#123;<br>        <span class="hljs-type">int</span>[] resultIndices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraLength];<br><br>        <span class="hljs-comment">// Step 1. Initialize.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>            resultIndices[i] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 2. Randomly swap.</span><br>        <span class="hljs-type">int</span> tempFirst, tempSecond, tempValue;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>            <span class="hljs-comment">// Generate two random indices.</span><br>            tempFirst = random.nextInt(paraLength);<br>            tempSecond = random.nextInt(paraLength);<br><br>            <span class="hljs-comment">// Swap.</span><br>            tempValue = resultIndices[tempFirst];<br>            resultIndices[tempFirst] = resultIndices[tempSecond];<br>            resultIndices[tempSecond] = tempValue;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultIndices;<br>    &#125;<span class="hljs-comment">// Of getRandomIndices</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * The distance between two instances.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraI     The index of the first instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraArray The array representing a point in the space.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The distance.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distance</span><span class="hljs-params">(<span class="hljs-type">int</span> paraI, <span class="hljs-type">double</span>[] paraArray)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultDistance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> tempDifference;<br>        <span class="hljs-keyword">switch</span> (distanceMeasure) &#123;<br>            <span class="hljs-keyword">case</span> MANHATTAN:<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numAttributes() - <span class="hljs-number">1</span>; i++) &#123;<br>                    tempDifference = dataset.instance(paraI).value(i) - paraArray[i];<br>                    <span class="hljs-keyword">if</span> (tempDifference &lt; <span class="hljs-number">0</span>) &#123;<br>                        resultDistance -= tempDifference;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        resultDistance += tempDifference;<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                &#125; <span class="hljs-comment">// Of for i</span><br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> EUCLIDEAN:<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numAttributes() - <span class="hljs-number">1</span>; i++) &#123;<br>                    tempDifference = dataset.instance(paraI).value(i) - paraArray[i];<br>                    resultDistance += tempDifference * tempDifference;<br>                &#125; <span class="hljs-comment">// Of for i</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Unsupported distance measure: &quot;</span> + distanceMeasure);<br>        &#125;<span class="hljs-comment">// Of switch</span><br><br>        <span class="hljs-keyword">return</span> resultDistance;<br>    &#125;<span class="hljs-comment">// Of distance</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     * Clustering.</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clustering</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] tempOldClusterArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>        tempOldClusterArray[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] tempClusterArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br>        Arrays.fill(tempClusterArray, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">double</span>[][] tempCenters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClusters][dataset.numAttributes() - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// Step 1. Initialize centers.</span><br>        <span class="hljs-type">int</span>[] tempRandomOrders = getRandomIndices(dataset.numInstances());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClusters; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempCenters[<span class="hljs-number">0</span>].length; j++) &#123;<br>                tempCenters[i][j] = dataset.instance(tempRandomOrders[i]).value(j);<br>            &#125; <span class="hljs-comment">// Of for j</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">int</span>[] tempClusterLengths = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (!Arrays.equals(tempOldClusterArray, tempClusterArray)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;New loop ...&quot;</span>);<br>            tempOldClusterArray = tempClusterArray;<br>            tempClusterArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numInstances()];<br><br>            <span class="hljs-comment">// Step 2.1 Minimization. Assign cluster to each instance.</span><br>            <span class="hljs-type">int</span> tempNearestCenter;<br>            <span class="hljs-type">double</span> tempNearestDistance;<br>            <span class="hljs-type">double</span> tempDistance;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>                tempNearestCenter = -<span class="hljs-number">1</span>;<br>                tempNearestDistance = Double.MAX_VALUE;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numClusters; j++) &#123;<br>                    tempDistance = distance(i, tempCenters[j]);<br>                    <span class="hljs-keyword">if</span> (tempNearestDistance &gt; tempDistance) &#123;<br>                        tempNearestDistance = tempDistance;<br>                        tempNearestCenter = j;<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                &#125; <span class="hljs-comment">// Of for j</span><br>                tempClusterArray[i] = tempNearestCenter;<br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Step 2.2 Mean. Find new centers.</span><br>            tempClusterLengths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numClusters];<br>            Arrays.fill(tempClusterLengths, <span class="hljs-number">0</span>);<br>            <span class="hljs-type">double</span>[][] tempNewCenters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numClusters][dataset.numAttributes() - <span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// Arrays.fill(tempNewCenters, 0);</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numInstances(); i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempNewCenters[<span class="hljs-number">0</span>].length; j++) &#123;<br>                    tempNewCenters[tempClusterArray[i]][j] += dataset.instance(i).value(j);<br>                &#125; <span class="hljs-comment">// Of for j</span><br>                tempClusterLengths[tempClusterArray[i]]++;<br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            <span class="hljs-comment">// Step 2.3 Now average</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNewCenters.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempNewCenters[<span class="hljs-number">0</span>].length; j++) &#123;<br>                    tempNewCenters[i][j] /= tempClusterLengths[i];<br>                &#125; <span class="hljs-comment">// Of for j</span><br>            &#125; <span class="hljs-comment">// Of for i</span><br><br>            System.out.println(<span class="hljs-string">&quot;Now the new centers are: &quot;</span> + Arrays.deepToString(tempNewCenters));<br>            tempCenters = tempNewCenters;<br>        &#125; <span class="hljs-comment">// Of while</span><br><br>        <span class="hljs-comment">// Step 3. Form clusters.</span><br>        clusters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numClusters][];<br>        <span class="hljs-type">int</span>[] tempCounters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numClusters];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numClusters; i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempClusterLengths != <span class="hljs-literal">null</span>) &#123;<br>                clusters[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempClusterLengths[i]];<br>            &#125;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempClusterArray.length; i++) &#123;<br>            clusters[tempClusterArray[i]][tempCounters[tempClusterArray[i]]] = i;<br>            tempCounters[tempClusterArray[i]]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;The clusters are: \r\n&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; clusters.length; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;clusters &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; clusters[i].length; j++) &#123;<br>                System.out.print( clusters[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<span class="hljs-comment">// Of clustering</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     * Clustering.</span><br><span class="hljs-comment">     * ******************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testClustering</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">KMeans</span> <span class="hljs-variable">tempKMeans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KMeans</span>(<span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>);<br>        tempKMeans.setNumClusters(<span class="hljs-number">3</span>);<br>        tempKMeans.clustering();<br>    &#125;<span class="hljs-comment">// Of testClustering</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * A testing method.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        testClustering();<br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class KMeans</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/202254172906.png" /></p><h1 id="总结">总结</h1><p>kMeans 优点在于原理简单, 容易实现, 聚类效果好.</p><p>当然, 也有一些缺点：</p><ol type="1"><li><p>K 值、初始点的选取不好确定.</p></li><li><p>得到的结果只是局部最优.</p></li><li><p>受离群值影响大.</p></li></ol><p>计算机中的随机是伪随机. 虽然出现多种结果,但是随着运行次数的增加就会发现有重复的聚类出现.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>kMeans</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day27</title>
    <link href="/posts/301c8f22/"/>
    <url>/posts/301c8f22/</url>
    
    <content type="html"><![CDATA[<h1 id="基于-m-distance-的推荐">基于 M-distance 的推荐</h1><h2 id="一算法概述">一、算法概述</h2><p>所谓 M-distance, 就是根据平均分来计算两个用户 (或项目)之间的距离.</p><p>令项目的 <span class="math inline">\(j\)</span> 的平均分为 <spanclass="math inline">\(x_{.j}\)</span></p><p>采用 item-based recommendation, 则第 <spanclass="math inline">\(j\)</span> 个项目关于第 <spanclass="math inline">\(i\)</span> 个用户的邻居项目集合为</p><p><span class="math display">\[N_{ij} = \{ 1 \le {j}&#39; \le m | {j}&#39; \neq j, p_{i{j}&#39;} \neq0, \left | \overline {r_{.j}} -  \overline {r_{.{j}&#39;}} \right | &lt;\delta \}\]</span></p><p>第 <span class="math inline">\(i\)</span> 个用户对 <spanclass="math inline">\(j\)</span> 个项目的评分预测为</p><p><span class="math display">\[p_{ij} = \frac{\textstyle \sum_{j&#39; \in N_{ij} } r_{i{j}&#39;}}{\left |    N_{ij}\right |}\]</span></p><h2 id="二算法特点">二、算法特点</h2><p>邻居不用 <span class="math inline">\(k\)</span> 控制. 距离小于 radius( 即 <span class="math inline">\(\delta\)</span> ) 的都是邻居. 使用M-distance 时, 这种方式效果更好.</p><p>使用 leave-one-out 的测试方式, 很高效的算法才能使用这种方式.这种算法的特点就是只用一个做为测试, 其他全部用于训练.所以本文代码就没有对缺失的评分进行预测,仅仅只是通过已有数据来测试算法的准确性.</p><p>最后求平均绝对误差 MAE 和 均方根误差 RMSE来对算法的优劣性进行判断.</p><h2 id="三算法图解">三、算法图解</h2><p><span class="math inline">\(u_i (i=0,1,2,3,4)\)</span> 表示不同用户,<span class="math inline">\(m_i (i=0,1,2,3,4)\)</span> 表示不同电影.</p><p>表格中的数字表示不同用户对不同电影的评分.</p><p><span class="math inline">\(num\)</span>表示对于某一个电影已有数据的个数, <spanclass="math inline">\(sum\)</span> 表示对某个电影已有数据的总和.</p><p><span class="math inline">\(\overline{r}\)</span> 表示平均评分, 即(<span class="math inline">\(\frac{sum}{num}\)</span>)</p><p>图中 0 占大多数, 表示还未能看过电影.我们就是需要对这些数据进行预测.</p><p>在预测时只取差值小于 <span class="math inline">\(\delta\)</span>的那一列数据. 如果列中对需推荐用户的值为 0 则不带入计算.</p><p>图中的问号在实际中是知道并存在的, 只是我们故意装作不知道它.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202253172036.png" /></p><h2 id="四代码分析">四、代码分析</h2><h3 id="数据集分析">1. 数据集分析</h3><p>评分表 (用户, 项目, 评分) 的压缩方式给出 前几行数据为: <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs">0,0,5<br>0,1,3<br>0,2,4<br>0,3,3<br>0,4,3<br>0,5,5<br>0,6,4<br>…<br>1,0,4<br>1,9,2<br>1,12,4<br></code></pre></td></tr></table></figure>其中, "0,2,4" 表示用户 0 对项目 2 的评分为 4. 用户 1 对项目 1、2等的评分没有, 表示没看过该电影. 在用户数、项目数很多时,必须使用压缩存储.</p><h3 id="完整代码">2. 完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> knn;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Recommendation with M-distance.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shi-Huai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MBR</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Default rating for 1-5 points.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">DEFAULT_RATING</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The total number of users.</span><br><span class="hljs-comment">     * The number of row in matrix.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> numUsers;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The total number of items.</span><br><span class="hljs-comment">     * The number of column in matrix.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> numItems;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The total number of ratings (non-zero values)</span><br><span class="hljs-comment">     * The number of Rating in matrix.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> numRatings;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The predictions.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] predictions;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Compressed rating matrix. User-item-rating triples.</span><br><span class="hljs-comment">     * Just list 0:0:1 = user0:movie0:rating1.</span><br><span class="hljs-comment">     * In the variable maybe not continuous.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] compressedRatingMatrix;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The degree of users (how many item he has rated).</span><br><span class="hljs-comment">     * if userDegrees[0] = 10, so user0 has 10 item what rated.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] userDegrees;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The average rating of the current user.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] userAverageRatings;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The degree of items (how many item has rated).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] itemDegrees;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The average rating of the current item.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] itemAverageRatings;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The first user start from 0. Let the first user has x ratings, the second</span><br><span class="hljs-comment">     * user will start from x. Also, we can use userDegrees to add.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] userStartingIndices;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Number of non-neighbor objects.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numNonNeighbors;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The radius (delta) for determining the neighborhood.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Construct the rating matrix.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename the rating filename.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumUsers       number of users</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumItems       number of items</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNumRatings     number of ratings</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MBR</span><span class="hljs-params">(String paraFilename, <span class="hljs-type">int</span> paraNumUsers, <span class="hljs-type">int</span> paraNumItems, <span class="hljs-type">int</span> paraNumRatings)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// Step 1. Initialize these arrays</span><br>        numItems = paraNumItems;<br>        numUsers = paraNumUsers;<br>        numRatings = paraNumRatings;<br><br>        userDegrees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numUsers];<br>        userAverageRatings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numUsers];<br>        <span class="hljs-comment">// The last one in userStartingIndices record the border index of the matrix.</span><br>        userStartingIndices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numUsers + <span class="hljs-number">1</span>];<br><br>        itemDegrees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numItems];<br>        itemAverageRatings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numItems];<br>        compressedRatingMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numRatings][<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">// use all ratings</span><br>        predictions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numRatings];<br><br>        System.out.println(<span class="hljs-string">&quot;Reading &quot;</span> + paraFilename);<br><br>        <span class="hljs-comment">// Step 2. Read the data file.</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(paraFilename);<br>        <span class="hljs-keyword">if</span> (!tempFile.exists()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;File &quot;</span> + paraFilename + <span class="hljs-string">&quot; does not exists.&quot;</span>);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of if</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">tempBufReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(tempFile));<br><br>        String tempString;<br>        String[] tempStrArray;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        userStartingIndices[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        userStartingIndices[numUsers] = numRatings;<br><br>        <span class="hljs-keyword">while</span> ((tempString = tempBufReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Each line has three values</span><br>            tempStrArray = tempString.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            compressedRatingMatrix[tempIndex][<span class="hljs-number">0</span>] = Integer.parseInt(tempStrArray[<span class="hljs-number">0</span>]);<br>            compressedRatingMatrix[tempIndex][<span class="hljs-number">1</span>] = Integer.parseInt(tempStrArray[<span class="hljs-number">1</span>]);<br>            compressedRatingMatrix[tempIndex][<span class="hljs-number">2</span>] = Integer.parseInt(tempStrArray[<span class="hljs-number">2</span>]);<br><br>            userDegrees[compressedRatingMatrix[tempIndex][<span class="hljs-number">0</span>]]++;<br>            itemDegrees[compressedRatingMatrix[tempIndex][<span class="hljs-number">1</span>]]++;<br><br>            <span class="hljs-keyword">if</span> (tempIndex &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// Starting to read the data of a new user.</span><br>                <span class="hljs-keyword">if</span> (compressedRatingMatrix[tempIndex][<span class="hljs-number">0</span>] != compressedRatingMatrix[tempIndex - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) &#123;<br>                    userStartingIndices[compressedRatingMatrix[tempIndex][<span class="hljs-number">0</span>]] = tempIndex;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of if</span><br>            tempIndex++;<br>        &#125; <span class="hljs-comment">// Of while</span><br>        tempBufReader.close();<br><br>        <span class="hljs-type">double</span>[] tempUserTotalScore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numUsers];<br>        <span class="hljs-type">double</span>[] tempItemTotalScore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[numItems];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numRatings; i++) &#123;<br>            tempUserTotalScore[compressedRatingMatrix[i][<span class="hljs-number">0</span>]] += compressedRatingMatrix[i][<span class="hljs-number">2</span>];<br>            tempItemTotalScore[compressedRatingMatrix[i][<span class="hljs-number">1</span>]] += compressedRatingMatrix[i][<span class="hljs-number">2</span>];<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numUsers; i++) &#123;<br>            userAverageRatings[i] = tempUserTotalScore[i] / userDegrees[i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numItems; i++) &#123;<br>            itemAverageRatings[i] = tempItemTotalScore[i] / itemDegrees[i];<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Set the radius (delta).</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraRadius The given radius.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> paraRadius)</span> &#123;<br>        <span class="hljs-keyword">if</span> (paraRadius &gt; <span class="hljs-number">0</span>) &#123;<br>            radius = paraRadius;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            radius = <span class="hljs-number">0.1</span>;<br>        &#125; <span class="hljs-comment">// Of if</span><br>    &#125;<span class="hljs-comment">// Of setRadius</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Leave-one-out prediction. The predicted values are stored in predictions.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #predictions</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leaveOneOutPrediction</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> tempItemAverageRating;<br>        <span class="hljs-comment">// Make each line of the code shorter.</span><br>        <span class="hljs-type">int</span> tempUser, tempItem, tempRating;<br>        System.out.println(<span class="hljs-string">&quot;\r\nLeaveOneOutPrediction for radius &quot;</span> + radius);<br><br>        numNonNeighbors = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numRatings; i++) &#123;<br>            tempUser = compressedRatingMatrix[i][<span class="hljs-number">0</span>];<br>            tempItem = compressedRatingMatrix[i][<span class="hljs-number">1</span>];<br>            tempRating = compressedRatingMatrix[i][<span class="hljs-number">2</span>];<br><br>            <span class="hljs-comment">// Step 1. Recompute average rating of the current item.</span><br>            <span class="hljs-comment">// Use one for test, so we should cut the one.</span><br>            tempItemAverageRating = (itemAverageRatings[tempItem] * itemDegrees[tempItem] - tempRating)<br>                                     / (itemDegrees[tempItem] - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">// Step 2. Recompute neighbors, at the same time obtain the ratings of neighbors.</span><br>            <span class="hljs-comment">// The same user with his different movies.</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tempNeighbors</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">tempTotal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> tempComparedItem;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> userStartingIndices[tempUser]; j &lt; userStartingIndices[tempUser + <span class="hljs-number">1</span>]; j++) &#123;<br>                tempComparedItem = compressedRatingMatrix[j][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (tempItem == tempComparedItem) &#123;<br>                    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">// Ignore itself.</span><br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-keyword">if</span> (Math.abs(tempItemAverageRating - itemAverageRatings[tempComparedItem]) &lt; radius) &#123;<br>                    tempTotal += compressedRatingMatrix[j][<span class="hljs-number">2</span>];<br>                    tempNeighbors++;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            <span class="hljs-comment">// Step 3. Predict as the average value of neighbors.</span><br>            <span class="hljs-keyword">if</span> (tempNeighbors &gt; <span class="hljs-number">0</span>) &#123;<br>                predictions[i] = tempTotal / tempNeighbors;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                predictions[i] = DEFAULT_RATING;<br>                numNonNeighbors++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of leaveOneOutPrediction</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Compute the MAE based on the deviation of each leave-one-out.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Shi-Huai Wen</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeMAE</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempTotalError</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; predictions.length; i++) &#123;<br>            tempTotalError += Math.abs(predictions[i] - compressedRatingMatrix[i][<span class="hljs-number">2</span>]);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempTotalError / predictions.length;<br>    &#125;<span class="hljs-comment">// Of computeMAE</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * Compute the MAE based on the deviation of each leave-one-out.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Shi-Huai Wen</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeRSME</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempTotalError</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; predictions.length; i++) &#123;<br>            tempTotalError += (predictions[i] - compressedRatingMatrix[i][<span class="hljs-number">2</span>]) * (predictions[i] - compressedRatingMatrix[i][<span class="hljs-number">2</span>]);<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempAverage</span> <span class="hljs-operator">=</span> tempTotalError / predictions.length;<br><br>        <span class="hljs-keyword">return</span> Math.sqrt(tempAverage);<br>    &#125;<span class="hljs-comment">// Of computeRSME</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     * The entrance of the program.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     * ************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">MBR</span> <span class="hljs-variable">tempRecommender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MBR</span>(<span class="hljs-string">&quot;D:/Work/sampledata/movielens-943u1682m.txt&quot;</span>, <span class="hljs-number">943</span>, <span class="hljs-number">1682</span>, <span class="hljs-number">100000</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> <span class="hljs-variable">tempRadius</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>; tempRadius &lt; <span class="hljs-number">0.6</span>; tempRadius += <span class="hljs-number">0.1</span>) &#123;<br>                tempRecommender.setRadius(tempRadius);<br><br>                tempRecommender.leaveOneOutPrediction();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempMAE</span> <span class="hljs-operator">=</span> tempRecommender.computeMAE();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">tempRSME</span> <span class="hljs-operator">=</span> tempRecommender.computeRSME();<br><br>                System.out.println(<span class="hljs-string">&quot;Radius = &quot;</span> + tempRadius + <span class="hljs-string">&quot;, MAE = &quot;</span> + tempMAE + <span class="hljs-string">&quot;, RSME = &quot;</span> + tempRSME<br>                                    + <span class="hljs-string">&quot;, numNonNeighbors = &quot;</span> + tempRecommender.numNonNeighbors);<br>            &#125; <span class="hljs-comment">// Of for tempRadius</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error occurred in main \r\n&quot;</span> + ee);<br>        &#125; <span class="hljs-comment">// Of try</span><br>    &#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class MBR</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/202253191103.png" /></p><h1 id="总结">总结</h1><p>大道至简, 越是简单的算法可能会解决更多的问题.</p><p>不过代码中的数组太过于多, 阅读起来存在一定的障碍.</p><p>运行结果中出现了 0.1 + 0.2 = 0.30000000000000004 , 浮点数的奥秘.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
      <tag>M-distance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day26</title>
    <link href="/posts/471bbfb4/"/>
    <url>/posts/471bbfb4/</url>
    
    <content type="html"><![CDATA[<h1 id="knn-分类器">kNN 分类器</h1><h2 id="一算法概述">一、算法概述</h2><p>KNN 可以说是最简单的分类算法之一, 同时, 它也是最常用的分类算法之一.注意 KNN 算法是有监督学习中的分类算法, 它看起来和另一个机器学习算法Kmeans 有点像（ Kmeans 是无监督学习算法）, 但却是有本质区别的.</p><h2 id="二算法介绍">二、算法介绍</h2><p>KNN 的全称是K Nearest Neighbors, 意思是 K 个最近的邻居,从这个名字我们就能看出一些 KNN 算法的蛛丝马迹了. K 个最近邻居, 毫无疑问,K的取值肯定是至关重要的.那么最近的邻居又是怎么回事？ 其实, KNN的原理就是当预测一个新的值 x 的时候, 根据它距离最近的 K个点是什么类别来判断 x 属于哪个类别.</p><h3 id="距离计算">1. 距离计算</h3><p>有两种距离计算方式, 一种是欧式距离, 另一种是曼哈顿距离.在本文中因为只使用了欧式距离那么我就在这个地方阐述一下.这个式子其实就是之前求二维或者三维坐标系下两点距离的公式,我们把这个公式推广到 n 维.</p><p><span class="math display">\[distance(x,y) = \sqrt[n]{(x_1-y_1)^{2} + (x_2-y_2)^{2} + ...+(x_n-y_n)^{2}}\]</span></p><h3 id="k值选择">2. K值选择</h3><p>在示例代码中我将 K 值默认为 7. 当然这不是一个固定的, K值得选择还需要通过后期不断实验对比才能够最终确定.</p><h2 id="三knn特点">三、KNN特点</h2><p>KNN 是一种非参的, 惰性的算法模型. 什么是非参, 什么是惰性呢？</p><p>非参的意思并不是说这个算法不需要参数,而是意味着这个模型不会对数据做出任何的假设,与之相对的是线性回归（我们总会假设线性回归是一条直线）.</p><p>也就是说 KNN 建立的模型结构是根据数据来决定的,这也比较符合现实的情况,毕竟在现实中的情况往往与理论上的假设是不相符的.</p><p>惰性又是什么意思呢？</p><p>想想看, 同样是分类算法, 逻辑回归需要先对数据进行大量训练（tranning）,最后才会得到一个算法模型. 而 KNN 算法却不需要,它没有明确的训练数据的过程, 或者说这个过程很快.</p><h2 id="四代码分析">四、代码分析</h2><h3 id="流程">1. 流程</h3><p>Step 1: 从特定文件 iris.arff 读入数据存放在一个特定的数据结构中,我将它命名为 dataset.</p><p>Step 2: 获得一个混淆后的整数数组, 其中存放的是下标,这个下标指的是数据在 dataset 里的下标.</p><p>Step 3: 将这个数组按照传入的参数分为两部分, 一部分做为训练集,另一部分做为测试集. 至此数据处理的工作完成. 接下来就是预测的过程.</p><p>Step 4: 需要预测的个数和测试集中的个数是相同的,因为在最后要两者对比来判断预测率. 在此对每一个点进行预测.</p><p>Step 4.1: 预测的过程很简单,就是计算训练集中每个点到该点的欧式距离然后选择代码中定义的前 K 个点.</p><p>Step 4.2: 有了离该点最近的 K 个点, 接下来就进行 "投票"的操作来对这个点进行分类. 先对那取得的 K 个点统计每个类别有多少个数.然后选出个数最高的那个类别, 返回其在 dataset 中的下标.至此对该点的预测完毕.</p><p>Step 5: 计算预测精度. 计算测试集和预测集有多少个值是相等的,然后用这个值除以测试集或者预测集的总数, 这样就获得了预测精度.</p><h3 id="完整代码">2. 完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> knn;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> weka.core.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * kNN classification.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email: shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KnnClassification</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Manhattan distance.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MANHATTAN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Euclidean distance.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EUCLIDEAN</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The distance measure.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">distanceMeasure</span> <span class="hljs-operator">=</span> EUCLIDEAN;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A random instance;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The number of neighbors.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numNeighbors</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The whole dataset.</span><br><span class="hljs-comment">     */</span><br>    Instances dataset;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The training set. Represented by the indices of the data.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] trainingSet;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The testing set. Represented by the indices of the data.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] testingSet;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The predictions.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] predictions;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * The first constructor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraFilename The arff filename.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KnnClassification</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(paraFilename);<br>            dataset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instances</span>(fileReader);<br>            <span class="hljs-comment">// The last attribute is the decision class.</span><br>            dataset.setClassIndex(dataset.numAttributes() - <span class="hljs-number">1</span>);<br>            fileReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error occurred while trying to read &#x27; &quot;</span> + paraFilename<br>                    + <span class="hljs-string">&quot; &#x27; in KnnClassification constructor.\r\n&quot;</span> + ee);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-comment">// Of try</span><br>    &#125;<span class="hljs-comment">// Of the first constructor</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Get a random indices for data randomization.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraLength The length of the sequence.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> An array of indices, e.g., &#123;4, 3, 1, 5, 0, 2&#125; with length 6.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getRandomIndices(<span class="hljs-type">int</span> paraLength) &#123;<br>        <span class="hljs-type">int</span>[] resultIndices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraLength];<br><br>        <span class="hljs-comment">// Step 1. Initialize.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>            resultIndices[i] = i;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-comment">// Step 2. Randomly swap.</span><br>        <span class="hljs-type">int</span> tempFirst, tempSecond, tempValue;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>            <span class="hljs-comment">// Generate two random indices.</span><br>            tempFirst = random.nextInt(paraLength);<br>            tempSecond = random.nextInt(paraLength);<br><br>            <span class="hljs-comment">// Swap.</span><br>            tempValue = resultIndices[tempFirst];<br>            resultIndices[tempFirst] = resultIndices[tempSecond];<br>            resultIndices[tempSecond] = tempValue;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> resultIndices;<br>    &#125;<span class="hljs-comment">// Of getRandomIndices</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Split the data into training and testing parts.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraTrainingFraction The fraction of the training set.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">splitTrainingTesting</span><span class="hljs-params">(<span class="hljs-type">double</span> paraTrainingFraction)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempSize</span> <span class="hljs-operator">=</span> dataset.numInstances();<br>        <span class="hljs-type">int</span>[] tempIndices = getRandomIndices(tempSize);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempTrainingSize</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (tempSize * paraTrainingFraction);<br><br>        trainingSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempTrainingSize];<br>        testingSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempSize - tempTrainingSize];<br><br>        System.arraycopy(tempIndices, <span class="hljs-number">0</span>, trainingSet, <span class="hljs-number">0</span>, tempTrainingSize);<br><br>        <span class="hljs-keyword">if</span> (tempSize - tempTrainingSize &gt;= <span class="hljs-number">0</span>) &#123;<br>            System.arraycopy(tempIndices, tempTrainingSize, testingSet, <span class="hljs-number">0</span>, tempSize - tempTrainingSize);<br>        &#125; <span class="hljs-comment">// Of for if</span><br><br>    &#125;<span class="hljs-comment">// Of splitTrainingTesting</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Predict for the whole testing set. The results are stored in predictions.</span><br><span class="hljs-comment">     * #see predictions.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">predict</span><span class="hljs-params">()</span> &#123;<br>        predictions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[testingSet.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; predictions.length; i++) &#123;<br>            predictions[i] = predict(testingSet[i]);<br>        &#125; <span class="hljs-comment">// Of for i</span><br>    &#125;<span class="hljs-comment">// Of predict</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Predict for given instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The prediction.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">predict</span><span class="hljs-params">(<span class="hljs-type">int</span> paraIndex)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempNeighbors = computeNearests(paraIndex);<br>        <span class="hljs-type">int</span> resultPrediction;<br>        resultPrediction = simpleVoting(tempNeighbors);<br><br>        <span class="hljs-keyword">return</span> resultPrediction;<br>    &#125;<span class="hljs-comment">// Of predict</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * The distance between two instances.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraI The index of the first instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraJ The index of the second instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The distance.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distance</span><span class="hljs-params">(<span class="hljs-type">int</span> paraI, <span class="hljs-type">int</span> paraJ)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">resultDistance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> tempDifference;<br>        <span class="hljs-keyword">switch</span> (distanceMeasure) &#123;<br>            <span class="hljs-keyword">case</span> MANHATTAN:<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numAttributes() - <span class="hljs-number">1</span>; i++) &#123;<br>                    tempDifference = dataset.instance(paraI).value(i) - dataset.instance(paraJ).value(i);<br>                    <span class="hljs-keyword">if</span> (tempDifference &lt; <span class="hljs-number">0</span>) &#123;<br>                        resultDistance -= tempDifference;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        resultDistance += tempDifference;<br>                    &#125; <span class="hljs-comment">// Of if</span><br>                &#125; <span class="hljs-comment">// Of for i</span><br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> EUCLIDEAN:<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numAttributes() - <span class="hljs-number">1</span>; i++) &#123;<br>                    tempDifference = dataset.instance(paraI).value(i) - dataset.instance(paraJ).value(i);<br>                    resultDistance += tempDifference * tempDifference;<br>                &#125; <span class="hljs-comment">// Of for i</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Unsupported distance measure: &quot;</span> + distanceMeasure);<br>        &#125;<span class="hljs-comment">// Of switch</span><br><br>        <span class="hljs-keyword">return</span> resultDistance;<br>    &#125;<span class="hljs-comment">// Of distance</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * Get the accuracy of the classifier.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The accuracy.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAccuracy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// A double divides an int gets another double.</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">tempCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; predictions.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (predictions[i] == dataset.instance(testingSet[i]).classValue()) &#123;<br>                tempCorrect++;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempCorrect / testingSet.length;<br>    &#125;<span class="hljs-comment">// Of getAccuracy</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************************</span><br><span class="hljs-comment">     * Compute the nearest k neighbors. Select one neighbor in each scan. In</span><br><span class="hljs-comment">     * fact, we can scan only once. You may implement it by yourself.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraCurrent current instance. We are comparing it with all others.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the indices of the nearest instances.</span><br><span class="hljs-comment">     * ***********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] computeNearests(<span class="hljs-type">int</span> paraCurrent) &#123;<br>        <span class="hljs-type">int</span>[] resultNearests = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNeighbors];<br>        <span class="hljs-type">boolean</span>[] tempSelected = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[trainingSet.length];<br>        <span class="hljs-type">double</span> tempMinimalDistance;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMinimalIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Compute all distances to avoid redundant computation.</span><br>        <span class="hljs-type">double</span>[] tempDistances = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[trainingSet.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; trainingSet.length; i++) &#123;<br>            tempDistances[i] = distance(paraCurrent, trainingSet[i]);<br>        &#125;<span class="hljs-comment">//Of for i</span><br><br>        <span class="hljs-comment">// Select the nearest paraK indices.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNeighbors; i++) &#123;<br>            tempMinimalDistance = Double.MAX_VALUE;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; trainingSet.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (tempSelected[j]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-comment">// Of if</span><br><br>                <span class="hljs-keyword">if</span> (tempDistances[j] &lt; tempMinimalDistance) &#123;<br>                    tempMinimalDistance = tempDistances[j];<br>                    tempMinimalIndex = j;<br>                &#125; <span class="hljs-comment">// Of if</span><br>            &#125; <span class="hljs-comment">// Of for j</span><br><br>            resultNearests[i] = trainingSet[tempMinimalIndex];<br>            tempSelected[tempMinimalIndex] = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        System.out.println(<span class="hljs-string">&quot;The nearest of &quot;</span> + paraCurrent + <span class="hljs-string">&quot; are: &quot;</span> + Arrays.toString(resultNearests));<br>        <span class="hljs-keyword">return</span> resultNearests;<br>    &#125;<span class="hljs-comment">// Of computeNearests</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ***********************************</span><br><span class="hljs-comment">     * Voting using the instances.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paraNeighbors The indices of the neighbors.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The predicted label.</span><br><span class="hljs-comment">     * ***********************************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">simpleVoting</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraNeighbors)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempVotes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[dataset.numClasses()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> paraNeighbor : paraNeighbors) &#123;<br>            tempVotes[(<span class="hljs-type">int</span>) dataset.instance(paraNeighbor).classValue()]++;<br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMaximalVotingIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMaximalVoting</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dataset.numClasses(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (tempVotes[i] &gt; tempMaximalVoting) &#123;<br>                tempMaximalVoting = tempVotes[i];<br>                tempMaximalVotingIndex = i;<br>            &#125; <span class="hljs-comment">// Of if</span><br>        &#125; <span class="hljs-comment">// Of for i</span><br><br>        <span class="hljs-keyword">return</span> tempMaximalVotingIndex;<br>    &#125;<span class="hljs-comment">// Of simpleVoting</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     * The entrance of the program.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment">     * ********************</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">KnnClassification</span> <span class="hljs-variable">tempClassifier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KnnClassification</span>(<span class="hljs-string">&quot;D:/Work/sampledata/iris.arff&quot;</span>);<br>        tempClassifier.splitTrainingTesting(<span class="hljs-number">0.8</span>);<br>        tempClassifier.predict();<br>        System.out.println(<span class="hljs-string">&quot;The accuracy of the classifier is: &quot;</span> + tempClassifier.getAccuracy());<br>    &#125;<span class="hljs-comment">// Of main</span><br><br>&#125;<span class="hljs-comment">// Of class KnnClassification</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p>注: 为了方便调试和阅读代码我将 IDE 从 Eclipse 切换到了 IDEA.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202252164731.png" /></p><h1 id="总结">总结</h1><p>优点:</p><ol type="1"><li><p>简单易用, 相比其他算法, KNN 算是比较简洁明了的算法.即使没有很高的数学基础也能搞清楚它的原理.</p></li><li><p>模型训练时间快, 上面说到 KNN 算法是惰性的,这里也就不再过多讲述.</p></li><li><p>预测效果好.</p></li><li><p>对异常值不敏感</p></li></ol><p>缺点:</p><ol type="1"><li><p>对内存要求较高, 因为该算法存储了所有训练数据</p></li><li><p>预测阶段可能很慢</p></li><li><p>对不相关的功能和数据规模敏感</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KNN</tag>
      
      <tag>java</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day25</title>
    <link href="/posts/de12ee0e/"/>
    <url>/posts/de12ee0e/</url>
    
    <content type="html"><![CDATA[<h1 id="归并排序">归并排序</h1><h2 id="一描述">一、描述</h2><p>归并排序（Merge sort）是建立在归并操作上的一种有效、稳定的排序算法,该算法是采用分治法(Divide and Conquer）的一个非常典型的应用.将已有序的子序列合并, 得到完全有序的序列</p><p>即先使每个子序列有序, 再使子序列段间有序.若将两个有序表合并成一个有序表, 称为二路归并.</p><p><span class="math inline">\(\log n\)</span>轮, 每轮 <spanclass="math inline">\(O(n)\)</span> 次拷贝. 因此时间复杂度为 <spanclass="math inline">\(O(n\log n)\)</span></p><p>空间复杂度为 <span class="math inline">\(O(n)\)</span>.只需要一行辅助空间.</p><p>归并排序适用于数据量大, 并且对稳定性有要求的场景.</p><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Merge sort. Results are stored in the member variable data.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Allocate space.</span><br><br><span class="hljs-type">int</span> tempRow; <span class="hljs-comment">// The current row</span><br><span class="hljs-type">int</span> tempGroups; <span class="hljs-comment">// Number of groups</span><br><span class="hljs-type">int</span> tempActualRow; <span class="hljs-comment">// Only 0 or 1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNextRow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> tempGroupNumber;<br><span class="hljs-type">int</span> tempFirstStart, tempSecondStart, tempSecondEnd;<br><span class="hljs-type">int</span> tempFirstIndex, tempSecondIndex;<br><span class="hljs-type">int</span> tempNumCopied;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>System.out.print(data[i]);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println();<br><br>DataNode[][] tempMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataNode</span>[<span class="hljs-number">2</span>][length];<br><br><span class="hljs-comment">// Step 2. Copy data.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>tempMatrix[<span class="hljs-number">0</span>][i] = data[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Merge. log n rounds</span><br>tempRow = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">tempSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; tempSize &lt;= length; tempSize *= <span class="hljs-number">2</span>) &#123;<br><span class="hljs-comment">// Reuse the space of the two rows.</span><br>tempRow++;<br>System.out.println(<span class="hljs-string">&quot;Current row = &quot;</span> + tempRow);<br>tempActualRow = tempRow % <span class="hljs-number">2</span>;<br>tempNextRow = (tempRow + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>;<br><br>tempGroups = length / (tempSize * <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (length % (tempSize * <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) &#123;<br>tempGroups++;<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;tempSize = &quot;</span> + tempSize + <span class="hljs-string">&quot;, numGroups = &quot;</span> + tempGroups);<br><br><span class="hljs-keyword">for</span> (tempGroupNumber = <span class="hljs-number">0</span>; tempGroupNumber &lt; tempGroups; tempGroupNumber++) &#123;<br>tempFirstStart = tempGroupNumber * tempSize * <span class="hljs-number">2</span>;<br>tempSecondStart = tempGroupNumber * tempSize * <span class="hljs-number">2</span> + tempSize;<br><span class="hljs-keyword">if</span> (tempSecondStart &gt; length - <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// Copy the first part.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> tempFirstStart; i &lt; length; i++) &#123;<br>tempMatrix[tempNextRow][i] = tempMatrix[tempActualRow][i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>tempSecondEnd = tempGroupNumber * tempSize * <span class="hljs-number">2</span> + tempSize * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (tempSecondEnd &gt; length - <span class="hljs-number">1</span>) &#123;<br>tempSecondEnd = length - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.println(<span class="hljs-string">&quot;Trying to merge [&quot;</span> + tempFirstStart + <span class="hljs-string">&quot;, &quot;</span> + (tempSecondStart - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;] with [&quot;</span><br>+ tempSecondStart + <span class="hljs-string">&quot;, &quot;</span> + tempSecondEnd + <span class="hljs-string">&quot;]&quot;</span>);<br><br>tempFirstIndex = tempFirstStart;<br>tempSecondIndex = tempSecondStart;<br>tempNumCopied = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((tempFirstIndex &lt;= tempSecondStart - <span class="hljs-number">1</span>) &amp;&amp; (tempSecondIndex &lt;= tempSecondEnd)) &#123;<br><span class="hljs-keyword">if</span> (tempMatrix[tempActualRow][tempFirstIndex].key &lt;= tempMatrix[tempActualRow][tempSecondIndex].key) &#123;<br><br>tempMatrix[tempNextRow][tempFirstStart<br>+ tempNumCopied] = tempMatrix[tempActualRow][tempFirstIndex];<br>tempFirstIndex++;<br>System.out.println(<span class="hljs-string">&quot;copying &quot;</span> + tempMatrix[tempActualRow][tempFirstIndex]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempMatrix[tempNextRow][tempFirstStart<br>+ tempNumCopied] = tempMatrix[tempActualRow][tempSecondIndex];<br>System.out.println(<span class="hljs-string">&quot;copying &quot;</span> + tempMatrix[tempActualRow][tempSecondIndex]);<br>tempSecondIndex++;<br>&#125; <span class="hljs-comment">// Of if</span><br>tempNumCopied++;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">while</span> (tempFirstIndex &lt;= tempSecondStart - <span class="hljs-number">1</span>) &#123;<br>tempMatrix[tempNextRow][tempFirstStart + tempNumCopied] = tempMatrix[tempActualRow][tempFirstIndex];<br>tempFirstIndex++;<br>tempNumCopied++;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">while</span> (tempSecondIndex &lt;= tempSecondEnd) &#123;<br>tempMatrix[tempNextRow][tempFirstStart<br>+ tempNumCopied] = tempMatrix[tempActualRow][tempSecondIndex];<br>tempSecondIndex++;<br>tempNumCopied++;<br>&#125; <span class="hljs-comment">// Of while</span><br>&#125; <span class="hljs-comment">// Of for groupNumber</span><br><br>System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + tempRow);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>System.out.print(tempMatrix[tempNextRow][i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125; <span class="hljs-comment">// Of for j</span><br>System.out.println();<br>&#125; <span class="hljs-comment">// Of for tempStepSize</span><br><br>data = tempMatrix[tempNextRow];<br>&#125;<span class="hljs-comment">// Of mergeSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.mergeSort();<br>System.out.println(tempDataArray);<br>&#125;<span class="hljs-comment">// Of mergeSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022429210557.png" /></p><h2 id="四总结">四、总结</h2><p>相比起通过循环来实现归并排序, 使用递归的形式仿佛更容易实现.</p><h1 id="小结">小结</h1><h2 id="一各大查找算法对比">一、各大查找算法对比</h2><table><thead><tr class="header"><th>查找算法</th><th>复杂度</th></tr></thead><tbody><tr class="odd"><td>顺序查找</td><td><span class="math inline">\(O(n)\)</span></td></tr><tr class="even"><td>二分查找</td><td><span class="math inline">\(O(n\log n)\)</span></td></tr><tr class="odd"><td>哈希查找</td><td><span class="math inline">\(O(1)\)</span> (无冲突的情况下)</td></tr></tbody></table><h2id="二设计一个自己的-hash-函数和一个冲突解决机制.">二、设计一个自己的Hash 函数和一个冲突解决机制.</h2><h3 id="hash-函数">1. Hash 函数</h3><p>找一个素数用于取模.</p><h3 id="冲突解决机制">2. 冲突解决机制</h3><p>采用链地址法, 当发生冲突时将冲突元素组织成为一个链表.</p><h2 id="三各大排序算法对比">三、各大排序算法对比</h2><table><thead><tr class="header"><th>排序算法</th><th>平均时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr class="odd"><td>插入排序</td><td><span class="math inline">\(O(n)\)</span></td><td><span class="math inline">\(O(1)\)</span></td><td>稳定</td></tr><tr class="even"><td>希尔排序</td><td><span class="math inline">\(O(n\log n)\)</span></td><td><span class="math inline">\(O(1)\)</span></td><td>不稳定</td></tr><tr class="odd"><td>冒泡排序</td><td><span class="math inline">\(O(n^2)\)</span></td><td><span class="math inline">\(O(1)\)</span></td><td>稳定</td></tr><tr class="even"><td>快速排序</td><td><span class="math inline">\(O(n\log n)\)</span></td><td><span class="math inline">\(O(\log n)\)</span></td><td>不稳定</td></tr><tr class="odd"><td>选择排序</td><td><span class="math inline">\(O(n^2)\)</span></td><td><span class="math inline">\(O(1)\)</span></td><td>不稳定</td></tr><tr class="even"><td>堆排序</td><td><span class="math inline">\(O(n\log n)\)</span></td><td><span class="math inline">\(O(1)\)</span></td><td>不稳定</td></tr><tr class="odd"><td>归并排序</td><td><span class="math inline">\(O(n\log n)\)</span></td><td><span class="math inline">\(O(n)\)</span></td><td>稳定</td></tr></tbody></table><h2id="四描述各种排序算法的特点和基本思想.">四、描述各种排序算法的特点和基本思想.</h2><p>插入排序是每趟排序把元素插入到已排好序的数组中. 特点是稳定, 第 k次排序后, 前 k 个元素已经是从小到大排好序的.</p><p>希尔排序是基于插入排序的一种排序算法, 思想是对长度为 n 的数组 s ,每趟排序基于间隔 h 分成几组, 对每组数据使用插入排序方法进行排序,然后减小 h 的值, 这样刚开始时候虽然分组比较多, 但每组数据很少, h减小后每组数据多但基本有序,而插入排序对已经基本有序的数组排序效率较高.</p><p>冒泡排序思想很简单, 就是对每个下标 i, 取 j 从 0 到 n-1-i(n是数组长度)进行遍历. 如果两个相邻的元素 s[j] &gt; s[j+1], 就交换,这样每次最大的元素已经移动到了后面正确的位置.</p><p>快速排序是内排序中平均性能较好的排序,思想是每趟排序时选取一个数据（通常用数组的第一个数）作为关键数据,然后将所有比它小的数都放到它的左边, 所有比它大的数都放到它的右边.特点是不稳定, 递归还容易栈溢出.</p><p>选择排序思想是对每个下标 i, 从 i 后面的元素中选择最小的那个和 s[i]交换. 选择排序的特点: 不稳定, 每趟排序后前面的元素肯定是已经排好序的了,每次排序后可以确定一个元素会在其最终位置上.</p><p>堆排序是基于选择排序的一种排序算法, 堆是一个近似完全二叉树的结构,且满足子结点的键值或索引总是小于（或者大于）它的父节点.代码中采用最大堆方式: 位于堆顶的元素总是整棵树的最大值,每个子节点的值都比父节点小, 堆要时刻保持这样的结构,所以一旦堆里面的数据发生变化, 要对堆重新进行一次构建.</p><p>归并排序的思想是将两个有序表合并成一个新的有序表,即把待排序序列分为若干个子序列, 每个子序列是有序的.然后再把有序子序列合并为整体有序序列. 即先划分为两个部分, 最后进行合并.特点是稳定, 可以用在顺序存储和链式存储的结构.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day24</title>
    <link href="/posts/a915de98/"/>
    <url>/posts/a915de98/</url>
    
    <content type="html"><![CDATA[<h1 id="选择排序">选择排序</h1><h2 id="一描述">一、描述</h2><p>选择排序是一种简单直观的排序算法, 无论什么数据进去都是 <spanclass="math inline">\(O(n^2)\)</span> 的时间复杂度. 所以用到它的时候,数据规模越小越好. 唯一的好处可能就是不占用额外的内存空间了吧.只需要两个额外的空间来存放最小数据的引用与下标, 因此空间复杂度为 <spanclass="math inline">\(O(1)\)</span>.</p><p>与插入排序不同, 先做最麻烦的, 要进行 <spanclass="math inline">\(n-1\)</span> 次比较才能获得最小的数据.</p><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Selection sort. All data are valid.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">()</span> &#123;<br>DataNode tempNode;<br><span class="hljs-type">int</span> tempIndexForSmallest;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Initialize.</span><br>tempNode = data[i];<br>tempIndexForSmallest = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; length; j++) &#123;<br><span class="hljs-keyword">if</span> (data[j].key &lt; tempNode.key) &#123;<br>tempNode = data[j];<br>tempIndexForSmallest = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-comment">// Change the selected one with the current one.</span><br>data[tempIndexForSmallest] = data[i];<br>data[i] = tempNode;<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of selectionSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.selectionSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of selectionSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022427195732.png" /></p><h1 id="堆排序">堆排序</h1><h2 id="一描述-1">一、描述</h2><p>堆排序 (heapsort) 是指利用堆这种数据结构所设计的一种排序算法.</p><p>堆积是一个近似完全二叉树的结构,并同时满足堆积的性质:即子结点的键值或索引总是小于(或者大于)它的父节点.</p><p>堆排序可以说是一种利用堆的概念来排序的选择排序. 分为两种方法：</p><p>大顶堆: 每个节点的值都大于或等于其子节点的值,在堆排序算法中用于升序排列;</p><p>小顶堆: 每个节点的值都小于或等于其子节点的值,在堆排序算法中用于降序排列;</p><p>调整堆的时间复杂度为 <span class="math inline">\(Ο(\log{n})\)</span>.所以说堆排序的平均时间复杂度为 <spanclass="math inline">\(Ο(n\log{n})\)</span>.</p><p>它的空间复杂度只有 <span class="math inline">\(O(1)\)</span></p><p>当然代码中没有使用引用的结构来表示二叉树, 而是使用的数组.结合二叉树用数组表示时候的下标符合的数学表达式就能够很轻易地得到子树和父节点.</p><h2 id="二实现">二、实现</h2><h3 id="步骤">1. 步骤</h3><ol type="a"><li><p>创建一个大顶堆 H[0 … … n-1]</p></li><li><p>把堆首（最大值）和堆尾互换</p></li><li><p>把堆的尺寸缩小 1, 把新的数组顶端数据调整到相应位置</p></li><li><p>重复步骤 2, 直到堆的尺寸为 1</p></li></ol><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Heap sort. Maybe the most difficult sorting algorithm.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">()</span> &#123;<br>DataNode tempNode;<br><span class="hljs-comment">// Step 1. Construct the initial heap.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>adjustHeap(i, length);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;The initial heap: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\r\n&quot;</span>);<br><br><span class="hljs-comment">// Step 2. Swap and reconstruct.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>tempNode = data[<span class="hljs-number">0</span>];<br>data[<span class="hljs-number">0</span>] = data[i];<br>data[i] = tempNode;<br><br>adjustHeap(<span class="hljs-number">0</span>, i);<br>System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + (length - i) + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of heapSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Adjust the heap.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStart  The start of the index.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraLength The length of the adjusted sequence.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStart, <span class="hljs-type">int</span> paraLength)</span> &#123;<br><span class="hljs-type">DataNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> data[paraStart];<br><span class="hljs-type">int</span> <span class="hljs-variable">tempParent</span> <span class="hljs-operator">=</span> paraStart;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempKey</span> <span class="hljs-operator">=</span> data[paraStart].key;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">tempChild</span> <span class="hljs-operator">=</span> paraStart * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; tempChild &lt; paraLength; tempChild = tempChild * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// The right child is bigger.</span><br><span class="hljs-keyword">if</span> (tempChild + <span class="hljs-number">1</span> &lt; paraLength) &#123;<br><span class="hljs-keyword">if</span> (data[tempChild].key &lt; data[tempChild + <span class="hljs-number">1</span>].key) &#123;<br>tempChild++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.println(<span class="hljs-string">&quot;The parent position is &quot;</span> + tempParent + <span class="hljs-string">&quot; and the child is &quot;</span> + tempChild);<br><span class="hljs-keyword">if</span> (tempKey &lt; data[tempChild].key) &#123;<br><span class="hljs-comment">// The child is bigger.</span><br>data[tempParent] = data[tempChild];<br>System.out.println(<span class="hljs-string">&quot;Move &quot;</span> + data[tempChild].key + <span class="hljs-string">&quot; to position &quot;</span> + tempParent);<br>tempParent = tempChild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for tempChild</span><br><br>data[tempParent] = tempNode;<br><br>System.out.println(<span class="hljs-string">&quot;Adjust &quot;</span> + paraStart + <span class="hljs-string">&quot; to &quot;</span> + paraLength + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<span class="hljs-comment">// Of adjustHeap</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.heapSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of heapSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图-1">三、运行截图</h2><p><img src="https://img.omnitrix.top/MDImage/img/2022427203931.png" /><img src="https://img.omnitrix.top/MDImage/img/2022427204022.png" /></p><h1 id="总结">总结</h1><p>生成大顶堆地方式很值得注意, 他是利用自底向上来处理的数据.之前我就一直在纠结于自顶向下处理数据.然后就会发现有些大一点的数就不能够到上面去.</p><p>而且处理的时候不是从最后一层处理, 而是在倒数第二层做文章.这个算法真的太精妙了.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day23</title>
    <link href="/posts/37714b3b/"/>
    <url>/posts/37714b3b/</url>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序">冒泡排序</h1><h2 id="一描述">一、描述</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法.</p><p>它重复地走访过要排序的数列, 一次比较两个元素,如果他们的顺序错误就把他们交换过来.</p><p>走访数列的工作是重复地进行直到没有再需要交换,也就是说该数列已经排序完成.</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢 "浮"到数列的顶端.</p><p>冒泡排序还有一种优化算法, 就是立一个 flag ,当在一趟序列遍历中元素没有发生交换, 则证明该序列已经有序.但这种改进对于提升性能来说并没有什么太大作用.</p><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Bubble sort.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">boolean</span> tempSwapped;<br>DataNode tempNode;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>tempSwapped = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (data[j].key &gt; data[j + <span class="hljs-number">1</span>].key) &#123;<br><span class="hljs-comment">// Swap.</span><br>tempNode = data[j + <span class="hljs-number">1</span>];<br>data[j + <span class="hljs-number">1</span>] = data[j];<br>data[j] = tempNode;<br><br>tempSwapped = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-comment">// No swap in this round. The data are already sorted.</span><br><span class="hljs-keyword">if</span> (!tempSwapped) &#123;<br>System.out.println(<span class="hljs-string">&quot;Premature&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + (length - i));<br>System.out.println(<span class="hljs-built_in">this</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of bubbleSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.bubbleSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of bubbleSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022427170437.png" /></p><h1 id="快速排序">快速排序</h1><h2 id="一描述-1">一、描述</h2><p>从数列中挑出一个元素，称为 "基准" (pivot)</p><p>重新排序数列, 所有元素比基准值小的摆放在基准前面,所有元素比基准值大的摆在基准的后面 (相同的数可以到任一边).在这个分区退出之后, 该基准就处于数列的中间位置.这个称为分区 (partition)操作</p><p>递归地 (recursive)把小于基准值元素的子数列和大于基准值元素的子数列排序</p><p>平均时间复杂度为 <span class="math inline">\(O(n\log{n})\)</span>,但最坏情况还是 <span class="math inline">\(O(n^2)\)</span></p><h2 id="二具体代码-1">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Quick sort recursively.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStart The start index.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraEnd   The end index.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSortRecursive</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStart, <span class="hljs-type">int</span> paraEnd)</span> &#123;<br><span class="hljs-comment">// Nothing to sort.</span><br><span class="hljs-keyword">if</span> (paraStart &gt;= paraEnd) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempPivot</span> <span class="hljs-operator">=</span> data[paraEnd].key;<br>DataNode tempNodeForSwap;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeft</span> <span class="hljs-operator">=</span> paraStart;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempRight</span> <span class="hljs-operator">=</span> paraEnd - <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// Find the position for the pivot.</span><br><span class="hljs-comment">// At the same time move smaller elements to the left and bigger one to the</span><br><span class="hljs-comment">// right.</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">while</span> ((data[tempLeft].key &lt; tempPivot) &amp;&amp; (tempLeft &lt; tempRight)) &#123;<br>tempLeft++;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">while</span> ((data[tempRight].key &gt;= tempPivot) &amp;&amp; (tempLeft &lt; tempRight)) &#123;<br>tempRight--;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">if</span> (tempLeft &lt; tempRight) &#123;<br><span class="hljs-comment">// Swap.</span><br>System.out.println(<span class="hljs-string">&quot;Swapping &quot;</span> + tempLeft + <span class="hljs-string">&quot; and &quot;</span> + tempRight);<br>tempNodeForSwap = data[tempLeft];<br>data[tempLeft] = data[tempRight];<br>data[tempRight] = tempNodeForSwap;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-comment">// Swap</span><br><span class="hljs-keyword">if</span> (data[tempLeft].key &gt; tempPivot) &#123;<br>tempNodeForSwap = data[paraEnd];<br>data[paraEnd] = data[tempLeft];<br>data[tempLeft] = tempNodeForSwap;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempLeft++;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.print(<span class="hljs-string">&quot;From &quot;</span> + paraStart + <span class="hljs-string">&quot; to &quot;</span> + paraEnd + <span class="hljs-string">&quot;: &quot;</span>);<br>System.out.println(<span class="hljs-built_in">this</span>);<br><br>quickSortRecursive(paraStart, tempLeft - <span class="hljs-number">1</span>);<br>quickSortRecursive(tempLeft + <span class="hljs-number">1</span>, paraEnd);<br>&#125;<span class="hljs-comment">// Of quickSortRecursive</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Quick sort.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">()</span> &#123;<br>quickSortRecursive(<span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>);<br>&#125;<span class="hljs-comment">// Of quickSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.quickSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of quickSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图-1">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022427171547.png" /></p><h1 id="总结">总结</h1><p>作为最简单的排序算法之一, 冒泡排序给我的感觉就像 Abandon在单词书里出现的感觉一样, 每次都在第一页第一位, 所以最熟悉.</p><p>然后就是快排, 这是许多语言内置排序的默认算法. 然后我惊奇地发现 Java的默认排序算法竟然也是快排序.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022427172319.png" /></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day22</title>
    <link href="/posts/40767bad/"/>
    <url>/posts/40767bad/</url>
    
    <content type="html"><![CDATA[<h1 id="插入排序">插入排序</h1><h2 id="一描述">一、描述</h2><p>插入排序像什么？没错就像斗地主或者打麻将中码牌. 每次对一个牌进行排序,从左到右是有先后顺序的. 和这个类似的叫做冒泡排序在后面也会提及.</p><p>插入排序是简单直接的排序方式之一. 代码非常短.每次保证前 i个数据是有序的.</p><p>先做简单的事情 (第 1 轮最多有 1 次移动), 再做麻烦的事情(最后一轮最多有 <span class="math inline">\(n - 1\)</span> 次移动).</p><p>下标 0 的数据为岗哨, 与顺序查询同理. 比其它排序方式多用一个空间.</p><p>tempNode 只分配了引用 (指针) 的空间, 并未 new.</p><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Insertion sort. data[0] does not store a valid data. data[0].key should be</span><br><span class="hljs-comment"> * smaller than any valid key.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">()</span> &#123;<br>DataNode tempNode;<br><span class="hljs-type">int</span> j;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; length; i++) &#123;<br>tempNode = data[i];<br><br><span class="hljs-comment">// Find the position to insert.</span><br><span class="hljs-comment">// At the same time, move other nodes.</span><br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; data[j].key &gt; tempNode.key; j--) &#123;<br>data[j + <span class="hljs-number">1</span>] = data[j];<br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-comment">// Insert.</span><br>data[j + <span class="hljs-number">1</span>] = tempNode;<br><br>System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + (i - <span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-built_in">this</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of insertionSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; -<span class="hljs-number">100</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.insertionSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of insertionSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022425180214.png" /></p><h1 id="希尔排序">希尔排序</h1><h2 id="一描述-1">一、描述</h2><p>希尔排序(Shell Sort)是插入排序的一种,它是针对直接插入排序算法的改进.</p><p>希尔排序又称缩小增量排序，因 DL.Shell 于 1959 年提出而得名.</p><p>它通过比较相距一定间隔的元素来进行,各趟比较所用的距离随着算法的进行而减小,直到只比较相邻元素的最后一趟排序为止.也就是说最后一趟还是要进行一次插入排序,但是此时数组大多有序所以就不会耗费太多时间.</p><h2 id="二具体代码-1">二、具体代码</h2><p>虽然有四层循环, 但真实的希尔排序只有三层循环,最后一层只是为了输出数组中的数字.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Shell sort. We do not use sentries here because too many of them are needed.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">()</span> &#123;<br>DataNode tempNode;<br><span class="hljs-type">int</span>[] tempJumpArray = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-type">int</span> tempJump;<br><span class="hljs-type">int</span> p;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempJumpArray.length; i++) &#123;<br>tempJump = tempJumpArray[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempJump; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j + tempJump; k &lt; length; k += tempJump) &#123;<br>tempNode = data[k];<br><span class="hljs-comment">// Find the position to insert.</span><br><span class="hljs-comment">// At the same time, move other nodes.</span><br><span class="hljs-keyword">for</span> (p = k - tempJump; p &gt;= <span class="hljs-number">0</span>; p -= tempJump) &#123;<br><span class="hljs-keyword">if</span> (data[p].key &gt; tempNode.key) &#123;<br>data[p + tempJump] = data[p];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for p</span><br><br><span class="hljs-comment">// Insert.</span><br>data[p + tempJump] = tempNode;<br>&#125; <span class="hljs-comment">// Of for k</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>System.out.println(<span class="hljs-string">&quot;Round &quot;</span> + i);<br>System.out.println(<span class="hljs-built_in">this</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of shellSort</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSortTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span>, <span class="hljs-string">&quot;throw&quot;</span>, <span class="hljs-string">&quot;until&quot;</span>, <span class="hljs-string">&quot;do&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>tempDataArray.shellSort();<br>System.out.println(<span class="hljs-string">&quot;Result\r\n&quot;</span> + tempDataArray);<br>&#125;<span class="hljs-comment">// Of shellSortTest</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图-1">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022425181140.png" /></p><h1 id="总结">总结</h1><p>在编写希尔排序时对成组那部分有些绕, 然后就是对 tempJumpArray的选择在我看来也可能对排序速度产生影响.</p><p>总而言之希尔排序就像是特殊的插入排序.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day21</title>
    <link href="/posts/d97f2a17/"/>
    <url>/posts/d97f2a17/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序查找与折半查找">顺序查找与折半查找</h1><h2 id="一节点结构">一、节点结构</h2><p>不同于书上的常用整数值来表示所需要存储的内容.这里使用了键值对的形式来存储. 简而言之就是查找是查找整数表示的键,返回的是字符串的值.</p><p>节点结构和整体初始化代码如下所示: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class for data nodes. The text book usually use an int value to</span><br><span class="hljs-comment"> * represent the data. I would like to use a key-value pair instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataNode</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The key.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> key;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data content.</span><br><span class="hljs-comment"> */</span><br>String content;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br>DataNode(<span class="hljs-type">int</span> paraKey, String paraContent) &#123;<br>key = paraKey;<br>content = paraContent;<br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(&quot;</span> + key + <span class="hljs-string">&quot;, &quot;</span> + content + <span class="hljs-string">&quot;) &quot;</span>;<br>&#125;<span class="hljs-comment">// Of toString</span><br>&#125;<span class="hljs-comment">// Of class DataNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data array.</span><br><span class="hljs-comment"> */</span><br>DataNode[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The length of the data array.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraKeyArray     The array of the keys.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraContentArray The array of contents.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DataArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraKeyArray, String[] paraContentArray)</span> &#123;<br>length = paraKeyArray.length;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataNode</span>[length];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>data[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataNode</span>(paraKeyArray[i], paraContentArray[i]);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;I am a data array with &quot;</span> + length + <span class="hljs-string">&quot; items.\r\n&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>resultString += data[i] + <span class="hljs-string">&quot; &quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br></code></pre></td></tr></table></figure></p><h2 id="二顺序查找">二、顺序查找</h2><h3 id="描述">1. 描述</h3><p>简单来说就是从左到右依次遍历然后对比值是否相等,若相等就返回查找值对对应的内容.</p><p>顺序查找使用岗哨可以节约一半的时间. 为此, 第 0个位置不可以放有意义的数据, 即有效数据只有 length - 1 个.</p><p>设置哨岗可以节约时间是因为不需要进行数组越界的判断,是从减少指令执行的角度来优化代码的.</p><h3 id="实现">2. 实现</h3><h4 id="输入">输入</h4><p>一个正整数表示需要查找数据的 key.</p><h4 id="输出">输出</h4><p>若查找到对应元素返回对应的字符串</p><p>若没找到就返回哨兵位置元素的字符串</p><h4 id="时间复杂度">时间复杂度</h4><p><span class="math inline">\(O(n)\)</span></p><h4 id="代码">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Sequential search. Attention: It is assume that the index 0 is NOT used.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraKey The given key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The content of the key.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sequentialSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> paraKey)</span> &#123;<br>data[<span class="hljs-number">0</span>].key = paraKey;<br><br><span class="hljs-type">int</span> i;<br><span class="hljs-comment">// Note that we do not judge i &gt;= 0 since data[0].key = paraKey.</span><br><span class="hljs-comment">// In this way the runtime is saved about 1/2.</span><br><span class="hljs-comment">// This for statement is equivalent to</span><br><span class="hljs-comment">// for (i = length - 1; data[i].key != paraKey; i--);</span><br><span class="hljs-keyword">for</span> (i = length - <span class="hljs-number">1</span>; data[i].key != paraKey; i--) &#123;<br>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> data[i].content;<br>&#125;<span class="hljs-comment">// Of sequentialSearch</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sequentialSearchTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; -<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>System.out.println(<span class="hljs-string">&quot;Search result of 10 is: &quot;</span> + tempDataArray.sequentialSearch(<span class="hljs-number">10</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 5 is: &quot;</span> + tempDataArray.sequentialSearch(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 4 is: &quot;</span> + tempDataArray.sequentialSearch(<span class="hljs-number">4</span>));<br>&#125;<span class="hljs-comment">// Of sequentialSearchTest</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022425170825.png" /></p><h4 id="小提示">小提示</h4><p>虽然在代码中存在 {key:-1 , value:"null"} 这一个数据.但是这是人为表示找不到时应该返回的元素. 那么输入的就应该是为正整数.</p><h2 id="三折半查找">三、折半查找</h2><h3 id="描述-1">1. 描述</h3><p>折半查找只能适用于单调递增或者单调递减的顺序表中.正是因为这个严格的限制才能有折半查找这个方法.顾名思义就是每次查找要舍去一半的数据.</p><p>但是这个又会出现一个新的问题, 要是所有元素都一样呢？虽然这不会影响查找到的数据,在一般的算法题中要求返回第一次出现的下标就不能确定了.解决办法自然是有的这里就不细说了.</p><h3 id="实现-1">2. 实现</h3><h4 id="输入-1">输入</h4><p>一个正整数表示需要查找数据的 key.</p><h4 id="输出-1">输出</h4><p>若查找到对应元素返回对应的字符串</p><p>若没找到就返回字符串 "null"</p><h4 id="时间复杂度-1">时间复杂度</h4><p><span class="math inline">\(O(\log{n})\)</span></p><h4 id="代码-1">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Binary search. Attention: It is assume that keys are sorted in ascending</span><br><span class="hljs-comment"> * order.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraKey The given key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The content of the key.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> paraKey)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeft</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempRight</span> <span class="hljs-operator">=</span> length - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempMiddle</span> <span class="hljs-operator">=</span> (tempLeft + tempRight) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">while</span> (tempLeft &lt;= tempRight) &#123;<br>tempMiddle = (tempLeft + tempRight) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (data[tempMiddle].key == paraKey) &#123;<br><span class="hljs-keyword">return</span> data[tempMiddle].content;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data[tempMiddle].key &lt;= paraKey) &#123;<br>tempLeft = tempMiddle + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempRight = tempMiddle - <span class="hljs-number">1</span>;<br>&#125;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-comment">// Not found.</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>&#125;<span class="hljs-comment">// Of binarySearch</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">binarySearchTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempSortedKeys = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempSortedKeys, tempContents);<br><br>System.out.println(tempDataArray);<br><br>System.out.println(<span class="hljs-string">&quot;Search result of 10 is: &quot;</span> + tempDataArray.binarySearch(<span class="hljs-number">10</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 5 is: &quot;</span> + tempDataArray.binarySearch(<span class="hljs-number">5</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 4 is: &quot;</span> + tempDataArray.binarySearch(<span class="hljs-number">4</span>));<br>&#125;<span class="hljs-comment">// Of binarySearchTest</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022425171929.png" /></p><h1 id="哈希表">哈希表</h1><h2 id="一描述">一、描述</h2><p>哈希表是根据关键码值(Key value)而直接进行访问的数据结构. 也就是说,它通过把关键码值映射到表中一个位置来访问记录, 以加快查找的速度.这个映射函数叫做哈希函数, 存放记录的数组叫做哈希表.</p><p>在构造方法中装入数据. 规定了所有数据的个数保证每个数都有能够被存储.那么这个数组就叫做散列表.</p><p>使用 (最简单的) 除数取余法获得数据存放地址 (下标), 使用 (最简单的)顺移位置法解决冲突. 这个就是哈希函数.</p><p>搜索的时间复杂度仅与冲突概率相关, 间接地就与装填因子相关.如果空间很多, 可以看出时间复杂度为 <spanclass="math inline">\(O(1)\)</span>.</p><h2 id="二实现">二、实现</h2><h3 id="初始化哈希表">1. 初始化哈希表</h3><h4 id="输入-2">输入</h4><p>key数组、存储内容数组和 哈希表的长度(必须要大于等于 key数组的长度)</p><h4 id="输出-2">输出</h4><p>无</p><h4 id="代码-2">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The second constructor. For Hash code only. It is assumed that</span><br><span class="hljs-comment"> * paraKeyArray.length &lt;= paraLength.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraKeyArray     The array of the keys.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraContentArray The array of contents.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraLength       The space for the Hash table.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DataArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraKeyArray, String[] paraContentArray, <span class="hljs-type">int</span> paraLength)</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize.</span><br>length = paraLength;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataNode</span>[length];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>data[i] = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 2. Fill the data.</span><br><span class="hljs-type">int</span> tempPosition;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraKeyArray.length; i++) &#123;<br><span class="hljs-comment">// Hash.</span><br>tempPosition = paraKeyArray[i] % paraLength;<br><br><span class="hljs-comment">// Find an empty position</span><br><span class="hljs-keyword">while</span> (data[tempPosition] != <span class="hljs-literal">null</span>) &#123;<br>tempPosition = (tempPosition + <span class="hljs-number">1</span>) % paraLength;<br>System.out.println(<span class="hljs-string">&quot;Collision, move forward for key &quot;</span> + paraKeyArray[i]);<br>&#125; <span class="hljs-comment">// Of while</span><br><br>data[tempPosition] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataNode</span>(paraKeyArray[i], paraContentArray[i]);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the second constructor</span><br></code></pre></td></tr></table></figure><h3 id="哈希查找">2. 哈希查找</h3><h4 id="输入-3">输入</h4><p>一个正整数表示需要查找数据的 key.</p><h4 id="输出-3">输出</h4><p>若查找到对应元素返回对应的字符串</p><p>若没找到就返回字符串 "null"</p><h4 id="时间复杂度-2">时间复杂度</h4><p>无冲突时为 <span class="math inline">\(O(1)\)</span></p><h4 id="代码-3">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Hash search.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraKey The given key.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The content of the key.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hashSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> paraKey)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> paraKey % length;<br><span class="hljs-keyword">while</span> (data[tempPosition] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (data[tempPosition].key == paraKey) &#123;<br><span class="hljs-keyword">return</span> data[tempPosition].content;<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;Not this one for &quot;</span> + paraKey);<br>tempPosition = (tempPosition + <span class="hljs-number">1</span>) % length;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>&#125;<span class="hljs-comment">// Of hashSearch</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Test the method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hashSearchTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] tempUnsortedKeys = &#123; <span class="hljs-number">16</span>, <span class="hljs-number">33</span>, <span class="hljs-number">38</span>, <span class="hljs-number">69</span>, <span class="hljs-number">57</span>, <span class="hljs-number">95</span>, <span class="hljs-number">86</span> &#125;;<br>String[] tempContents = &#123; <span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-string">&quot;then&quot;</span>, <span class="hljs-string">&quot;else&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>, <span class="hljs-string">&quot;case&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;while&quot;</span> &#125;;<br><span class="hljs-type">DataArray</span> <span class="hljs-variable">tempDataArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataArray</span>(tempUnsortedKeys, tempContents, <span class="hljs-number">19</span>);<br><br>System.out.println(tempDataArray);<br><br>System.out.println(<span class="hljs-string">&quot;Search result of 95 is: &quot;</span> + tempDataArray.hashSearch(<span class="hljs-number">95</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 38 is: &quot;</span> + tempDataArray.hashSearch(<span class="hljs-number">38</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 57 is: &quot;</span> + tempDataArray.hashSearch(<span class="hljs-number">57</span>));<br>System.out.println(<span class="hljs-string">&quot;Search result of 4 is: &quot;</span> + tempDataArray.hashSearch(<span class="hljs-number">4</span>));<br>&#125;<span class="hljs-comment">// Of hashSearchTest</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-2">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022425174131.png" /></p><h1 id="总结">总结</h1><p>顺序查找是经常使用的但是没有考虑哨兵.可能没有接触过上千万或者上亿的数据, 对时间的要求还是不太敏感.哈希表我最能想到的就是诸多账号的存储, 像 QQ 的账号就被 Hash成了十六进制.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day20</title>
    <link href="/posts/ae781a81/"/>
    <url>/posts/ae781a81/</url>
    
    <content type="html"><![CDATA[<h1 id="关键路径">关键路径</h1><h2 id="一描述">一、描述</h2><p>拓扑排序是关键路径的一部分.为什么会有这种说法呢？就像工程施工需要把所有前置条件完成才能继续,这个所谓前置条件就是拓扑排序.而关键路径要求的就是完成工程的最长时间.</p><p>关键路径长度, 其实是最远路径长度. 然而, 它并非最短路径的对偶问题.</p><p>正向算每个节点的最早开始时间, 逆向算每个节点的最晚开始时间.当最早开始和最晚开始为一样的时候就说明这个节点是关键路径中的一个节点,找出所有这样的节点连接起来就是关键路径.</p><h2 id="二求解">二、求解</h2><h3 id="思路">1. 思路</h3><p>正向拓扑排序求最早开始时间, 逆向拓扑排序求最晚开始时间.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Critical path. Net validity checks such as loop check not implemented. The</span><br><span class="hljs-comment"> * source should be 0 and the destination should be n-1.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The node sequence of the path.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span>[] criticalPath() &#123;<br><span class="hljs-comment">// One more value to save simple computation.</span><br><span class="hljs-type">int</span> tempValue;<br><br><span class="hljs-comment">// Step 1. The in-degree of each node.</span><br><span class="hljs-type">int</span>[] tempInDegrees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (weightMatrix.getValue(i, j) != -<span class="hljs-number">1</span>) &#123;<br>tempInDegrees[j]++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;In-degree of nodes: &quot;</span> + Arrays.toString(tempInDegrees));<br><br><span class="hljs-comment">// Step 2. Topology sorting.</span><br><span class="hljs-type">int</span>[] tempEarliestTimeArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br><span class="hljs-comment">// This node cannot be removed.</span><br><span class="hljs-keyword">if</span> (tempInDegrees[i] &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.println(<span class="hljs-string">&quot;Removing &quot;</span> + i);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (weightMatrix.getValue(i, j) != -<span class="hljs-number">1</span>) &#123;<br>tempValue = tempEarliestTimeArray[i] + weightMatrix.getValue(i, j);<br><span class="hljs-keyword">if</span> (tempEarliestTimeArray[j] &lt; tempValue) &#123;<br>tempEarliestTimeArray[j] = tempValue;<br>&#125; <span class="hljs-comment">// Of if</span><br>tempInDegrees[j]--;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;Earlest start time: &quot;</span> + Arrays.toString(tempEarliestTimeArray));<br><br><span class="hljs-comment">// Step 3. The out-degree of each node.</span><br><span class="hljs-type">int</span>[] tempOutDegrees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (weightMatrix.getValue(i, j) != -<span class="hljs-number">1</span>) &#123;<br>tempOutDegrees[i]++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;Out-degree of nodes: &quot;</span> + Arrays.toString(tempOutDegrees));<br><br><span class="hljs-comment">// Step 4. Reverse topology sorting.</span><br><span class="hljs-type">int</span>[] tempLatestTimeArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempLatestTimeArray[i] = tempEarliestTimeArray[numNodes - <span class="hljs-number">1</span>];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> numNodes - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-comment">// This node cannot be removed.</span><br><span class="hljs-keyword">if</span> (tempOutDegrees[i] &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.println(<span class="hljs-string">&quot;Removing &quot;</span> + i);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (weightMatrix.getValue(j, i) != -<span class="hljs-number">1</span>) &#123;<br>tempValue = tempLatestTimeArray[i] - weightMatrix.getValue(j, i);<br><span class="hljs-keyword">if</span> (tempLatestTimeArray[j] &gt; tempValue) &#123;<br>tempLatestTimeArray[j] = tempValue;<br>&#125; <span class="hljs-comment">// Of if</span><br>tempOutDegrees[j]--;<br>System.out.println(<span class="hljs-string">&quot;The out-degree of &quot;</span> + j + <span class="hljs-string">&quot; decreases by 1.&quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;Latest start time: &quot;</span> + Arrays.toString(tempLatestTimeArray));<br><br><span class="hljs-type">boolean</span>[] resultCriticalArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br><span class="hljs-keyword">if</span> (tempEarliestTimeArray[i] == tempLatestTimeArray[i]) &#123;<br>resultCriticalArray[i] = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;Critical array: &quot;</span> + Arrays.toString(resultCriticalArray));<br>System.out.print(<span class="hljs-string">&quot;Critical nodes: &quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br><span class="hljs-keyword">if</span> (resultCriticalArray[i]) &#123;<br>System.out.print(<span class="hljs-string">&quot; &quot;</span> + i);<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println();<br><br><span class="hljs-keyword">return</span> resultCriticalArray;<br>&#125;<span class="hljs-comment">// Of criticalPath</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022423184138.png" /></p><h1 id="总结">总结</h1><ol type="1"><li><p>图在写过的数据结构中应该算一个比较稀有的存在,能在实际代码中使用上树的结构就已经是个非常了不起的突破了.所以在这部分内容中写代码前就是把图画出来然后在转成数组的结构.(其实还是代码写得少. 要是做个地图类的软件,图的使用就是非常必要的了)</p></li><li><p>把图转换为矩阵是真的非常精妙的想法, 难道是由向量这个演化而来?无论怎么说这一操作降低了存储难度但在一定程度上增加了 Debug的难度.</p></li><li><p>这一部分也是经典算法频出的一部分, 尤其是深度优先和广度优先算法,这不仅仅可以运用于图还可以运用于树形结构.其中关键在于数据结构的巧妙结合, 宏观来看也不过是暴力破解.</p></li><li><p>在遍历的过程中有一个标记的过程值得注意.这样整个算法就很模拟现实世界. 就好像我去过那个地方我就不再去了.</p></li><li><p>动态规划和贪心算法也是在这些算法中被使用的部分,不断根据当前环境更改自己的值, 选择当前环境下最优的解法.</p></li><li><p>图的算法相比起之前学过的算法不是那么直观, 无论是遍历还是找出路径.在之前的代码中无非就是增删改查, 在这部分更重要的是找到一条路径,增删改仿佛在图这就不是那么的重要.无论怎么说图更贴近生活是无论如何都需要掌握的一部分.</p></li><li><p>在编码方面最难注意到的就是矩阵下标,然后在邻接矩阵中的数值表示为权值的时候就更加的混乱.循环的终止刚开始也弄不清楚.</p></li><li><p>比起代码更重要的是思想, 我可以两次得出一样的思路,但是我绝不可能两次写出一样的代码. 记忆代码是件非常难受的事情,还是理清思路才是王道.</p></li><li><p>学习的过程是个重复,即使在图这部分还是用到了之前所学过的栈、队列和链表等东西.第一次写博客哪能那么尽善尽美, 常看常新留给自己.</p></li><li><p>有序的思考, 完整的公式往往比灵感迸发写出来的代码更容易通过.灵感仅仅做为尝试, 万万不能做为解题的良方.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day19</title>
    <link href="/posts/fc89f1e6/"/>
    <url>/posts/fc89f1e6/</url>
    
    <content type="html"><![CDATA[<h1 id="十字链表">十字链表</h1><h2 id="一描述">一、描述</h2><p>与邻接表不同, 十字链表法仅适用于存储有向图和有向网. 不仅如此,十字链表法还改善了邻接表计算图中顶点入度的问题.</p><p>十字链表存储有向图的方式与邻接表有一些相同,都以图中各顶点为首元节点建立多条链表, 同时为了便于管理,还将所有链表的首元节点存储到同一数组(或链表)中.</p><p>归根到底就是弧做为一种节点,顶点做为另一种节点并以顺序表的形式存储.</p><p>用十字链表存储下面的有向图:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022423095727.png" /></p><p>存储状态如图所示: <imgsrc="https://img.omnitrix.top/MDImage/img/2022423101403.png" /></p><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.graph;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Orthogonal List for directed graph.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrthogonalList</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class for adjacent node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrthogonalNode</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The row index.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> row;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The column index.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> column;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The next out node.</span><br><span class="hljs-comment"> */</span><br>OrthogonalNode nextOut;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The next in node.</span><br><span class="hljs-comment"> */</span><br>OrthogonalNode nextIn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraRow    The row.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColumn The column.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">OrthogonalNode</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRow, <span class="hljs-type">int</span> paraColumn)</span> &#123;<br>row = paraRow;<br>column = paraColumn;<br>nextOut = <span class="hljs-literal">null</span>;<br>nextIn = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of OrthogonalNode</span><br>&#125;<span class="hljs-comment">// Of class OrthogonalNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of nodes. This member variable may be redundant since it is always</span><br><span class="hljs-comment"> * equal to headers.length.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> numNodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The headers for each row.</span><br><span class="hljs-comment"> */</span><br>OrthogonalNode[] headers;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The matrix indicating the graph.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">OrthogonalList</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] paraMatrix)</span> &#123;<br>numNodes = paraMatrix.length;<br><br><span class="hljs-comment">// Step 1. Initialize. The data in the headers are not meaningful.</span><br>OrthogonalNode tempPreviousNode, tempNode;<br><br>headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrthogonalNode</span>[numNodes];<br><br><span class="hljs-comment">// Step 2. Link to its out nodes.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>headers[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrthogonalNode</span>(i, -<span class="hljs-number">1</span>);<br>tempPreviousNode = headers[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (paraMatrix[i][j] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Create a new node.</span><br>tempNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrthogonalNode</span>(i, j);<br><br><span class="hljs-comment">// Link.</span><br>tempPreviousNode.nextOut = tempNode;<br>tempPreviousNode = tempNode;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Link to its in nodes. This step is harder.</span><br>OrthogonalNode[] tempColumnNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrthogonalNode</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempColumnNodes[i] = headers[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempNode = headers[i].nextOut;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>tempColumnNodes[tempNode.column].nextIn = tempNode;<br>tempColumnNodes[tempNode.column] = tempNode;<br><br>tempNode = tempNode.nextOut;<br>&#125; <span class="hljs-comment">// Of while</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Out arcs: &quot;</span>;<br><br>OrthogonalNode tempNode;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempNode = headers[i].nextOut;<br><br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>resultString += <span class="hljs-string">&quot; (&quot;</span> + tempNode.row + <span class="hljs-string">&quot;, &quot;</span> + tempNode.column + <span class="hljs-string">&quot;)&quot;</span>;<br>tempNode = tempNode.nextOut;<br>&#125; <span class="hljs-comment">// Of while</span><br>resultString += <span class="hljs-string">&quot;\r\n&quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>resultString += <span class="hljs-string">&quot;\r\nIn arcs: &quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempNode = headers[i].nextIn;<br><br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>resultString += <span class="hljs-string">&quot; (&quot;</span> + tempNode.row + <span class="hljs-string">&quot;, &quot;</span> + tempNode.column + <span class="hljs-string">&quot;)&quot;</span>;<br>tempNode = tempNode.nextIn;<br>&#125; <span class="hljs-comment">// Of while</span><br>resultString += <span class="hljs-string">&quot;\r\n&quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">OrthogonalList</span> <span class="hljs-variable">tempList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrthogonalList</span>(tempMatrix);<br>System.out.println(<span class="hljs-string">&quot;The data are:\r\n&quot;</span> + tempList);<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class OrthogonalList</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022423095028.png" /></p><h1 id="dijkstra-算法与-prim-算法">Dijkstra 算法与 Prim 算法</h1><h2 id="一dijkstra算法">一、Dijkstra算法</h2><h3 id="描述">1. 描述</h3><p>Dijkstra算法用于构建单源点的最短路径树——即树中某个点到任何其他点的距离都是最短的.例如, 构建地图应用时查找自己的坐标离某个地标的最短距离. 可以用于有向图,但是不能存在负权值( Bellman-Ford 可以处理负权值). 与之对应的还有另一种Floyd 算法.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The Dijkstra algorithm: shortest path from the source to all nodes.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraSource The source node.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The distances to all nodes.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] dijkstra(<span class="hljs-type">int</span> paraSource) &#123;<br><span class="hljs-comment">// Step 1. Initialize.</span><br><span class="hljs-type">int</span>[] tempDistanceArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempDistanceArray[i] = weightMatrix.getValue(paraSource, i);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">int</span>[] tempParentArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br>Arrays.fill(tempParentArray, paraSource);<br><span class="hljs-comment">// -1 for no parent.</span><br>tempParentArray[paraSource] = -<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// Visited nodes will not be considered further.</span><br><span class="hljs-type">boolean</span>[] tempVisitedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[numNodes];<br>tempVisitedArray[paraSource] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 2. Main loops.</span><br><span class="hljs-type">int</span> tempMinDistance;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempBestNode</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Step 2.1 Find out the best next node.</span><br>tempMinDistance = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-comment">// This node is visited.</span><br><span class="hljs-keyword">if</span> (tempVisitedArray[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinDistance &gt; tempDistanceArray[j]) &#123;<br>tempMinDistance = tempDistanceArray[j];<br>tempBestNode = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br>tempVisitedArray[tempBestNode] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 2.2 Prepare for the next round.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-comment">// This node is visited.</span><br><span class="hljs-keyword">if</span> (tempVisitedArray[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// This node cannot be reached.</span><br><span class="hljs-keyword">if</span> (weightMatrix.getValue(tempBestNode, j) &gt;= MAX_DISTANCE) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempDistanceArray[j] &gt; tempDistanceArray[tempBestNode] + weightMatrix.getValue(tempBestNode, j)) &#123;<br><span class="hljs-comment">// Change the distance.</span><br>tempDistanceArray[j] = tempDistanceArray[tempBestNode] + weightMatrix.getValue(tempBestNode, j);<br><span class="hljs-comment">// Change the parent.</span><br>tempParentArray[j] = tempBestNode;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-comment">// For test</span><br>System.out.println(<span class="hljs-string">&quot;The distance to each node: &quot;</span> + Arrays.toString(tempDistanceArray));<br>System.out.println(<span class="hljs-string">&quot;The parent of each node: &quot;</span> + Arrays.toString(tempParentArray));<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Output for debug.</span><br>System.out.println(<span class="hljs-string">&quot;Finally&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;The distance to each node: &quot;</span> + Arrays.toString(tempDistanceArray));<br>System.out.println(<span class="hljs-string">&quot;The parent of each node: &quot;</span> + Arrays.toString(tempParentArray));<br><span class="hljs-keyword">return</span> tempDistanceArray;<br>&#125;<span class="hljs-comment">// Of dijkstra</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022423173426.png" /></p><h2 id="二prim算法">二、Prim算法</h2><h3 id="描述-1">1. 描述</h3><p>Prim算法用于构建最小生成树——即树中所有边的权值之和最小. 例如,构建电路板, 使所有边的和花费最少. 只能用于无向图. 与之对应的是 Kruskal算法.</p><h3 id="具体代码-1">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The minimal spanning tree.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The total cost of the tree.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prim</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize.</span><br><span class="hljs-comment">// Any node can be the source.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempSource</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span>[] tempDistanceArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempDistanceArray[i] = weightMatrix.getValue(tempSource, i);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">int</span>[] tempParentArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numNodes];<br>Arrays.fill(tempParentArray, tempSource);<br><span class="hljs-comment">// -1 for no parent.</span><br>tempParentArray[tempSource] = -<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// Visited nodes will not be considered further.</span><br><span class="hljs-type">boolean</span>[] tempVisitedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[numNodes];<br>tempVisitedArray[tempSource] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 2. Main loops.</span><br><span class="hljs-type">int</span> tempMinDistance;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempBestNode</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Step 2.1 Find out the best next node.</span><br>tempMinDistance = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-comment">// This node is visited.</span><br><span class="hljs-keyword">if</span> (tempVisitedArray[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinDistance &gt; tempDistanceArray[j]) &#123;<br>tempMinDistance = tempDistanceArray[j];<br>tempBestNode = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br>tempVisitedArray[tempBestNode] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 2.2 Prepare for the next round.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-comment">// This node is visited.</span><br><span class="hljs-keyword">if</span> (tempVisitedArray[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// This node cannot be reached.</span><br><span class="hljs-keyword">if</span> (weightMatrix.getValue(tempBestNode, j) &gt;= MAX_DISTANCE) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Attention: the difference from the Dijkstra algorithm.</span><br><span class="hljs-keyword">if</span> (tempDistanceArray[j] &gt; weightMatrix.getValue(tempBestNode, j)) &#123;<br><span class="hljs-comment">// Change the distance.</span><br>tempDistanceArray[j] = weightMatrix.getValue(tempBestNode, j);<br><span class="hljs-comment">// Change the parent.</span><br>tempParentArray[j] = tempBestNode;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-comment">// For test</span><br>System.out.println(<span class="hljs-string">&quot;The selected distance for each node: &quot;</span> + Arrays.toString(tempDistanceArray));<br>System.out.println(<span class="hljs-string">&quot;The parent of each node: &quot;</span> + Arrays.toString(tempParentArray));<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">resultCost</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>resultCost += tempDistanceArray[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Output for debug.</span><br>System.out.println(<span class="hljs-string">&quot;Finally&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;The parent of each node: &quot;</span> + Arrays.toString(tempParentArray));<br>System.out.println(<span class="hljs-string">&quot;The total cost: &quot;</span> + resultCost);<br><br><span class="hljs-keyword">return</span> resultCost;<br>&#125;<span class="hljs-comment">// Of prim</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-1">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022423173521.png" /></p><h1 id="总结">总结</h1><p>在十字链表中有了多的结构,虽然使得管理方便但是在第一次理解的过程中存在问题.所有我们要在两个复杂之间找到一个合适的界限.</p><p>无论是 Dijkstra 还是 Prim 算法, 它们都是在一个动态更新的过程中,要走向未来就要时刻审视当下.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day18</title>
    <link href="/posts/8b8ec170/"/>
    <url>/posts/8b8ec170/</url>
    
    <content type="html"><![CDATA[<h1 id="图的-m-着色问题">图的 m 着色问题</h1><h2 id="一描述">一、描述</h2><p>给定无向连通图 G 和 m 种不同的颜色.</p><p>用这些颜色为图 G 的各顶点着色, 每个顶点着一种颜色. 是否有一种着色法使G 中每条边的 2 个顶点着不同颜色. 这个问题是图的 m 可着色判定问题.</p><p>若一个图最少需要 m 种颜色才能使图中每条边连接的 2 个顶点着不同颜色,则称这个数 m 为该图的色数.</p><h2 id="二解决思路">二、解决思路</h2><p>可以把这个问题的解空间转换为高度为 G + 1 层 的完全 m 叉树.</p><p>如何在这棵树中找到解呢？ 就是在深度优先遍历的前提下,利用相邻节点颜色不能相同对这棵树进行"剪枝".</p><h2 id="三具体实现">三、具体实现</h2><h3 id="输入">1. 输入</h3><p>三个整数, 分别表示颜色数、已被着色节点数和存储着色的数组.</p><h3 id="输出">2. 输出</h3><p>若符合着色规则就打印着色的数组.</p><h3 id="代码">3. 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Coloring. Output all possible schemes.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraNumColors The number of colors.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">coloring</span><span class="hljs-params">(<span class="hljs-type">int</span> paraNumColors)</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNumNodes</span> <span class="hljs-operator">=</span> connectivityMatrix.getRows();<br><span class="hljs-type">int</span>[] tempColorScheme = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempNumNodes];<br>Arrays.fill(tempColorScheme, -<span class="hljs-number">1</span>);<br><br>coloring(paraNumColors, <span class="hljs-number">0</span>, tempColorScheme);<br>&#125;<span class="hljs-comment">// Of coloring</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Coloring. Output all possible schemes.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraNumColors       The number of colors.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraCurrentNumNodes The number of nodes that have been colored.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraCurrentColoring The array recording the coloring scheme.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">coloring</span><span class="hljs-params">(<span class="hljs-type">int</span> paraNumColors, <span class="hljs-type">int</span> paraCurrentNumNodes, <span class="hljs-type">int</span>[] paraCurrentColoring)</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNumNodes</span> <span class="hljs-operator">=</span> connectivityMatrix.getRows();<br><br>System.out.println(<span class="hljs-string">&quot;coloring: paraNumColors = &quot;</span> + paraNumColors + <span class="hljs-string">&quot;, paraCurrentNumNodes = &quot;</span><br>+ paraCurrentNumNodes + <span class="hljs-string">&quot;, paraCurrentColoring&quot;</span> + Arrays.toString(paraCurrentColoring));<br><span class="hljs-comment">// A complete scheme.</span><br><span class="hljs-keyword">if</span> (paraCurrentNumNodes &gt;= tempNumNodes) &#123;<br>System.out.println(<span class="hljs-string">&quot;Find one:&quot;</span> + Arrays.toString(paraCurrentColoring));<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Try all possible colors.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraNumColors; i++) &#123;<br>paraCurrentColoring[paraCurrentNumNodes] = i;<br><span class="hljs-keyword">if</span> (!colorConflict(paraCurrentNumNodes + <span class="hljs-number">1</span>, paraCurrentColoring)) &#123;<br>coloring(paraNumColors, paraCurrentNumNodes + <span class="hljs-number">1</span>, paraCurrentColoring);<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of coloring</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Coloring conflict or not. Only compare the current last node with previous</span><br><span class="hljs-comment"> * ones.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraCurrentNumNodes The current number of nodes.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColoring        The current coloring scheme.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Conflict or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">colorConflict</span><span class="hljs-params">(<span class="hljs-type">int</span> paraCurrentNumNodes, <span class="hljs-type">int</span>[] paraColoring)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraCurrentNumNodes - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// No direct connection.</span><br><span class="hljs-keyword">if</span> (connectivityMatrix.getValue(paraCurrentNumNodes - <span class="hljs-number">1</span>, i) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (paraColoring[paraCurrentNumNodes - <span class="hljs-number">1</span>] == paraColoring[i]) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-comment">// Of colorConflict</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Coloring test.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">coloringTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(tempMatrix);<br>tempGraph.coloring(<span class="hljs-number">3</span>);<br>&#125;<span class="hljs-comment">// Of coloringTest</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">4. 运行截图</h3><p><img src="https://img.omnitrix.top/MDImage/img/2022421174317.png" /><img src="https://img.omnitrix.top/MDImage/img/2022421174435.png" /><img src="https://img.omnitrix.top/MDImage/img/2022421174511.png" /></p><h1 id="邻接链表">邻接链表</h1><h2 id="一描述-1">一、描述</h2><p>之前是通过矩阵来表示图, 这种存储方式被叫做邻接矩阵.但是这种存储方式有一种缺点就是每个点都要记录,如果面对连接不是很多的图就会浪费空间. 于是将邻接的节点组成一条链表,然后再以各节点形成一个数组. 这样邻接链表就诞生了.</p><h2 id="二具体实现">二、具体实现</h2><h3 id="描述">1. 描述</h3><p>相当于图的压缩存储. 每一行数据用一个单链表存储.</p><p>重写了广度优先遍历. 可以发现, 使用队列的机制不变. 仅仅是把其中的 for循环换成了 while, 避免检查不存在的边. 如果图很稀疏的话,可以降低时间复杂度.</p><h3 id="代码-1">2. 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.graph;<br><br><span class="hljs-keyword">import</span> datastructure.queue.CircleObjectQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Adjacency list for directed graph.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdjacencyList</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class for adjacent node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdjacencyNode</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The column index.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> column;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The next adjacent node.</span><br><span class="hljs-comment"> */</span><br>AdjacencyNode next;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColumn The column.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AdjacencyNode</span><span class="hljs-params">(<span class="hljs-type">int</span> paraColumn)</span> &#123;<br>column = paraColumn;<br>next = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of AdjacencyNode</span><br>&#125;<span class="hljs-comment">// Of class AdjacencyNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of nodes. This member variable may be redundant since it is always</span><br><span class="hljs-comment"> * equal to headers.length.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> numNodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The headers for each row.</span><br><span class="hljs-comment"> */</span><br>AdjacencyNode[] headers;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The the matrix indicating the graph.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AdjacencyList</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] paraMatrix)</span> &#123;<br>numNodes = paraMatrix.length;<br><br><span class="hljs-comment">// Step 1. Initialize. The data in the headers are not meaningful.</span><br>AdjacencyNode tempPreviousNode, tempNode;<br><br>headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdjacencyNode</span>[numNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>headers[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdjacencyNode</span>(-<span class="hljs-number">1</span>);<br>tempPreviousNode = headers[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; numNodes; j++) &#123;<br><span class="hljs-keyword">if</span> (paraMatrix[i][j] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Create a new node.</span><br>tempNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdjacencyNode</span>(j);<br><br><span class="hljs-comment">// Link.</span><br>tempPreviousNode.next = tempNode;<br>tempPreviousNode = tempNode;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of class AdjacentTable</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>AdjacencyNode tempNode;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numNodes; i++) &#123;<br>tempNode = headers[i].next;<br><br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>resultString += <span class="hljs-string">&quot; (&quot;</span> + i + <span class="hljs-string">&quot;, &quot;</span> + tempNode.column + <span class="hljs-string">&quot;)&quot;</span>;<br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of while</span><br>resultString += <span class="hljs-string">&quot;\r\n&quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Breadth first traversal.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStartIndex The start index.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sequence of the visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">breadthFirstTraversal</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStartIndex)</span> &#123;<br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">boolean</span>[] tempVisitedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[numNodes];<br><br>tempVisitedArray[paraStartIndex] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Initialize the queue.</span><br><span class="hljs-comment">// Visit before enqueue.</span><br>tempVisitedArray[paraStartIndex] = <span class="hljs-literal">true</span>;<br>resultString += paraStartIndex;<br>tempQueue.enqueue(Integer.valueOf(paraStartIndex));<br><br><span class="hljs-comment">// Now visit the rest of the graph.</span><br><span class="hljs-type">int</span> tempIndex;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">tempInteger</span> <span class="hljs-operator">=</span> (Integer) tempQueue.dequeue();<br>AdjacencyNode tempNode;<br><span class="hljs-keyword">while</span> (tempInteger != <span class="hljs-literal">null</span>) &#123;<br>tempIndex = tempInteger.intValue();<br><br><span class="hljs-comment">// Enqueue all its unvisited neighbors. The neighbors are linked</span><br><span class="hljs-comment">// already.</span><br>tempNode = headers[tempIndex].next;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (!tempVisitedArray[tempNode.column]) &#123;<br><span class="hljs-comment">// Visit before enqueue.</span><br>tempVisitedArray[tempNode.column] = <span class="hljs-literal">true</span>;<br>resultString += tempNode.column;<br>tempQueue.enqueue(Integer.valueOf(tempNode.column));<br>&#125; <span class="hljs-comment">// Of if</span><br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Take out one from the head.</span><br>tempInteger = (Integer) tempQueue.dequeue();<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of breadthFirstTraversal</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for breadthFirstTraversal. The same as the one in class Graph.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breadthFirstTraversalTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Test an undirected graph.</span><br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(tempMatrix);<br>System.out.println(tempGraph);<br><span class="hljs-type">AdjacencyList</span> <span class="hljs-variable">tempAdjList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdjacencyList</span>(tempMatrix);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">tempSequence</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempSequence = tempAdjList.breadthFirstTraversal(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try.</span><br><br>System.out.println(<span class="hljs-string">&quot;The breadth first order of visit: &quot;</span> + tempSequence);<br>&#125;<span class="hljs-comment">// Of breadthFirstTraversalTest</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">AdjacencyList</span> <span class="hljs-variable">tempTable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdjacencyList</span>(tempMatrix);<br>System.out.println(<span class="hljs-string">&quot;The data are:\r\n&quot;</span> + tempTable);<br><br>breadthFirstTraversalTest();<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class AdjacencyList</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-1">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022421195608.png" /></p><h1 id="总结">总结</h1><p>暴力破解看起来没有什么逻辑, 但是面对有些问题还是很有效的.</p><p>着色问题感性上来看很难下手, 要是转换成了完全多叉树就能够很轻易地解决.编程的诀窍就是在于把事物抽象. 不是任何问题都有现成的解, 或许某天打开CSDN GitHub 甚至于 StackOverflow 你都找不到适合的解,那么此时自己就应该想到该把问题用自己的方式转化了.</p><p>庆幸的是前人已经完成了许多工作,我的学习不过是站在巨人的肩膀上罢了.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day17</title>
    <link href="/posts/1b31dce1/"/>
    <url>/posts/1b31dce1/</url>
    
    <content type="html"><![CDATA[<h1 id="图的广度优先遍历">图的广度优先遍历</h1><h2 id="一描述">一、描述</h2><p>从随机一个节点出发, 访问该节点所有的邻接节点.访问后的节点(包括第一个节点)对其进行标记,若节点未被访问则添加到队列中.</p><p>若队列中存在元素就将其出队, 并用上述的方法重复过程.</p><h2 id="二举例">二、举例</h2><p>目前存在一个图如下所示</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022421093214.png" /></p><p>假设从 2 这个节点开始遍历, 2 先标记为访问后入队.</p><p>此时队列中有 2 就出队访问 0 和 3, 同时这两个数标记后入队.</p><p>0 出队后访问 1 和 2, 但此时的 2 已经被访问过, 就只有 1 入队, 此时 3出队 访问 1 和 2. 同理 1 2 被访问过就不处理了.</p><p>此时队列中只剩一个 1 , 出队后发现 0 3 被访问. 最后队列为空, 遍历完成.那么遍历的顺序就应该是 2 -&gt; 0 -&gt; 3 -&gt; 1</p><p>注：这里这些情况只用于所有节点连通的情况,要保证不连通节点也被访问到就需要利用一个循环,对以每一个未访问节点为开始做一次广度有限遍历.</p><h2 id="三具体实现">三、具体实现</h2><h3 id="输入">输入</h3><p>一个正整数表示从哪个节点开始</p><h3 id="输出">输出</h3><p>由数字组成的字符串, 用以表示广度遍历的顺序. 如在二的图中, 输出如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2031</span><br></code></pre></td></tr></table></figure> ### 代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Breadth first traversal.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStartIndex The start index.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sequence of the visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">breadthFirstTraversal</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStartIndex)</span> &#123;<br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNumNodes</span> <span class="hljs-operator">=</span> connectivityMatrix.getRows();<br><span class="hljs-type">boolean</span>[] tempVisitedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[tempNumNodes];<br><br><span class="hljs-comment">// Initialize the queue.</span><br><span class="hljs-comment">// Visit before enqueue.</span><br>tempVisitedArray[paraStartIndex] = <span class="hljs-literal">true</span>;<br>resultString += paraStartIndex;<br>tempQueue.enqueue(Integer.valueOf(paraStartIndex));<br><br><span class="hljs-comment">// Now visit the rest of the graph.</span><br><span class="hljs-type">int</span> tempIndex;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">tempInteger</span> <span class="hljs-operator">=</span> (Integer) tempQueue.dequeue();<br><span class="hljs-keyword">while</span> (tempInteger != <span class="hljs-literal">null</span>) &#123;<br>tempIndex = tempInteger.intValue();<br><br><span class="hljs-comment">// Enqueue all its unvisited neighbors.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumNodes; i++) &#123;<br><span class="hljs-keyword">if</span> (tempVisitedArray[i]) &#123;<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Already visited.</span><br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (connectivityMatrix.getData()[tempIndex][i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Not directly connected.</span><br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Visit before enqueue.</span><br>tempVisitedArray[i] = <span class="hljs-literal">true</span>;<br>resultString += i;<br>tempQueue.enqueue(Integer.valueOf(i));<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Take out one from the head.</span><br>tempInteger = (Integer) tempQueue.dequeue();<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of breadthFirstTraversal</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for breadthFirstTraversal.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breadthFirstTraversalTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Test an undirected graph.</span><br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(tempMatrix);<br>System.out.println(tempGraph);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">tempSequence</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempSequence = tempGraph.breadthFirstTraversal(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try.</span><br><br>System.out.println(<span class="hljs-string">&quot;The breadth first order of visit: &quot;</span> + tempSequence);<br>&#125;<span class="hljs-comment">// Of breadthFirstTraversalTest</span><br></code></pre></td></tr></table></figure></p><h3 id="运行截图">运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022421095036.png" /></p><h1 id="图的深度优先遍历">图的深度优先遍历</h1><h2 id="一描述-1">一、描述</h2><p>和广度优先遍历不一样的是, 深度优先遍历使用的栈. 它的过程更像是走迷宫,不管遇到什么选择都一直走到底, 然后再折返走另一条路.</p><p>简单点描述就是不撞南墙不回头.</p><h2 id="二举例-1">二、举例</h2><p>同样这里用一个图来解释, 图如下所示.</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022421093214.png" /></p><p>深度优先遍历通常是从邻接表的第一个节点开始,当遇到有分支的情况就把其他分支相连的节点放到栈中用于折返时选择.</p><p>那么我们也从 0 开始, 为了更符合计算机, 扫描顺序是跟着邻接表走的.那么就该访问 1 节点, 和广度遍历一样, 遍历后的节点要做标记.</p><p>访问 1 节点后 就该访问 3 节点, 访问 3 节点后访问 2 节点,此时发现无路可走就折返回去. 发现之前的分支都被访问过了, 此时遍历结束.遍历节点顺序为 0-&gt;1-&gt;3-&gt;2</p><p>注：和广度优先遍历一样,这里这些情况只用于所有节点连通的情况,要保证不连通节点也被访问到就需要利用一个循环,对以每一个未访问节点为开始做一次深度有限遍历.</p><h2 id="三具体实现-1">三、具体实现</h2><h3 id="输入-1">输入</h3><p>无</p><h3 id="输出-1">输出</h3><p>由数字组成的字符串, 用以表示广度遍历的顺序. 如在二的图中, 输出如下<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0132</span><br></code></pre></td></tr></table></figure> ### 代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Depth first traversal.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStartIndex The start index.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sequence of the visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">depthFirstTraversal</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStartIndex)</span> &#123;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNumNodes</span> <span class="hljs-operator">=</span> connectivityMatrix.getRows();<br><span class="hljs-type">boolean</span>[] tempVisitedArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[tempNumNodes];<br><br><span class="hljs-comment">// Initialize the stack.</span><br><span class="hljs-comment">// Visit before push.</span><br>tempVisitedArray[paraStartIndex] = <span class="hljs-literal">true</span>;<br>resultString += paraStartIndex;<br>tempStack.push(Integer.valueOf(paraStartIndex));<br>System.out.println(<span class="hljs-string">&quot;Push &quot;</span> + paraStartIndex);<br>System.out.println(<span class="hljs-string">&quot;Visited &quot;</span> + resultString);<br><br><span class="hljs-comment">// Now visit the rest of the graph.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempIndex</span> <span class="hljs-operator">=</span> paraStartIndex;<br><span class="hljs-type">int</span> tempNext;<br>Integer tempInteger;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// Find an unvisited neighbor.</span><br>tempNext = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumNodes; i++) &#123;<br><span class="hljs-keyword">if</span> (tempVisitedArray[i]) &#123;<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Already visited.</span><br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (connectivityMatrix.getData()[tempIndex][i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Not directly connected.</span><br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Visit this one.</span><br>tempVisitedArray[i] = <span class="hljs-literal">true</span>;<br>resultString += i;<br>tempStack.push(Integer.valueOf(i));<br>System.out.println(<span class="hljs-string">&quot;Push &quot;</span> + i);<br>tempNext = i;<br><br><span class="hljs-comment">// One is enough.</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">if</span> (tempNext == -<span class="hljs-number">1</span>) &#123;<br>tempInteger = (Integer) tempStack.pop();<br>System.out.println(<span class="hljs-string">&quot;Pop &quot;</span> + tempInteger);<br><span class="hljs-keyword">if</span> (tempStack.isEmpty()) &#123;<br><span class="hljs-comment">// No unvisited neighbor. Backtracking to the last one</span><br><span class="hljs-comment">// stored in the stack.</span><br><span class="hljs-comment">// Attention: This is the terminate condition!</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Back to the previous node, however do not remove it.</span><br>tempInteger = (Integer) tempStack.pop();<br>tempIndex = tempInteger.intValue();<br>tempStack.push(tempInteger);<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempIndex = tempNext;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of depthFirstTraversal</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for depthFirstTraversal.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depthFirstTraversalTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Test an undirected graph.</span><br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(tempMatrix);<br>System.out.println(tempGraph);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">tempSequence</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempSequence = tempGraph.depthFirstTraversal(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try.</span><br><br>System.out.println(<span class="hljs-string">&quot;The depth first order of visit: &quot;</span> + tempSequence);<br>&#125;<span class="hljs-comment">// Of depthFirstTraversalTest</span><br></code></pre></td></tr></table></figure></p><h3 id="运行截图-1">运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022421105309.png" /></p><h1 id="总结">总结</h1><p>广度优先遍历和深度优先遍历巧妙地利用了队列和栈</p><p>广度优先遍历的复杂度与深度优先遍历的复杂度大体一致，不同之处在于遍历的方式与对于问题的解决出发点不同,广度优先遍历适合大范围的寻找, 而深度优先遍历适合目标明确.</p><p>总的来说都是穷举.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day16</title>
    <link href="/posts/6c36ec77/"/>
    <url>/posts/6c36ec77/</url>
    
    <content type="html"><![CDATA[<h1 id="整数矩阵及其运算">整数矩阵及其运算</h1><h2 id="一描述">一、描述</h2><p>在最开始的时候已经做过相关的工作, 只不过那会是面向过程的编码.今天这里的步骤就是把面向过程改为面向对象.</p><ol type="1"><li><p>矩阵对象的创建.</p></li><li><p>getRows 等: getter, setter 在 java 里面很常用.主要是为了访问控制.</p></li><li><p>整数矩阵的加法、乘法.</p></li><li><p>Exception 的抛出与捕获机制.</p></li><li><p>用 this 调用其它的构造方法以减少冗余代码.</p></li><li><p>getIdentityMatrix: 单位矩阵.</p></li><li><p>resultMatrix.data[i][i]: 成员变量的访问权限:在同一类里面是可以直接使用的.</p></li></ol><h2 id="二具体代码">二、具体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> matrix;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Int matrix. For efficiency we do not define ObjectMatrix. One can revise it</span><br><span class="hljs-comment"> * to obtain DoubleMatrix.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntMatrix</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[][] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraRows    The number of rows.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColumns The number of columns.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">IntMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRows, <span class="hljs-type">int</span> paraColumns)</span> &#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraRows][paraColumns];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The second constructor. Construct a copy of the given matrix.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The given matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">IntMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] paraMatrix)</span> &#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraMatrix.length][paraMatrix[<span class="hljs-number">0</span>].length];<br><br><span class="hljs-comment">// Copy elements.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[<span class="hljs-number">0</span>].length; j++) &#123;<br>data[i][j] = paraMatrix[i][j];<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The third constructor. Construct a copy of the given matrix.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The given matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">IntMatrix</span><span class="hljs-params">(IntMatrix paraMatrix)</span> &#123;<br><span class="hljs-built_in">this</span>(paraMatrix.getData());<br>&#125;<span class="hljs-comment">// Of the third constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get identity matrix. The values at the diagonal are all 1.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraRows The given rows.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IntMatrix <span class="hljs-title function_">getIdentityMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRows)</span> &#123;<br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">resultMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(paraRows, paraRows);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraRows; i++) &#123;<br><span class="hljs-comment">// According to access control, resultMatrix.data can be visited</span><br><span class="hljs-comment">// directly.</span><br>resultMatrix.data[i][i] = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> resultMatrix;<br>&#125;<span class="hljs-comment">// Of getIdentityMatrix</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> Arrays.deepToString(data);<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get my data. Warning, the reference to the data instead of a copy of the data</span><br><span class="hljs-comment"> * is returned.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The data matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] getData() &#123;<br><span class="hljs-keyword">return</span> data;<br>&#125;<span class="hljs-comment">// Of getData</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Getter.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The number of rows.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRows</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> data.length;<br>&#125;<span class="hljs-comment">// Of getRows</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Getter.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The number of columns.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getColumns</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> data[<span class="hljs-number">0</span>].length;<br>&#125;<span class="hljs-comment">// Of getColumns</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Set one the value of one element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraRow    The row of the element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColumn The column of the element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue  The new value.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRow, <span class="hljs-type">int</span> paraColumn, <span class="hljs-type">int</span> paraValue)</span> &#123;<br>data[paraRow][paraColumn] = paraValue;<br>&#125;<span class="hljs-comment">// Of setValue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the value of one element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraRow    The row of the element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraColumn The column of the element.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraRow, <span class="hljs-type">int</span> paraColumn)</span> &#123;<br><span class="hljs-keyword">return</span> data[paraRow][paraColumn];<br>&#125;<span class="hljs-comment">// Of getValue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Add another matrix to me.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The other matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(IntMatrix paraMatrix)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// Step 1. Get the data of the given matrix.</span><br><span class="hljs-type">int</span>[][] tempData = paraMatrix.getData();<br><br><span class="hljs-comment">// Step 2. Size check.</span><br><span class="hljs-keyword">if</span> (data.length != tempData.length) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<br><span class="hljs-string">&quot;Cannot add matrices. Rows not match: &quot;</span> + data.length + <span class="hljs-string">&quot; vs. &quot;</span> + tempData.length + <span class="hljs-string">&quot;.&quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>].length != tempData[<span class="hljs-number">0</span>].length) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<br><span class="hljs-string">&quot;Cannot add matrices. Rows not match: &quot;</span> + data[<span class="hljs-number">0</span>].length + <span class="hljs-string">&quot; vs. &quot;</span> + tempData[<span class="hljs-number">0</span>].length + <span class="hljs-string">&quot;.&quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Step 3. Add to me.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; data[<span class="hljs-number">0</span>].length; j++) &#123;<br>data[i][j] += tempData[i][j];<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of add</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Add two existing matrices.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix1 The first matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix2 The second matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> A new matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IntMatrix <span class="hljs-title function_">add</span><span class="hljs-params">(IntMatrix paraMatrix1, IntMatrix paraMatrix2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// Step 1. Clone the first matrix.</span><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">resultMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(paraMatrix1);<br><br><span class="hljs-comment">// Step 2. Add the second one.</span><br>resultMatrix.add(paraMatrix2);<br><br><span class="hljs-keyword">return</span> resultMatrix;<br>&#125;<span class="hljs-comment">// Of add</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Multiply two existing matrices.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix1 The first matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix2 The second matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> A new matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IntMatrix <span class="hljs-title function_">multiply</span><span class="hljs-params">(IntMatrix paraMatrix1, IntMatrix paraMatrix2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// Step 1. Check size.</span><br><span class="hljs-type">int</span>[][] tempData1 = paraMatrix1.getData();<br><span class="hljs-type">int</span>[][] tempData2 = paraMatrix2.getData();<br><span class="hljs-keyword">if</span> (tempData1[<span class="hljs-number">0</span>].length != tempData2.length) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Cannot multiply matrices: &quot;</span> + tempData1[<span class="hljs-number">0</span>].length + <span class="hljs-string">&quot; vs. &quot;</span> + tempData2.length + <span class="hljs-string">&quot;.&quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Step 2. Allocate space.</span><br><span class="hljs-type">int</span>[][] resultData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempData1.length][tempData2[<span class="hljs-number">0</span>].length];<br><br><span class="hljs-comment">// Step 3. Multiply.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempData1.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempData2[<span class="hljs-number">0</span>].length; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tempData1[<span class="hljs-number">0</span>].length; k++) &#123;<br>resultData[i][j] += tempData1[i][k] * tempData2[k][j];<br>&#125; <span class="hljs-comment">// Of for k</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 4. Construct the matrix object.</span><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">resultMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(resultData);<br><br><span class="hljs-keyword">return</span> resultMatrix;<br>&#125;<span class="hljs-comment">// Of multiply</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">tempMatrix1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>tempMatrix1.setValue(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>tempMatrix1.setValue(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>tempMatrix1.setValue(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>tempMatrix1.setValue(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;The original matrix is： &quot;</span> + tempMatrix1);<br><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">tempMatrix2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempMatrix2 = IntMatrix.multiply(tempMatrix1, tempMatrix1);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try</span><br>System.out.println(<span class="hljs-string">&quot;The square matrix is： &quot;</span> + tempMatrix2);<br><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">tempMatrix3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(tempMatrix2);<br><span class="hljs-keyword">try</span> &#123;<br>tempMatrix3.add(tempMatrix1);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try</span><br>System.out.println(<span class="hljs-string">&quot;The connectivity matrix is： &quot;</span> + tempMatrix3);<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class IntMatrix</span><br></code></pre></td></tr></table></figure><h2 id="三运行截图">三、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419164801.png" /></p><h1 id="图的连通性检测">图的连通性检测</h1><h2 id="一描述-1">一、描述</h2><p>令图的连通矩阵为 <span class="math inline">\(M,M^0=I\)</span>为单位矩阵. 要知道图的连通性, 只需要计算 <span class="math inline">\(M_a= M^0+M^1+...+M^{n-1}\)</span>, 其中 <spanclass="math inline">\(n\)</span> 是节点个数. <spanclass="math inline">\(M_a\)</span>中第<spanclass="math inline">\(i\)</span>行第 <spanclass="math inline">\(j\)</span> 列元素为 0 的话, 就表示从节点<spanclass="math inline">\(i\)</span>到节点 <spanclass="math inline">\(j\)</span> 不可达.</p><ol type="1"><li><p>适用于有向图. 反正无向图是有向图的特殊形式.</p></li><li><p>0 次方的时候是单位矩阵.</p></li><li><p>为每一个方法写一个独立的测试方法.测试代码有时比正常使用的代码更多.</p></li><li><p>第一个测试用例是无向图, 第二个是有向图. 可以看到, 后者从节点 1不能到达节点 0.</p></li><li><p>Matrix 基础代码准备好之后, 其它的算法真的很方便.后面会进一步体会到其威力.</p></li></ol><h2 id="二具体过程">二、具体过程</h2><h3 id="原理">1. 原理</h3><p><span class="math inline">\(M_a = M^0+M^1+...+M^{n-1}\)</span>乍一看摸不着头脑. 这时候不妨把<spanclass="math inline">\(M^2\)</span>拆开来看看.</p><p>对图中只有三个节点的矩阵来说 <span class="math display">\[M^{2}_{ij} = M_{i1} \times M_{1j} +             M_{i2} \times M_{2j} +             M_{i3} \times M_{3j}\]</span></p><p>下标表示某节点到某节点, 矩阵中的值若大于 0 则表示可两点可达 如 <spanclass="math inline">\(M_{21}\)</span> 为大于 1 的值则表示 2 节点到 1节点可达.</p><p>而 $M^2 M^3 M^4 $ ... 这些的指数就表示需要经过 1 2 3 ...个节点使得两节点连接.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.graph;<br><br><span class="hljs-keyword">import</span> matrix.IntMatrix;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Directed graph. Note that undirected graphs are a special case of directed</span><br><span class="hljs-comment"> * graphs.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The connectivity matrix.</span><br><span class="hljs-comment"> */</span><br>IntMatrix connectivityMatrix;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraNumNodes The number of nodes in the graph.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> paraNumNodes)</span> &#123;<br>connectivityMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(paraNumNodes, paraNumNodes);<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The second constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The data matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] paraMatrix)</span> &#123;<br>connectivityMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(paraMatrix);<br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is the connectivity matrix of the graph.\r\n&quot;</span> + connectivityMatrix;<br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the connectivity of the graph.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception for internal error.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getConnectivity</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// Step 1. Initialize accumulated matrix: M_a = I.</span><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">tempConnectivityMatrix</span> <span class="hljs-operator">=</span> IntMatrix.getIdentityMatrix(connectivityMatrix.getData().length);<br><br><span class="hljs-comment">// Step 2. Initialize M^1.</span><br><span class="hljs-type">IntMatrix</span> <span class="hljs-variable">tempMultipliedMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntMatrix</span>(connectivityMatrix);<br><br><span class="hljs-comment">// Step 3. Determine the actual connectivity.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; connectivityMatrix.getData().length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// M_a = M_a + M^k</span><br>tempConnectivityMatrix.add(tempMultipliedMatrix);<br><br><span class="hljs-comment">// M^k</span><br>tempMultipliedMatrix = IntMatrix.multiply(tempMultipliedMatrix, connectivityMatrix);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 4. Check the connectivity.</span><br>System.out.println(<span class="hljs-string">&quot;The connectivity matrix is: &quot;</span> + tempConnectivityMatrix);<br><span class="hljs-type">int</span>[][] tempData = tempConnectivityMatrix.getData();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempData.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempData.length; j++) &#123;<br><span class="hljs-keyword">if</span> (tempData[i][j] == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Node &quot;</span> + i + <span class="hljs-string">&quot; cannot reach &quot;</span> + j);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of getConnectivity</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for getConnectivity.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getConnectivityTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Test an undirected graph.</span><br><span class="hljs-type">int</span>[][] tempMatrix = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(tempMatrix);<br>System.out.println(tempGraph2);<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">tempConnected</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempConnected = tempGraph2.getConnectivity();<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try.</span><br><br>System.out.println(<span class="hljs-string">&quot;Is the graph connected? &quot;</span> + tempConnected);<br><br><span class="hljs-comment">// Test a directed graph.</span><br><span class="hljs-comment">// Remove one arc to form a directed graph.</span><br>tempGraph2.connectivityMatrix.setValue(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>tempConnected = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>tempConnected = tempGraph2.getConnectivity();<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>&#125; <span class="hljs-comment">// Of try.</span><br><br>System.out.println(<span class="hljs-string">&quot;Is the graph connected? &quot;</span> + tempConnected);<br>&#125;<span class="hljs-comment">// Of getConnectivityTest</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span>);<br><span class="hljs-type">Graph</span> <span class="hljs-variable">tempGraph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(<span class="hljs-number">3</span>);<br>System.out.println(tempGraph);<br><br><span class="hljs-comment">// Unit test.</span><br>getConnectivityTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class Graph</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419173610.png" /></p><h1 id="总结">总结</h1><p>矩阵连通性那个判断真的是太神奇了,无论如何我都想不到能利用矩阵相乘来判断.在以往的经验中我能想到的就是深度优先遍历和广度优先遍历.</p><p>这几天才深深感觉到数学才是计算机的基础, 尤其是千变万化的矩阵.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day15</title>
    <link href="/posts/f53fbdcd/"/>
    <url>/posts/f53fbdcd/</url>
    
    <content type="html"><![CDATA[<h1 id="huffman-编码-建树">Huffman 编码 (建树)</h1><h2 id="一描述">一、描述</h2><p>在之前的基础上增加了两个函数. 一个是构建字母表 constructAlphabet() ,另一个就是通过字母表来建立起 Huffman 树 constructTree().</p><h2 id="二构建字母表">二、构建字母表</h2><h3 id="三部分">1. 三部分</h3><p>完整的字母映射其实是需要存储出现字符和每个字符出现次数的两个辅助结构才能达到查询的目的.</p><p>在代码中这三部分使用三个数组来表示. 分别是 alphabet 、 charCounts 和charMapping .</p><p>alphabet 中存储的是输入字符串中出现了哪些字符.</p><p>charCounts 中存储的是每个字符出现的次数,我们可以把它看做每个字符的权重. 需要注意的是 charCounts 数组的长度为alphabet 长度的两倍减一. 因为构建 Huffman 树时,当节点结合之后会产生新的权值. 多出来的部分用于存储这部分的值.在初始化后字符和它的权重在不同数组的下标是一样的可以做到一一对应.</p><p>charMapping 存储的是某个字符在 alphabet 或 charCounts 的数组下标.</p><p>整体流程是先获取字符的 ASCII 码, 以 ASCII 码为下标在 charMapping查找到该字符在 alphabet 和 charCounts 中的 下标从而获得需要的数据.</p><h3 id="具体代码">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct the alphabet. The results are stored in the member variables</span><br><span class="hljs-comment"> * charMapping and alphabet.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constructAlphabet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Initialize.</span><br>Arrays.fill(charMapping, -<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// The count for each char. At most NUM_CHARS chars.</span><br><span class="hljs-type">int</span>[] tempCharCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[NUM_CHARS];<br><br><span class="hljs-comment">// The index of the char in the ASCII charset.</span><br><span class="hljs-type">int</span> tempCharIndex;<br><br><span class="hljs-comment">// Step 1. Scan the string to obtain the counts.</span><br><span class="hljs-type">char</span> tempChar;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inputText.length(); i++) &#123;<br>tempChar = inputText.charAt(i);<br>tempCharIndex = (<span class="hljs-type">int</span>) tempChar;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempCharIndex + <span class="hljs-string">&quot; &quot;</span>);<br><br>tempCharCounts[tempCharIndex]++;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 2. Scan to determine the size of the alphabet.</span><br>alphabetLength = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (tempCharCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>alphabetLength++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Compress to the alphabet</span><br>alphabet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[alphabetLength];<br>charCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * alphabetLength - <span class="hljs-number">1</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempCounter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; NUM_CHARS; i++) &#123;<br><span class="hljs-keyword">if</span> (tempCharCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>alphabet[tempCounter] = (<span class="hljs-type">char</span>) i;<br>charCounts[tempCounter] = tempCharCounts[i];<br>charMapping[i] = tempCounter;<br>tempCounter++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;The alphabet is: &quot;</span> + Arrays.toString(alphabet));<br>System.out.println(<span class="hljs-string">&quot;Their counts are: &quot;</span> + Arrays.toString(charCounts));<br>System.out.println(<span class="hljs-string">&quot;The char mappings are: &quot;</span> + Arrays.toString(charMapping));<br>&#125;<span class="hljs-comment">// Of constructAlphabet</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419153349.png" /></p><h2 id="三建立-huffman-树">三、建立 Huffman 树</h2><h3 id="描述">1. 描述</h3><p>找 charCounts 中最小的两个值作为左右子节点,然后加起来构成一个新的值加入到 charCounts 中,这里就对应了之前为什么要设置 charCounts 的长度为 alphabet的两倍减一.</p><p>然后就是就是将这些节点连接起来, 和之前构造树结构是一样的处理方法.</p><h3 id="具体代码-1">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct the tree.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constructTree</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Allocate space.</span><br>nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>[alphabetLength * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];<br><span class="hljs-type">boolean</span>[] tempProcessed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[alphabetLength * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// Step 2. Initialize leaves.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; alphabetLength; i++) &#123;<br>nodes[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(alphabet[i], charCounts[i], <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Construct the tree.</span><br><span class="hljs-type">int</span> tempLeft, tempRight, tempMinimal;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> alphabetLength; i &lt; <span class="hljs-number">2</span> * alphabetLength - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Step 3.1 Select the first minimal as the left child.</span><br>tempLeft = -<span class="hljs-number">1</span>;<br>tempMinimal = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (tempProcessed[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinimal &gt; charCounts[j]) &#123;<br>tempMinimal = charCounts[j];<br>tempLeft = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>tempProcessed[tempLeft] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 3.2 Select the second minimal as the right child.</span><br>tempRight = -<span class="hljs-number">1</span>;<br>tempMinimal = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (tempProcessed[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinimal &gt; charCounts[j]) &#123;<br>tempMinimal = charCounts[j];<br>tempRight = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>tempProcessed[tempRight] = <span class="hljs-literal">true</span>;<br>System.out.println(<span class="hljs-string">&quot;Selecting &quot;</span> + tempLeft + <span class="hljs-string">&quot; and &quot;</span> + tempRight);<br><br><span class="hljs-comment">// Step 3.3 Construct the new node.</span><br>charCounts[i] = charCounts[tempLeft] + charCounts[tempRight];<br>nodes[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;*&#x27;</span>, charCounts[i], nodes[tempLeft], nodes[tempRight], <span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// Step 3.4 Link with children.</span><br>nodes[tempLeft].parent = nodes[i];<br>nodes[tempRight].parent = nodes[i];<br>System.out.println(<span class="hljs-string">&quot;The children of &quot;</span> + i + <span class="hljs-string">&quot; are &quot;</span> + tempLeft + <span class="hljs-string">&quot; and &quot;</span> + tempRight);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of constructTree</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-1">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419155924.png" /></p><h1 id="huffman-编码-编码与解码">Huffman 编码 (编码与解码)</h1><h2 id="一描述-1">一、描述</h2><p>将一棵 Huffman 树转换为 Huffman 编码.毕竟一棵只在内存里面的树对于现实没有很大作用,我们需要的是将信息压缩以及将压缩信息还原.</p><h2 id="二编码">二、编码</h2><h3 id="描述-1">1. 描述</h3><p>将一段字符串转换为一段二进制, 这里为了简单起见用字符串代表二进制.</p><p>从根开始, 向左编码 0 , 向右编码 1.</p><h3 id="具体内容">2. 具体内容</h3><h4 id="输入">输入</h4><p>一行字符串</p><h4 id="输出">输出</h4><p>由 0 1 组成的字符串</p><h4 id="具体代码-2">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Encode the given string.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given string.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">coding</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultCodeString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">int</span> tempIndex;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br><span class="hljs-comment">// From the original char to the location in the alphabet.</span><br>tempIndex = charMapping[(<span class="hljs-type">int</span>) paraString.charAt(i)];<br><br><span class="hljs-comment">// From the location in the alphabet to the code.</span><br>resultCodeString += huffmanCodes[tempIndex];<br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> resultCodeString;<br>&#125;<span class="hljs-comment">// Of coding</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-2">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419162444.png" /></p><h2 id="三解码">三、解码</h2><h3 id="描述-2">1. 描述</h3><p>将一段二进制字符串转换为一个字符串.</p><p>节点从根开始, 二进制字符串扫描从左到右. 扫描遇到 0 ,节点往左节点移动. 扫描遇到 1 , 节点往右节点移动.若解析到字符节点退回到根节点位置.</p><p>这里字符节点的判断是通过左子树是否为 null. 因为根据 Huffman 树的结构,字符节点所在的位置都是叶节点.</p><h3 id="具体内容-1">2. 具体内容</h3><h4 id="输入-1">输入</h4><p>由 0 1 组成的字符串</p><h4 id="输出-1">输出</h4><p>一行字符串</p><h4 id="具体代码-3">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Decode the given string.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given string.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">decoding</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultCodeString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> getRoot();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br><span class="hljs-keyword">if</span> (paraString.charAt(i) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>tempNode = tempNode.leftChild;<br>System.out.println(tempNode);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNode = tempNode.rightChild;<br>System.out.println(tempNode);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempNode.leftChild == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Decode one:&quot;</span> + tempNode);<br><span class="hljs-comment">// Decode one char.</span><br>resultCodeString += tempNode.character;<br><br><span class="hljs-comment">// Return to the root.</span><br>tempNode = getRoot();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultCodeString;<br>&#125;<span class="hljs-comment">// Of decoding</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-3">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022419162603.png" /></p><h1 id="总结">总结</h1><p>编码和解码需要注意的是字符的取值必须要是之前在文本文件中出现过的,那个文本文件实际上模拟的就是人书信时各字符出现的样例.当然这部分并没有出现对不识别字符的处理.</p><h1 id="附录完整代码">附录(完整代码)</h1><p>这部分代码比较多, 所以我把它拆开, 以及其中还有一些辅助函数.</p><p>完整代码如下 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.tree;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Huffman tree, encoding, and decoding. For simplicity, only ASCII characters</span><br><span class="hljs-comment"> * are supported.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huffman</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class for Huffman nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanNode</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The char. Only valid for leaf nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span> character;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Weight. It can also be double.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> weight;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The left child.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode leftChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The right child.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode rightChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The parent. It helps constructing the Huffman code of each character.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode parent;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The first constructor</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HuffmanNode</span><span class="hljs-params">(<span class="hljs-type">char</span> paraCharacter, <span class="hljs-type">int</span> paraWeight, HuffmanNode paraLeftChild, HuffmanNode paraRightChild,</span><br><span class="hljs-params">HuffmanNode paraParent)</span> &#123;<br>character = paraCharacter;<br>weight = paraWeight;<br>leftChild = paraLeftChild;<br>rightChild = paraRightChild;<br>parent = paraParent;<br>&#125;<span class="hljs-comment">// Of HuffmanNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * To string.</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span> + character + <span class="hljs-string">&quot;, &quot;</span> + weight + <span class="hljs-string">&quot;)&quot;</span>;<br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br>&#125;<span class="hljs-comment">// Of class HuffmanNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of characters. 256 for ASCII.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM_CHARS</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The input text. It is stored in a string for simplicity.</span><br><span class="hljs-comment"> */</span><br>String inputText;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The length of the alphabet, also the number of leaves.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> alphabetLength;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The alphabet.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] alphabet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The count of chars. The length is 2 * alphabetLength - 1 to include non-leaf</span><br><span class="hljs-comment"> * nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] charCounts;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The mapping of chars to the indices in the alphabet.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] charMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Codes for each char in the alphabet. It should have the same length as</span><br><span class="hljs-comment"> * alphabet.</span><br><span class="hljs-comment"> */</span><br>String[] huffmanCodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * All nodes. The last node is the root.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode[] nodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraFilename The text filename.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Huffman</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>charMapping = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[NUM_CHARS];<br><br>readText(paraFilename);<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Read text.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraFilename The text filename.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readText</span><span class="hljs-params">(String paraFilename)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>inputText = Files.newBufferedReader(Paths.get(paraFilename), StandardCharsets.UTF_8).lines()<br>.collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>System.exit(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-comment">// Of try</span><br><br>System.out.println(<span class="hljs-string">&quot;The text is:\r\n&quot;</span> + inputText);<br>&#125;<span class="hljs-comment">// Of readText</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct the alphabet. The results are stored in the member variables</span><br><span class="hljs-comment"> * charMapping and alphabet.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constructAlphabet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Initialize.</span><br>Arrays.fill(charMapping, -<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// The count for each char. At most NUM_CHARS chars.</span><br><span class="hljs-type">int</span>[] tempCharCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[NUM_CHARS];<br><br><span class="hljs-comment">// The index of the char in the ASCII charset.</span><br><span class="hljs-type">int</span> tempCharIndex;<br><br><span class="hljs-comment">// Step 1. Scan the string to obtain the counts.</span><br><span class="hljs-type">char</span> tempChar;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inputText.length(); i++) &#123;<br>tempChar = inputText.charAt(i);<br>tempCharIndex = (<span class="hljs-type">int</span>) tempChar;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempCharIndex + <span class="hljs-string">&quot; &quot;</span>);<br><br>tempCharCounts[tempCharIndex]++;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 2. Scan to determine the size of the alphabet.</span><br>alphabetLength = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (tempCharCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>alphabetLength++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Compress to the alphabet</span><br>alphabet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[alphabetLength];<br>charCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * alphabetLength - <span class="hljs-number">1</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempCounter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; NUM_CHARS; i++) &#123;<br><span class="hljs-keyword">if</span> (tempCharCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>alphabet[tempCounter] = (<span class="hljs-type">char</span>) i;<br>charCounts[tempCounter] = tempCharCounts[i];<br>charMapping[i] = tempCounter;<br>tempCounter++;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println();<br>System.out.println(<span class="hljs-string">&quot;The alphabet is: &quot;</span> + Arrays.toString(alphabet));<br>System.out.println(<span class="hljs-string">&quot;Their counts are: &quot;</span> + Arrays.toString(charCounts));<br>System.out.println(<span class="hljs-string">&quot;The char mappings are: &quot;</span> + Arrays.toString(charMapping));<br>&#125;<span class="hljs-comment">// Of constructAlphabet</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct the tree.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">constructTree</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Allocate space.</span><br>nodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>[alphabetLength * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];<br><span class="hljs-type">boolean</span>[] tempProcessed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[alphabetLength * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// Step 2. Initialize leaves.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; alphabetLength; i++) &#123;<br>nodes[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(alphabet[i], charCounts[i], <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. Construct the tree.</span><br><span class="hljs-type">int</span> tempLeft, tempRight, tempMinimal;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> alphabetLength; i &lt; <span class="hljs-number">2</span> * alphabetLength - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Step 3.1 Select the first minimal as the left child.</span><br>tempLeft = -<span class="hljs-number">1</span>;<br>tempMinimal = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (tempProcessed[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinimal &gt; charCounts[j]) &#123;<br>tempMinimal = charCounts[j];<br>tempLeft = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>tempProcessed[tempLeft] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// Step 3.2 Select the second minimal as the right child.</span><br>tempRight = -<span class="hljs-number">1</span>;<br>tempMinimal = Integer.MAX_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (tempProcessed[j]) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempMinimal &gt; charCounts[j]) &#123;<br>tempMinimal = charCounts[j];<br>tempRight = j;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>tempProcessed[tempRight] = <span class="hljs-literal">true</span>;<br>System.out.println(<span class="hljs-string">&quot;Selecting &quot;</span> + tempLeft + <span class="hljs-string">&quot; and &quot;</span> + tempRight);<br><br><span class="hljs-comment">// Step 3.3 Construct the new node.</span><br>charCounts[i] = charCounts[tempLeft] + charCounts[tempRight];<br>nodes[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;*&#x27;</span>, charCounts[i], nodes[tempLeft], nodes[tempRight], <span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">// Step 3.4 Link with children.</span><br>nodes[tempLeft].parent = nodes[i];<br>nodes[tempRight].parent = nodes[i];<br>System.out.println(<span class="hljs-string">&quot;The children of &quot;</span> + i + <span class="hljs-string">&quot; are &quot;</span> + tempLeft + <span class="hljs-string">&quot; and &quot;</span> + tempRight);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of constructTree</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the root of the binary tree.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The root.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> HuffmanNode <span class="hljs-title function_">getRoot</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> nodes[nodes.length - <span class="hljs-number">1</span>];<br>&#125;<span class="hljs-comment">// Of getRoot</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pre-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderVisit</span><span class="hljs-params">(HuffmanNode paraNode)</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;(&quot;</span> + paraNode.character + <span class="hljs-string">&quot;, &quot;</span> + paraNode.weight + <span class="hljs-string">&quot;) &quot;</span>);<br><br><span class="hljs-keyword">if</span> (paraNode.leftChild != <span class="hljs-literal">null</span>) &#123;<br>preOrderVisit(paraNode.leftChild);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (paraNode.rightChild != <span class="hljs-literal">null</span>) &#123;<br>preOrderVisit(paraNode.rightChild);<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of preOrderVisit</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Generate codes for each character in the alphabet.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateCodes</span><span class="hljs-params">()</span> &#123;<br>huffmanCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[alphabetLength];<br>HuffmanNode tempNode;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; alphabetLength; i++) &#123;<br>tempNode = nodes[i];<br><span class="hljs-comment">// Use tempCharCode instead of tempCode such that it is unlike</span><br><span class="hljs-comment">// tempNode.</span><br><span class="hljs-comment">// This is an advantage of long names.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">tempCharCode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> (tempNode.parent != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode == tempNode.parent.leftChild) &#123;<br>tempCharCode = <span class="hljs-string">&quot;0&quot;</span> + tempCharCode;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempCharCode = <span class="hljs-string">&quot;1&quot;</span> + tempCharCode;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.parent;<br>&#125; <span class="hljs-comment">// Of while</span><br><br>huffmanCodes[i] = tempCharCode;<br>System.out.println(<span class="hljs-string">&quot;The code of &quot;</span> + alphabet[i] + <span class="hljs-string">&quot; is &quot;</span> + tempCharCode);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of generateCodes</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Encode the given string.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given string.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">coding</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultCodeString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">int</span> tempIndex;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br><span class="hljs-comment">// From the original char to the location in the alphabet.</span><br>tempIndex = charMapping[(<span class="hljs-type">int</span>) paraString.charAt(i)];<br><br><span class="hljs-comment">// From the location in the alphabet to the code.</span><br>resultCodeString += huffmanCodes[tempIndex];<br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> resultCodeString;<br>&#125;<span class="hljs-comment">// Of coding</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Decode the given string.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given string.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">decoding</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultCodeString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> getRoot();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br><span class="hljs-keyword">if</span> (paraString.charAt(i) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>tempNode = tempNode.leftChild;<br>System.out.println(tempNode);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNode = tempNode.rightChild;<br>System.out.println(tempNode);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempNode.leftChild == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Decode one:&quot;</span> + tempNode);<br><span class="hljs-comment">// Decode one char.</span><br>resultCodeString += tempNode.character;<br><br><span class="hljs-comment">// Return to the root.</span><br>tempNode = getRoot();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultCodeString;<br>&#125;<span class="hljs-comment">// Of decoding</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">Huffman</span> <span class="hljs-variable">tempHuffman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Huffman</span>(<span class="hljs-string">&quot;D:/wenshihuai/huffmantext-small.txt&quot;</span>);<br>tempHuffman.constructAlphabet();<br>tempHuffman.constructTree();<br><br><span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">tempRoot</span> <span class="hljs-operator">=</span> tempHuffman.getRoot();<br>System.out.println(<span class="hljs-string">&quot;The root is: &quot;</span> + tempRoot);<br>System.out.println(<span class="hljs-string">&quot;Preorder visit:&quot;</span>);<br>tempHuffman.preOrderVisit(tempHuffman.getRoot());<br><br>tempHuffman.generateCodes();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">tempCoded</span> <span class="hljs-operator">=</span> tempHuffman.coding(<span class="hljs-string">&quot;a-efx&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Coded: &quot;</span> + tempCoded);<br><span class="hljs-type">String</span> <span class="hljs-variable">tempDecoded</span> <span class="hljs-operator">=</span> tempHuffman.decoding(tempCoded);<br>System.out.println(<span class="hljs-string">&quot;Decoded: &quot;</span> + tempDecoded);<br><br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class Huffman</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day14</title>
    <link href="/posts/82388d5b/"/>
    <url>/posts/82388d5b/</url>
    
    <content type="html"><![CDATA[<h1 id="hanoi-塔问题">Hanoi 塔问题</h1><h2 id="一描述">一、描述</h2><p>有三根杆子A, B, C. A 杆上有 N 个 ( N &gt; 1 ) 穿孔圆盘,盘的尺寸由下到上依次变小. 要求按下列规则将所有圆盘移至 C 杆:每次只能移动一个圆盘; 大盘不能叠在小盘上面.</p><p>提示: 可将圆盘临时置于 B 杆, 也可将从 A 杆移出的圆盘重新移回 A 杆,但都必须遵循上述两条规则.</p><p>问: 如何移? 最少要移动多少次 ?</p><h2 id="二思考">二、思考</h2><p>在数据结构中, 一般把 Hanoi 塔放到栈这一章. 但我觉得,将其展开更像是二叉树, 也有点三叉的味道.</p><p>最后还不是依靠递归来完成. 最简单的就是只有一个圆盘, 这样直接可以从 A移动到 C. 当圆盘数 N 大于 1 时(N &gt;1)可以把只除去最后一个的剩余圆盘作为一个整体, 使它通过 C 移动到 B ,然后最后一个圆盘从 A 移动到 C. 这样问题就转换成了 N - 1 个圆盘从 B 经过A 移动到 C 上.</p><h2 id="三具体实现">三、具体实现</h2><h3 id="输入">输入</h3><p>三个字符代表杆, 一个整数代表需要移动的圆盘. 初始状态如下所示<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">paraSource      需要移动的圆盘所在杆 整个函数开始初始为 <span class="hljs-selector-tag">A</span> 杆<br>paraIntermedium 移动圆盘用作缓存的杆 整个函数开始初始为 <span class="hljs-selector-tag">B</span> 杆<br>paraDestination 圆盘最终需要到达的杆 整个函数开始初始为 C 杆<br>paraNumber      需要移动圆盘的数量   整个函数开始初始为 <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></p><h3 id="输出">输出</h3><p>依照 Hanoi 规则输出的圆盘移动顺序</p><h3 id="完整代码">1. 完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.tree;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Hanoi tower.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hanoi</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Move a number of plates.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraSource      The source pole.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraIntermedium The intermediary pole.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraDestination The destination pole.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraNumber      The number of plates.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">char</span> paraSource, <span class="hljs-type">char</span> paraIntermediary, <span class="hljs-type">char</span> paraDestination, <span class="hljs-type">int</span> paraNumber)</span> &#123;<br><span class="hljs-keyword">if</span> (paraNumber == <span class="hljs-number">1</span>) &#123;<br>System.out.println(paraSource + <span class="hljs-string">&quot;-&gt;&quot;</span> + paraDestination + <span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>hanoi(paraSource, paraDestination, paraIntermediary, paraNumber - <span class="hljs-number">1</span>);<br>System.out.println(paraSource + <span class="hljs-string">&quot;-&gt;&quot;</span> + paraDestination + <span class="hljs-string">&quot; &quot;</span>);<br>hanoi(paraIntermediary, paraSource, paraDestination, paraNumber - <span class="hljs-number">1</span>);<br><br>&#125;<span class="hljs-comment">// Of hanoi</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>hanoi(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">3</span>);<br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class Hanoi</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">2. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022417165523.png" /></p><h1 id="huffman-编码-节点定义与文件读取">Huffman 编码(节点定义与文件读取)</h1><h2 id="一概念">一、概念</h2><p>哈夫曼编码 ( Huffman Coding ), 又称霍夫曼编码, 是一种编码方式,哈夫曼编码是可变字长编码 ( VLC ) 的一种. Huffman 于 1952年提出一种编码方法,该方法完全依据字符出现概率来构造异字头的平均长度最短的码字,有时称之为最佳编码, 一般就叫做 Huffman 编码（有时也称为霍夫曼编码）.</p><h2 id="二变量释义">二、变量释义</h2><p>每个节点的内容包括: 字符 (仅对叶节点有效)、权重 (用的整数,该字符的个数)、指向子节点父节点的引用. 这里指向父节点的引用是必须的.</p><p>NUM_CHARS 是指 ASCII 字符集的字符个数. 为方便起见, 仅支持 ASCII.</p><p>inputText 的引入只是想把程序尽可能细分成独立的模块,这样便于学习和调拭. 用于存储输入的字符串, 使得程序可以处理多种情况.</p><p>alphabet 仅存 inputText 出现过的字符.</p><p>alphabetLength 完全可以用 alphabet.length() 代替.</p><p>charCounts 要为所有的节点负责, 其元素对应于 HuffmanNode 里面的weight. 为了节约, 可以把其中一个省掉.</p><p>charMapping 是为了从 ASCII 里面的顺序映射到 alphabet 里面的顺序.这也是我只采用 ASCII 字符集 (仅 256 字符) 的原因.</p><p>huffmanCodes 将个字符映射为一个字符串, 其实应该是二进制串.我这里不是想偷懒么.</p><p>nodes 要先把所有的节点存储在一个数组里面, 然后再链接它们.这是常用招数. 构造方法仅初始化了 charMapping, 读入了文件.</p><p>readText 采用了最简单粗暴的方式. 还可以有其它的逐行读入的方式.</p><p>要自己弄个文本文件, 里面存放一个字符串 abcdedgsgs 之类,或者几行英文文本.</p><h2 id="三本节代码">三、本节代码</h2><p>定义 Huffman 树及其节点, 编写其构造函数及其从文件读取字符串.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.tree;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Huffman tree, encoding, and decoding. For simplicity, only ASCII characters</span><br><span class="hljs-comment"> * are supported.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huffman</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class for Huffman nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanNode</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The char. Only valid for leaf nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span> character;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Weight. It can also be double.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> weight;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The left child.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode leftChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The right child.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode rightChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The parent. It helps constructing the Huffman code of each character.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode parent;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The first constructor</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HuffmanNode</span><span class="hljs-params">(<span class="hljs-type">char</span> paraCharacter, <span class="hljs-type">int</span> paraWeight, HuffmanNode paraLeftChild, HuffmanNode paraRightChild,</span><br><span class="hljs-params">HuffmanNode paraParent)</span> &#123;<br>character = paraCharacter;<br>weight = paraWeight;<br>leftChild = paraLeftChild;<br>rightChild = paraRightChild;<br>parent = paraParent;<br>&#125;<span class="hljs-comment">// Of HuffmanNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * To string.</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(&quot;</span> + character + <span class="hljs-string">&quot;, &quot;</span> + weight + <span class="hljs-string">&quot;)&quot;</span>;<br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br>&#125;<span class="hljs-comment">// Of class HuffmanNode</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The number of characters. 256 for ASCII.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM_CHARS</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The input text. It is stored in a string for simplicity.</span><br><span class="hljs-comment"> */</span><br>String inputText;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The length of the alphabet, also the number of leaves.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> alphabetLength;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The alphabet.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] alphabet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The count of chars. The length is 2 * alphabetLength - 1 to include non-leaf</span><br><span class="hljs-comment"> * nodes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] charCounts;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The mapping of chars to the indices in the alphabet.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] charMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Codes for each char in the alphabet. It should have the same length as</span><br><span class="hljs-comment"> * alphabet.</span><br><span class="hljs-comment"> */</span><br>String[] huffmanCodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * All nodes. The last node is the root.</span><br><span class="hljs-comment"> */</span><br>HuffmanNode[] nodes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraFilename The text filename.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Huffman</span><span class="hljs-params">(String paraFilename)</span> &#123;<br>charMapping = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[NUM_CHARS];<br><br>readText(paraFilename);<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Read text.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraFilename The text filename.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readText</span><span class="hljs-params">(String paraFilename)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>inputText = Files.newBufferedReader(Paths.get(paraFilename), StandardCharsets.UTF_8).lines()<br>.collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (Exception ee) &#123;<br>System.out.println(ee);<br>System.exit(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-comment">// Of try</span><br><br>System.out.println(<span class="hljs-string">&quot;The text is:\r\n&quot;</span> + inputText);<br>&#125;<span class="hljs-comment">// Of readText</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">Huffman</span> <span class="hljs-variable">tempHuffman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Huffman</span>(<span class="hljs-string">&quot;D:/wenshihuai/huffmantext-small.txt&quot;</span>);<br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class Huffman</span><br></code></pre></td></tr></table></figure><h2 id="四运行截图">四、运行截图</h2><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022417202013.png" /></p><h1 id="总结">总结</h1><p>对我来说比较难理解的时读取文件那一部分. 其实就是对 JDK的各种函数不熟悉. 读取文件那个函数也就是以字符流的形式读取文件,然后读取每行字符串并用换行符拼接.</p><p>还是需要多写多练多熟悉.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day13</title>
    <link href="/posts/1c5c18f8/"/>
    <url>/posts/1c5c18f8/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树深度遍历的栈实现-中序">二叉树深度遍历的栈实现 (中序)</h1><p>中序遍历在之前是用递归的方式来实现的, 递归的本质就是栈.只不过递归使用的是系统提供的栈,当然我们也可以编写手工栈来实现之前系统栈的功能.这就是这一节需要完成的任务. 那么第一个任务就是编写一个栈.</p><h2 id="一具有通用性的对象栈">一、具有通用性的对象栈</h2><p>简而言之就是把之前的字符栈转变为适合于所有数据结构的对象栈,其中方法也和之前的大同小异. 这里新增了判断栈是否为空的代码.</p><h3 id="入栈">1. 入栈</h3><h4 id="描述">描述</h4><p>向栈中添加一个元素.</p><h4 id="输入">输入</h4><p>一个Object类的对象</p><h4 id="输出">输出</h4><p>若栈满则打印 "Stack full." 然后返回 false .</p><p>若栈未满则返回 true .</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Push an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraObject The given object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object paraObject)</span> &#123;<br><span class="hljs-keyword">if</span> (depth == MAX_DEPTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;Stack full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[depth] = paraObject;<br>depth++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of push</span><br></code></pre></td></tr></table></figure><h3 id="出栈">2. 出栈</h3><h4 id="描述-1">描述</h4><p>从栈顶去除一个元素.</p><h4 id="输入-1">输入</h4><p>无</p><h4 id="输出-1">输出</h4><p>返回一个类为Object的对象为之前的栈顶元素.</p><p>若栈为空则打印 "Nothing to pop." 并返回 '\0' .</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pop an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The object at the top of the stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Nothing to pop.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125; <span class="hljs-comment">// of if</span><br><br><span class="hljs-type">Object</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> data[depth - <span class="hljs-number">1</span>];<br>depth--;<br><br><span class="hljs-keyword">return</span> resultObject;<br>&#125;<span class="hljs-comment">// Of pop</span><br></code></pre></td></tr></table></figure><h3 id="栈判空">3. 栈判空</h3><h4 id="描述-2">描述</h4><p>通过代码中栈指针的位置判断当前栈中是否还有元素.</p><h4 id="输入-2">输入</h4><p>无</p><h4 id="输出-2">输出</h4><p>栈中还有元素返回 false .</p><p>栈中无元素返回 true .</p><h4 id="具体代码-2">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the stack empty?</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> True if empty.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-comment">// Of isEmpty</span><br></code></pre></td></tr></table></figure><h3 id="完整代码">4. 完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.stack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Object stack.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectStack</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_DEPTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> depth;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data</span><br><span class="hljs-comment"> */</span><br>Object[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty sequential list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectStack</span><span class="hljs-params">()</span> &#123;<br>depth = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[MAX_DEPTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; depth; i++) &#123;<br>resultString += data[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Push an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraObject The given object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object paraObject)</span> &#123;<br><span class="hljs-keyword">if</span> (depth == MAX_DEPTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;Stack full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[depth] = paraObject;<br>depth++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of push</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pop an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The object at the top of the stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Nothing to pop.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125; <span class="hljs-comment">// of if</span><br><br><span class="hljs-type">Object</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> data[depth - <span class="hljs-number">1</span>];<br>depth--;<br><br><span class="hljs-keyword">return</span> resultObject;<br>&#125;<span class="hljs-comment">// Of pop</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the stack empty?</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> True if empty.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-comment">// Of isEmpty</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; ch &lt; <span class="hljs-string">&#x27;m&#x27;</span>; ch++) &#123;<br>tempStack.push(Character.valueOf(ch));<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">char</span> tempChar;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>tempChar = ((Character) tempStack.pop()).charValue();<br>System.out.println(<span class="hljs-string">&quot;Poped: &quot;</span> + tempChar);<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class ObjectStack</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">5. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022416105053.png" /></p><h2 id="二中序遍历">二、中序遍历</h2><h3 id="描述-3">1. 描述</h3><p>具体思路来自<ahref="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio/">LeetCode题解</a>.</p><p>这里对算法进行简单的介绍.</p><p>从根开始入栈, 当一个节点入栈后对该节点的左子节点判断是否为空,若不为空则入栈. 重复以上步骤直到左子节点为空, 然后开始出栈输出元素.节点出栈后判断是否有右边子节点,若不为空则重复之前对左子节点的处理方式.</p><h3 id="具体代码-3">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * In-order visit with stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrderVisitWithStack</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br><span class="hljs-keyword">while</span> (!tempStack.isEmpty() || tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>tempStack.push(tempNode);<br>tempNode = tempNode.leftChild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNode = (BinaryCharTree) tempStack.pop();<br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempNode.value + <span class="hljs-string">&quot; &quot;</span>);<br>tempNode = tempNode.rightChild;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br>&#125;<span class="hljs-comment">// Of inOrderVisitWithStack</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-1">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022417095900.png" /></p><h1 id="二叉树深度遍历的栈实现-前序和后序">二叉树深度遍历的栈实现(前序和后序)</h1><h2 id="一描述">一、描述</h2><p>前序和后序无论是哪种在递归中都是使用栈.</p><ol type="1"><li><p>前序、后序与中序的区别, 仅仅在于输出语句的位置不同.</p></li><li><p>二叉树的遍历, 总共有 6 种排列: 1) 左中右 (中序); 2) 左右中(后序); 3) 中左右 (前序); 4) 中右左; 5) 右左中; 6) 右中左.我们平常关心的是前三种, 是因为我们习惯于先左后右. 如果要先右后左,就相当于左右子树互换, 这个是很容易做到的.</p></li><li><p>如果将前序的左右子树互换, 就可得到 4) 中右左; 再进行逆序,可以得到 2) 左右中. 因此, 要把前序的代码改为后序, 需要首先将 leftChild和 rightChild 互换, 然后用一个栈来存储需要输出的字符, 最终反向输出即可.这种将一个问题转换成另一个等价问题的方式, 无论在数学还是计算机领域,都极度重要. 参见 <ahref="https://blog.csdn.net/minfanphd/article/details/117318844">https://blog.csdn.net/minfanphd/article/details/117318844</a>中莫峦奇的版本.</p></li><li><p>如果不按上述方式, 直接写后序遍历, 就会复杂得多, 有双重的 while循环. 参见 <ahref="https://blog.csdn.net/minfanphd/article/details/117318844">https://blog.csdn.net/minfanphd/article/details/117318844</a>中潘佳豪的版本.</p></li><li><p>知乎<ahref="https://zhuanlan.zhihu.com/p/80578741">https://zhuanlan.zhihu.com/p/80578741</a>对以上两种方法进行了更加详细的介绍.</p></li><li><p>改变二叉树的数据结构, 在其中添加一个变量用于记录是否入过栈.这样就可以按照中右左压栈. 判断栈顶是否存在左右子节点, 不存在就出栈.若存在则判断其子节点是否如果栈, 如果入过则跳过.</p></li></ol><h2 id="二先序遍历">二、先序遍历</h2><h3 id="描述-4">1. 描述</h3><p>同之前中序遍历一样, 只不过在入栈之前就把根访问了.</p><h3 id="具体代码-4">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pre-order visit with stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderVisitWithStack</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br><span class="hljs-keyword">while</span> (!tempStack.isEmpty() || tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempNode.value + <span class="hljs-string">&quot; &quot;</span>);<br>tempStack.push(tempNode);<br>tempNode = tempNode.leftChild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNode = (BinaryCharTree) tempStack.pop();<br>tempNode = tempNode.rightChild;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br>&#125;<span class="hljs-comment">// Of preOrderVisitWithStack</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-2">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022417104824.png" /></p><h2 id="三后序遍历">三、后序遍历</h2><h3 id="描述-5">1. 描述</h3><p>可以观察到, 可以先求出遍历顺序是根右左的节点序列,再倒序，便刚好是后序遍历的顺序: 左右根. 而遍历顺序是根右左的话, 很好办,从前序遍历的代码中改两行就是了.</p><p>所以我们可以选用两个栈, 一个用于根右左遍历, 一个用于保存序列,最后的代码和前序遍历只是稍作几点修改即可.</p><h3 id="具体代码-5">2. 具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Post-order visit with stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrderVisitWithStack</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br><span class="hljs-type">ObjectStack</span> <span class="hljs-variable">tempOutputStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStack</span>();<br><br><span class="hljs-keyword">while</span> (!tempStack.isEmpty() || tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Store for output.</span><br>tempOutputStack.push(Character.valueOf(tempNode.value));<br>tempStack.push(tempNode);<br>tempNode = tempNode.rightChild;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNode = (BinaryCharTree) tempStack.pop();<br>tempNode = tempNode.leftChild;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-comment">// Now reverse output.</span><br><span class="hljs-keyword">while</span> (!tempOutputStack.isEmpty()) &#123;<br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempOutputStack.pop() + <span class="hljs-string">&quot; &quot;</span>);<br>&#125; <span class="hljs-comment">// Of while</span><br>&#125;<span class="hljs-comment">// Of postOrderVisitWithStack</span><br></code></pre></td></tr></table></figure><h3 id="运行截图-3">3. 运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022417110118.png" /></p><h1 id="总结">总结</h1><p>当我拿到一个问题的时候我首先想到的就是暴力破解, 就算我写的代码很烂,计算机还是能够给出我答案. 换个角度解决问题其实很值得我学习,等量代换就是一个很好的例子.</p><p>一道题不应该只能被暴力破解.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day12</title>
    <link href="/posts/6b5b286e/"/>
    <url>/posts/6b5b286e/</url>
    
    <content type="html"><![CDATA[<h2 id="使用具有通用性的队列">使用具有通用性的队列</h2><h3 id="一描述">一、描述</h3><p>之前使用的队列有两种: 存储二叉树节点的队列; 存储整数的队列. 这样的话,难道我们要为每种类型单独写一个队列? 这样显然没有充分利用代码的复用性.实际上, 我们只需要一个存储对象的队列就够啦!</p><p>这个问题在之前总结的时候就已经提到了.</p><ol type="1"><li><p>Java 里面, 所有的类均为 Object 类的 (直接或间接) 子类.如果不写就默认为直接子类. 例如</p><p>public class CircleObjectQueue;</p><p>等价于</p><p>public class CircleObjectQueue extends Object;</p></li><li><p>存储对象的队列, 实际上是存储对象的地址 (引用、指针). 因此,可以存储任何类的对象 (的引用).</p></li><li><p>可以通过强制类型转换将对象转成其本身的类别. 例如前面程序</p><p>tempTree = (BinaryCharTree) tempQueue.dequeue();</p><p>括号中的类型即表示强制类型转换.</p></li><li><p>Java 本身将 int, double, char 分别封装到 Integer, Double, Char类. 封装起来叫装包, 解析使用的时候叫拆包.</p></li></ol><h3 id="二具体代码">二、具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ********************</span><br><span class="hljs-comment"> * Convert the tree to data arrays, including a char array and an int array. The</span><br><span class="hljs-comment"> * results are stored in two member variables.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #valuesArray</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #indicesArray</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toDataArraysObjectQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Initialize arrays.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLength</span> <span class="hljs-operator">=</span> getNumNodes();<br><br>valuesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[tempLength];<br>indicesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempLength];<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// Traverse and convert at the same time.</span><br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br>tempQueue.enqueue(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempIntQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">tempIndexInteger</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">0</span>);<br>tempIntQueue.enqueue(tempIndexInteger);<br><br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTree</span> <span class="hljs-operator">=</span> (BinaryCharTree) tempQueue.dequeue();<br><span class="hljs-type">int</span> <span class="hljs-variable">tempIndex</span> <span class="hljs-operator">=</span> ((Integer) tempIntQueue.dequeue()).intValue();<br>System.out.println(<span class="hljs-string">&quot;tempIndex = &quot;</span> + tempIndex);<br><span class="hljs-keyword">while</span> (tempTree != <span class="hljs-literal">null</span>) &#123;<br>valuesArray[i] = tempTree.value;<br>indicesArray[i] = tempIndex;<br>i++;<br><br><span class="hljs-keyword">if</span> (tempTree.leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempQueue.enqueue(tempTree.leftChild);<br>tempIntQueue.enqueue(Integer.valueOf(tempIndex * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>));<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempTree.rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempQueue.enqueue(tempTree.rightChild);<br>tempIntQueue.enqueue(Integer.valueOf(tempIndex * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>));<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempTree = (BinaryCharTree) tempQueue.dequeue();<br><span class="hljs-keyword">if</span> (tempTree == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempIndex = ((Integer) tempIntQueue.dequeue()).intValue();<br>&#125; <span class="hljs-comment">// Of while</span><br>&#125;<span class="hljs-comment">// Of toDataArraysObjectQueue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTree</span> <span class="hljs-operator">=</span> manualConstructTree();<br>System.out.println(<span class="hljs-string">&quot;\r\nPreorder visit:&quot;</span>);<br>tempTree.preOrderVisit();<br>System.out.println(<span class="hljs-string">&quot;\r\nIn-order visit:&quot;</span>);<br>tempTree.inOrderVisit();<br>System.out.println(<span class="hljs-string">&quot;\r\nPost-order visit:&quot;</span>);<br>tempTree.postOrderVisit();<br><br>System.out.println(<span class="hljs-string">&quot;\r\n\r\nThe depth is: &quot;</span> + tempTree.getDepth());<br>System.out.println(<span class="hljs-string">&quot;The number of nodes is: &quot;</span> + tempTree.getNumNodes());<br><br>tempTree.toDataArrays();<br>System.out.println(<span class="hljs-string">&quot;The values are: &quot;</span> + Arrays.toString(tempTree.valuesArray));<br>System.out.println(<span class="hljs-string">&quot;The indices are: &quot;</span> + Arrays.toString(tempTree.indicesArray));<br><br>tempTree.toDataArraysObjectQueue();<br>System.out.println(<span class="hljs-string">&quot;Only object queue.&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;The values are: &quot;</span> + Arrays.toString(tempTree.valuesArray));<br>System.out.println(<span class="hljs-string">&quot;The indices are: &quot;</span> + Arrays.toString(tempTree.indicesArray));<br><br>&#125;<span class="hljs-comment">// Of main</span><br></code></pre></td></tr></table></figure><h3 id="三运行截图">三、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022415104456.png" /></p><h2 id="二叉树的建立">二叉树的建立</h2><h3 id="一描述-1">一、描述</h3><p>在之前我们获得了如何将二叉树存储起来的方法和代码,那么现在我们要做的工作就是把存储起来的数据还原为一颗完整的二叉树.简而言之就是二叉树存储的逆过程.</p><h3 id="二思考">二、思考</h3><p>因为根据二叉树的属性这里还是使用下标的特殊性. 总体上来说先构建根节点,然后按照每一层有一个最大序号构建当前层.</p><p>也可以脑中构建一个树, 然后想象把他们连接在一起.</p><h3 id="三具体实现">三、具体实现</h3><h4 id="过程">过程</h4><p>第一步将所有节点的值存储到一个数组中.</p><p>第二步是以子节点为基准来找它们的父节点.</p><p>第三步就是把得到的根节点赋值给当前二叉树.</p><p>为什么可以这么做呢？</p><p>因为父节点始终是在子节点前。那么循环外层是以子节点为基准就应该从 1开始, 因为 0 是毋庸置疑的根节点, 循环内部就是在子节点之前所有的节点,而对于满足公式的节点就是该节点的父节点,同时也可以知道是左节点还是右节点.</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The second constructor. The parameters must be correct since no validity</span><br><span class="hljs-comment"> * check is undertaken.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraDataArray    The array for data.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraIndicesArray The array for indices.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BinaryCharTree</span><span class="hljs-params">(<span class="hljs-type">char</span>[] paraDataArray, <span class="hljs-type">int</span>[] paraIndicesArray)</span> &#123;<br><span class="hljs-comment">// Step 1. Use a sequential list to store all nodes.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempNumNodes</span> <span class="hljs-operator">=</span> paraDataArray.length;<br>BinaryCharTree[] tempAllNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>[tempNumNodes];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempNumNodes; i++) &#123;<br>tempAllNodes[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(paraDataArray[i]);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 2. Link these nodes.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; tempNumNodes; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>System.out.println(<span class="hljs-string">&quot;indices &quot;</span> + paraIndicesArray[j] + <span class="hljs-string">&quot; vs. &quot;</span> + paraIndicesArray[i]);<br><span class="hljs-keyword">if</span> (paraIndicesArray[i] == paraIndicesArray[j] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>tempAllNodes[j].leftChild = tempAllNodes[i];<br>System.out.println(<span class="hljs-string">&quot;Linking &quot;</span> + j + <span class="hljs-string">&quot; with &quot;</span> + i);<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (paraIndicesArray[i] == paraIndicesArray[j] * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>) &#123;<br>tempAllNodes[j].rightChild = tempAllNodes[i];<br>System.out.println(<span class="hljs-string">&quot;Linking &quot;</span> + j + <span class="hljs-string">&quot; with &quot;</span> + i);<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 3. The root is the first node.</span><br>value = tempAllNodes[<span class="hljs-number">0</span>].value;<br>leftChild = tempAllNodes[<span class="hljs-number">0</span>].leftChild;<br>rightChild = tempAllNodes[<span class="hljs-number">0</span>].rightChild;<br>&#125;<span class="hljs-comment">// Of the the second constructor</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022415110713.png" /></p><h2 id="总结">总结</h2><p>很多代码关键的就那么一个步骤,不仅仅是这个还原二叉树和存储二叉树的公式, 还有更多例如动态规划转移方程.所以说编程的核心还是和数学有着很大关系.</p><p>代数和离散甚至于更多我没有接触过的领域都会在我未来的生活中指引我前进.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day11</title>
    <link href="/posts/f25279d4/"/>
    <url>/posts/f25279d4/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树的深度遍历的递归实现">二叉树的深度遍历的递归实现</h2><h3 id="一概述">一、概述</h3><p>利用递归遍历二叉树的时候有三种遍历顺序, 分别是先序、中序和后序.先后顺序是以根节点为基准的. 虽然看起来有三种,在实际编写代码的时候也只是递归位置的变换.</p><p>本文构造的二叉树如下图所示:</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022415091533.png" /></p><h3 id="二先序遍历">二、先序遍历</h3><h4 id="描述">描述</h4><p>先访问根节点, 然后递归访问左子树, 最后递归访问右子树.</p><h4 id="代码">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pre-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderVisit</span><span class="hljs-params">()</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.preOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.preOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of preOrderVisit</span><br></code></pre></td></tr></table></figure><h3 id="三中序遍历">三、中序遍历</h3><h4 id="描述-1">描述</h4><p>先递归访问左子树, 然后根节点, 最后递归访问右子树.</p><h4 id="代码-1">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * In-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrderVisit</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.inOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.inOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of inOrderVisit</span><br></code></pre></td></tr></table></figure><h3 id="四后序遍历">四、后序遍历</h3><h4 id="描述-2">描述</h4><p>先递归访问左子树, 然后递归访问右子树, 最后根节点.</p><h4 id="代码-2">代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Post-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrderVisit</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.postOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.postOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<span class="hljs-comment">// Of postOrderVisit</span><br></code></pre></td></tr></table></figure><h3 id="五树的深度和节点数">五、树的深度和节点数</h3><h4 id="思路">思路</h4><p>树的深度用递归思想来看就是左右子树深度较大的那部分加上根节点的深度.</p><p>那么节点数就更简单了,只需要在遍历的时候输出一个节点加上一个节点就可以了.</p><h4 id="树深度代码">树深度代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the depth of the binary tree.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The depth. It is 1 if there is only one node, i.e., the root.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDepth</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// It is a leaf.</span><br><span class="hljs-keyword">if</span> ((leftChild == <span class="hljs-literal">null</span>) &amp;&amp; (rightChild == <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth of the left child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeftDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempLeftDepth = leftChild.getDepth();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth of the right child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempRightDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempRightDepth = rightChild.getDepth();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth should increment by 1.</span><br><span class="hljs-keyword">if</span> (tempLeftDepth &gt;= tempRightDepth) &#123;<br><span class="hljs-keyword">return</span> tempLeftDepth + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> tempRightDepth + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of getDepth</span><br></code></pre></td></tr></table></figure><h4 id="树总节点数代码">树总节点数代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the number of nodes.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The number of nodes.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumNodes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// It is a leaf.</span><br><span class="hljs-keyword">if</span> ((leftChild == <span class="hljs-literal">null</span>) &amp;&amp; (rightChild == <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The number of nodes of the left child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeftNodes</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempLeftNodes = leftChild.getNumNodes();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The number of nodes of the right child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempRightNodes</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempRightNodes = rightChild.getNumNodes();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The total number of nodes.</span><br><span class="hljs-keyword">return</span> tempLeftNodes + tempRightNodes + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">// Of getNumNodes</span><br></code></pre></td></tr></table></figure><h3 id="六完整代码">六、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.tree;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Binary tree with char type elements.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryCharTree</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The value in char.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span> value;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The left child.</span><br><span class="hljs-comment"> */</span><br>BinaryCharTree leftChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The right child.</span><br><span class="hljs-comment"> */</span><br>BinaryCharTree rightChild;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The first constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraName The value.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BinaryCharTree</span><span class="hljs-params">(<span class="hljs-type">char</span> paraName)</span> &#123;<br>value = paraName;<br>leftChild = <span class="hljs-literal">null</span>;<br>rightChild = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of the constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Manually construct a tree. Only for testing.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BinaryCharTree <span class="hljs-title function_">manualConstructTree</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Construct a tree with only one node.</span><br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">resultTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><br><span class="hljs-comment">// Step 2. Construct all nodes. The first node is the root.</span><br><span class="hljs-comment">// BinaryCharTreeNode tempTreeA = resultTree.root;</span><br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeD</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;d&#x27;</span>);<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;e&#x27;</span>);<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeF</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;f&#x27;</span>);<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTreeG</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryCharTree</span>(<span class="hljs-string">&#x27;g&#x27;</span>);<br><br><span class="hljs-comment">// Step 3. Link all nodes.</span><br>resultTree.leftChild = tempTreeB;<br>resultTree.rightChild = tempTreeC;<br>tempTreeB.rightChild = tempTreeD;<br>tempTreeC.leftChild = tempTreeE;<br>tempTreeD.leftChild = tempTreeF;<br>tempTreeD.rightChild = tempTreeG;<br><br><span class="hljs-keyword">return</span> resultTree;<br>&#125;<span class="hljs-comment">// Of manualConstructTree</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pre-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderVisit</span><span class="hljs-params">()</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.preOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.preOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of preOrderVisit</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * In-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inOrderVisit</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.inOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.inOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of inOrderVisit</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Post-order visit.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrderVisit</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>leftChild.postOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>rightChild.postOrderVisit();<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + value + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<span class="hljs-comment">// Of postOrderVisit</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the depth of the binary tree.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The depth. It is 1 if there is only one node, i.e., the root.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDepth</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// It is a leaf.</span><br><span class="hljs-keyword">if</span> ((leftChild == <span class="hljs-literal">null</span>) &amp;&amp; (rightChild == <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth of the left child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeftDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempLeftDepth = leftChild.getDepth();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth of the right child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempRightDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempRightDepth = rightChild.getDepth();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The depth should increment by 1.</span><br><span class="hljs-keyword">if</span> (tempLeftDepth &gt;= tempRightDepth) &#123;<br><span class="hljs-keyword">return</span> tempLeftDepth + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> tempRightDepth + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of getDepth</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get the number of nodes.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The number of nodes.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumNodes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// It is a leaf.</span><br><span class="hljs-keyword">if</span> ((leftChild == <span class="hljs-literal">null</span>) &amp;&amp; (rightChild == <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The number of nodes of the left child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeftNodes</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempLeftNodes = leftChild.getNumNodes();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The number of nodes of the right child.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempRightNodes</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempRightNodes = rightChild.getNumNodes();<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// The total number of nodes.</span><br><span class="hljs-keyword">return</span> tempLeftNodes + tempRightNodes + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">// Of getNumNodes</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTree</span> <span class="hljs-operator">=</span> manualConstructTree();<br>System.out.println(<span class="hljs-string">&quot;\r\nPreorder visit:&quot;</span>);<br>tempTree.preOrderVisit();<br>System.out.println(<span class="hljs-string">&quot;\r\nIn-order visit:&quot;</span>);<br>tempTree.inOrderVisit();<br>System.out.println(<span class="hljs-string">&quot;\r\nPost-order visit:&quot;</span>);<br>tempTree.postOrderVisit();<br><br>System.out.println(<span class="hljs-string">&quot;\r\n\r\nThe depth is: &quot;</span> + tempTree.getDepth());<br>System.out.println(<span class="hljs-string">&quot;The number of nodes is: &quot;</span> + tempTree.getNumNodes());<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class BinaryCharTree</span><br></code></pre></td></tr></table></figure><h3 id="七运行截图">七、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022415091813.png" /></p><h2 id="二叉树的存储">二叉树的存储</h2><h3 id="一描述">一、描述</h3><p>二叉树的存储并非一个简单的问题. 引用 (指针)是无法存储到文件里面的.</p><p>当然要是不考虑复杂性的话, 我首选就是拿 XML 或者 JSON的文件格式来存储, 这不仅可以解决二叉树的存储问题,还能在一个文件里面实现多个二叉树的存储.但是如果二叉树的深度过高就会出现看起来很奇怪的文件格式.</p><p>我们可以完全满二叉树的角度广度优先遍历的角度来考虑这个问题:每个节点都有一个 name 及其在二叉树中的位置. 令根节点的位置为 0; 则第 2层节点的位置依次为 1 至 2; 第 3 层节点的位置依次为 3 至 6. 以此类推.</p><ol type="1"><li><p>空使用 0 来表示, 可以用一个向量来存储: [a, b, c, 0, d, e, 0, 0,0, f, g] 优点: 仅需要一个向量, 简单直接. 缺点: 对于实际的二叉树,很多子树为空, 导致大量的 0 值.</p></li><li><p>使用压缩存储方式, 即将节点的位置和值均存储. 可表示为两个向量: [0,1, 2, 4, 5, 9, 10] [a, b, c, d, e, f, g]</p></li></ol><p>为什么不在每个存在的节点后就直接存储它的位置呢？可能分类看起来要好看得多.</p><h3 id="二层序遍历">二、层序遍历</h3><p>因为从思考的方式来看就需要每层每层访问二叉树,这里就需要用到之前所学过的队列.</p><p>那么编写适合二叉树的队列, 具体代码如下. <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Circle Object queue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleObjectQueue</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The total space. One space can never be used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TOTAL_SPACE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br>Object[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The index of the head.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> head;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The index of the tail.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> tail;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The constructor</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleObjectQueue</span><span class="hljs-params">()</span> &#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[TOTAL_SPACE];<br>head = <span class="hljs-number">0</span>;<br>tail = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Enqueue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The value of the new node.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(Object paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> ((tail + <span class="hljs-number">1</span>) % TOTAL_SPACE == head) &#123;<br>System.out.println(<span class="hljs-string">&quot;Queue full.&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[tail % TOTAL_SPACE] = paraValue;<br>tail++;<br>&#125;<span class="hljs-comment">// Of enqueue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Dequeue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The value at the head.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (head == tail) &#123;<br><span class="hljs-comment">// System.out.println(&quot;No element in the queue&quot;);</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">Object</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> data[head % TOTAL_SPACE];<br><br>head++;<br><br><span class="hljs-keyword">return</span> resultValue;<br>&#125;<span class="hljs-comment">// Of dequeue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (head == tail) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> head; i &lt; tail; i++) &#123;<br>resultString += data[i % TOTAL_SPACE] + <span class="hljs-string">&quot;, &quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class CircleObjectQueue</span><br><br></code></pre></td></tr></table></figure></p><h3 id="三存储实现">三、存储实现</h3><h4 id="关键公式">关键公式</h4><p>需要注意的是</p><p>节点左儿子编号为: <span class="math display">\[leftNum = fatherNum \times 2 + 1\]</span></p><p>节点右儿子编号为: <span class="math display">\[rightNum = fatherNum \times 2 + 2\]</span></p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The values of nodes according to breadth first traversal.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] valuesArray;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The indices in the complete binary tree.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] indicesArray;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ********************</span><br><span class="hljs-comment"> * Convert the tree to data arrays, including a char array and an int array.</span><br><span class="hljs-comment"> * The results are stored in two member variables.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #valuesArray</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #indicesArray</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toDataArrays</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//Initialize arrays.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempLength</span> <span class="hljs-operator">=</span> getNumNodes();<br><br>valuesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[tempLength];<br>indicesArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[tempLength];<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//Traverse and convert at the same time.</span><br><span class="hljs-type">CircleObjectQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleObjectQueue</span>();<br>tempQueue.enqueue(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">CircleIntQueue</span> <span class="hljs-variable">tempIntQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleIntQueue</span>();<br>tempIntQueue.enqueue(<span class="hljs-number">0</span>);<br><br><span class="hljs-type">BinaryCharTree</span> <span class="hljs-variable">tempTree</span> <span class="hljs-operator">=</span> (BinaryCharTree) tempQueue.dequeue();<br><span class="hljs-type">int</span> <span class="hljs-variable">tempIndex</span> <span class="hljs-operator">=</span> tempIntQueue.dequeue();<br><span class="hljs-keyword">while</span> (tempTree != <span class="hljs-literal">null</span>) &#123;<br>valuesArray[i] = tempTree.value;<br>indicesArray[i] = tempIndex;<br>i++;<br><br><span class="hljs-keyword">if</span> (tempTree.leftChild != <span class="hljs-literal">null</span>) &#123;<br>tempQueue.enqueue(tempTree.leftChild);<br>tempIntQueue.enqueue(tempIndex * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempTree.rightChild != <span class="hljs-literal">null</span>) &#123;<br>tempQueue.enqueue(tempTree.rightChild);<br>tempIntQueue.enqueue(tempIndex * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempTree = (BinaryCharTree) tempQueue.dequeue();<br>tempIndex = tempIntQueue.dequeue();<br>&#125; <span class="hljs-comment">// Of while</span><br>&#125;<span class="hljs-comment">// Of toDataArrays</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022415095854.png" /></p><h2 id="总结">总结</h2><p>二叉树说实话, 至少在我遇到的项目中还很难使用到.大部分也只是对数据的处理, 对界面的设计. 在刷算法里面经常遇见,大概率是我层级太低.</p><p>一定一定要注意的是对树的判空.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day10</title>
    <link href="/posts/85554942/"/>
    <url>/posts/85554942/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串匹配">字符串匹配</h2><h3 id="一总述">一、总述</h3><p>String 是 Java 常用的类, 这里重新实现下部分功能. 对于 String这个类有着非常多的方法,本节内容就主要只实现字符串匹配子串和截取子串.</p><p>字符串匹配子串在 String 的原生方法里面是没有的,但是可以通过其他方法组合实现.</p><h3 id="二字符串匹配子串">二、字符串匹配子串</h3><h4 id="描述">描述</h4><p>匹配过程中有两个字符串, 一个叫做模式串, 一个叫做子串.我们所需要做的就是查看模式串中是否有子串,然后返回第一次出现子串的位置.</p><h4 id="输入">输入</h4><p>一个字符串</p><h4 id="输出">输出</h4><p>输入字符串第一次出现的位置, 若模式串中无子串则返回 -1</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Locate the position of a substring.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given substring.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The first position. -1 for no matching.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">locate</span><span class="hljs-params">(MyString paraMyString)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">tempMatch</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length - paraMyString.length + <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Initialize.</span><br>tempMatch = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraMyString.length; j++) &#123;<br><span class="hljs-keyword">if</span> (data[i + j] != paraMyString.data[j]) &#123;<br>tempMatch = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-keyword">if</span> (tempMatch) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">// Of locate</span><br></code></pre></td></tr></table></figure><h3 id="三截取字符串">三、截取字符串</h3><h4 id="描述-1">描述</h4><p>获取当前字符串第几位, 长度为几的字符子串. 需要注意的是,要对截取位置和长度进行是否越界的判断.</p><h4 id="输入-1">输入</h4><p>一个整数表示截取子串开始位置, 一个整数表示截取子串的长度.</p><h4 id="输出-1">输出</h4><p>根据输入所截取到的字符子串.</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get a substring</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString        The given substring.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStartPosition The start position in the original string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraLength        The length of the new string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The first position. -1 for no matching.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> MyString <span class="hljs-title function_">substring</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStartPosition, <span class="hljs-type">int</span> paraLength)</span> &#123;<br><span class="hljs-keyword">if</span> (paraStartPosition + paraLength &gt; length) &#123;<br>System.out.println(<span class="hljs-string">&quot;The bound is exceeded.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">MyString</span> <span class="hljs-variable">resultMyString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>();<br>resultMyString.length = paraLength;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>resultMyString.data[i] = data[paraStartPosition + i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultMyString;<br>&#125;<span class="hljs-comment">// Of substring</span><br></code></pre></td></tr></table></figure><h3 id="四完整代码">四、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * My string. String is a class provided by the language, so I use another name.</span><br><span class="hljs-comment"> * It is essentially a sequential list with char type elements.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyString</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The maximal length.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual length.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty char array.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyString</span><span class="hljs-params">()</span> &#123;<br>length = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[MAX_LENGTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct using a system defined string.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given string. Its length should not exceed MAX_LENGTH -</span><br><span class="hljs-comment"> *                   1.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyString</span><span class="hljs-params">(String paraString)</span> &#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[MAX_LENGTH];<br>length = paraString.length();<br><br><span class="hljs-comment">// Copy data.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>data[i] = paraString.charAt(i);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>resultString += data[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Locate the position of a substring.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given substring.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The first position. -1 for no matching.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">locate</span><span class="hljs-params">(MyString paraMyString)</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">tempMatch</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length - paraMyString.length + <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-comment">// Initialize.</span><br>tempMatch = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraMyString.length; j++) &#123;<br><span class="hljs-keyword">if</span> (data[i + j] != paraMyString.data[j]) &#123;<br>tempMatch = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for j</span><br><br><span class="hljs-keyword">if</span> (tempMatch) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">// Of locate</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Get a substring</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString        The given substring.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStartPosition The start position in the original string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraLength        The length of the new string.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The first position. -1 for no matching.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> MyString <span class="hljs-title function_">substring</span><span class="hljs-params">(<span class="hljs-type">int</span> paraStartPosition, <span class="hljs-type">int</span> paraLength)</span> &#123;<br><span class="hljs-keyword">if</span> (paraStartPosition + paraLength &gt; length) &#123;<br>System.out.println(<span class="hljs-string">&quot;The bound is exceeded.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">MyString</span> <span class="hljs-variable">resultMyString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>();<br>resultMyString.length = paraLength;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraLength; i++) &#123;<br>resultMyString.data[i] = data[paraStartPosition + i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultMyString;<br>&#125;<span class="hljs-comment">// Of substring</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">MyString</span> <span class="hljs-variable">tempFirstString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>(<span class="hljs-string">&quot;I like ik.&quot;</span>);<br><span class="hljs-type">MyString</span> <span class="hljs-variable">tempSecondString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>(<span class="hljs-string">&quot;ik&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> tempFirstString.locate(tempSecondString);<br>System.out.println(<span class="hljs-string">&quot;The position of \&quot;&quot;</span> + tempSecondString + <span class="hljs-string">&quot;\&quot; in \&quot;&quot;</span> + tempFirstString + <span class="hljs-string">&quot;\&quot; is: &quot;</span> + tempPosition);<br><br><span class="hljs-type">MyString</span> <span class="hljs-variable">tempThirdString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>(<span class="hljs-string">&quot;ki&quot;</span>);<br>tempPosition = tempFirstString.locate(tempThirdString);<br>System.out.println(<span class="hljs-string">&quot;The position of \&quot;&quot;</span> + tempThirdString + <span class="hljs-string">&quot;\&quot; in \&quot;&quot;</span> + tempFirstString + <span class="hljs-string">&quot;\&quot; is: &quot;</span> + tempPosition);<br><br>tempThirdString = tempFirstString.substring(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;The substring is: \&quot;&quot;</span> + tempThirdString + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br><br>tempThirdString = tempFirstString.substring(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>System.out.println(<span class="hljs-string">&quot;The substring is: \&quot;&quot;</span> + tempThirdString + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br><br>tempThirdString = tempFirstString.substring(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>System.out.println(<span class="hljs-string">&quot;The substring is: \&quot;&quot;</span> + tempThirdString + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125; <span class="hljs-comment">// Of class MyString</span><br></code></pre></td></tr></table></figure><h3 id="五运行截图">五、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022414100030.png" /></p><h2 id="小结">小结</h2><p><strong>一、面向对象与面向过程相比, 有哪些优势?</strong></p><p>面向对象的方法是对于类而言的, 更具有逻辑性和符合现实世界,这个也有点封装的意思在里面.但面向对象的其他特点在这些代码练习中并没有体现出来.也就是面向对象的继承和多态. 最终的目标就是实现代码的复用.</p><p><strong>二、比较顺序表和链表的异同.</strong></p><p>顺序表和链表都是线性表的一种, 唯一不同的就是存储方式的不同.简单来说就是连续和离散的差别.</p><p>当然因为存储方式的不同, 在内部具体实现的时间复杂度就不一样.</p><p>顺序表在添加和删除时平均都需要移动大量的数,而链表则只需要对一个节点做出修改. 在查找方面两者都需要遍历,要是顺序表遵循大小排序倒是可以用二分法降低查找的时间复杂度.</p><p><strong>三、分析顺序表和链表的优缺点.</strong>顺序表的初始内存是固定的, 如果数据量过多就需要新申请一段内容,把之前的数据拷贝过去. 如果一次删除过多数据, 多出来的空间会造成浪费.这样的唯一好处是可以直接取得某位的数组值.</p><p>链表的有点正是改进了顺序表的缺点, 而链表的缺点被顺序表改正.</p><p><strong>四、分析调试程序常见的问题及解决方案.</strong></p><p>考虑不完全所有需要测试的数据, 测试代码在主要文件内, 看起来冗余.提出单元测试的方法, 对测试代码新建一个文件并通过注解标明.</p><p><strong>五、分析链队列与循环队列的优缺点.</strong>链队列不用管理资源的分配与回收但, 循环队列则需要管理</p><p>唯一能区分优劣的点就是在链队列向操作系统申请内存和释放时会产生的部分时间开销.</p><p><strong>六、之前建立的两个队列, 其区别仅在于基础数据不同, 一个是 int,一个是 char. 按这种思路, 对于不同的基础数据类型, 都需要重写一个类,这样合理吗? 你想怎么样?</strong></p><p>当然不合理啊, 对于这种情况可以使用Java的范式接受所有类型的值.就算要重写一个类也应该用继承的方式来写两个不同的类.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day9</title>
    <link href="/posts/31c86276/"/>
    <url>/posts/31c86276/</url>
    
    <content type="html"><![CDATA[<h2 id="链队列">链队列</h2><h3 id="一描述">一、描述</h3><p>链队列比较容易写. 只要之前的链表增删改查没问题,那么这个链队列也不在话下.</p><h3 id="二思路">二、思路</h3><p>为方便操作, 空队列也需要一个节点. 这和以前的链表同理. 头节点的引用(指针) 称为 header. 也被称为带有头节点的链队列.所谓链队列入队仅操作尾部, 出队仅操作头部.换句话说就是只在头进行删除操作, 只在尾进行插入操作.</p><p>节点的结构如下: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The reference to the next node.</span><br><span class="hljs-comment"> */</span><br>Node next;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The data.</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br>data = paraValue;<br>next = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of the constructor</span><br>&#125;<span class="hljs-comment">// Of class Node</span><br></code></pre></td></tr></table></figure></p><h3 id="三入队操作">三、入队操作</h3><h4 id="输入">输入</h4><p>一个整数</p><h4 id="输出">输出</h4><p>无</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Enqueue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The value of the new node.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(paraValue);<br>tail.next = tempNode;<br>tail = tempNode;<br>&#125;<span class="hljs-comment">// Of enqueue</span><br></code></pre></td></tr></table></figure><h3 id="四出队操作">四、出队操作</h3><h4 id="输入-1">输入</h4><p>无</p><h4 id="输出-1">输出</h4><p>若队列不为空则输出一个数值</p><p>若队列为空先打印字符串 "No element in the queue" 再返回 -1</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Dequeue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The value at the header.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (header == tail) &#123;<br>System.out.println(<span class="hljs-string">&quot;No element in the queue&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> header.next.data;<br><br>header.next = header.next.next;<br><br><span class="hljs-comment">// The queue becomes empty.</span><br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br>tail = header;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> resultValue;<br>&#125;<span class="hljs-comment">// Of dequeue</span><br></code></pre></td></tr></table></figure><h3 id="五完整代码">五、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Linked queue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedQueue</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The reference to the next node.</span><br><span class="hljs-comment"> */</span><br>Node next;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The constructor.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The data.</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br>data = paraValue;<br>next = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of the constructor</span><br>&#125;<span class="hljs-comment">// Of class Node</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The header of the queue.</span><br><span class="hljs-comment"> */</span><br>Node header;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The tail of the queue.</span><br><span class="hljs-comment"> */</span><br>Node tail;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty sequential list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedQueue</span><span class="hljs-params">()</span> &#123;<br>header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(-<span class="hljs-number">1</span>);<br>tail = header;<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Enqueue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The value of the new node.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(paraValue);<br>tail.next = tempNode;<br>tail = tempNode;<br>&#125;<span class="hljs-comment">// Of enqueue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Dequeue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The value at the header.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (header == tail) &#123;<br>System.out.println(<span class="hljs-string">&quot;No element in the queue&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> header.next.data;<br><br>header.next = header.next.next;<br><br><span class="hljs-comment">// The queue becomes empty.</span><br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br>tail = header;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> resultValue;<br>&#125;<span class="hljs-comment">// Of dequeue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header.next;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>resultString += tempNode.data + <span class="hljs-string">&quot;, &quot;</span>;<br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">LinkedQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedQueue</span>();<br>System.out.println(<span class="hljs-string">&quot;Initialized, the list is: &quot;</span> + tempQueue.toString());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>tempQueue.enqueue(i + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;Enqueue, the queue is: &quot;</span> + tempQueue.toString());<br><br>tempQueue.dequeue();<br>System.out.println(<span class="hljs-string">&quot;Dequeue, the queue is: &quot;</span> + tempQueue.toString());<br><br><span class="hljs-type">int</span> tempValue;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>tempValue = tempQueue.dequeue();<br>System.out.println(<span class="hljs-string">&quot;Looped delete &quot;</span> + tempValue + <span class="hljs-string">&quot;, the new queue is: &quot;</span> + tempQueue.toString());<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>tempQueue.enqueue(i + <span class="hljs-number">10</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;Enqueue, the queue is: &quot;</span> + tempQueue.toString());<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class LinkedQueue</span><br></code></pre></td></tr></table></figure><h3 id="六运行截图">六、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022412175313.png" /></p><h2 id="循环队列">循环队列</h2><h3 id="一描述-1">一、描述</h3><p>乌洛波洛斯是传说中头衔自己尾巴的一条蛇, 象征着 "无限" "循环".由此来引出循环队列是再好不过的了.</p><p>想像操场跑道里放一队人, 循环的感觉就出来了.</p><p>跑道可能占满, 也有可能一部分学生在跑步,自然这些学生不同时间就会出现在不同位置. 像极了循环队列中元素的移动.</p><h3 id="二思路-1">二、思路</h3><h4 id="存储结构">存储结构</h4><p>对于队列中元素的存储可以选择顺序表, 当然也可以选择链表的结构.从示例代码来看这里选择的是顺序表, 简而言之就是数组.</p><p>循环队列首先应该考虑的就是循环的问题,求余的作用就是超过限度之后回到数组开头.</p><p>要是循环队列采用的是链表的结构呢？想必可能就不需要这个求余过程了.</p><p>用链式结构, 空间的分配与回收由系统做, 用循环队列, 则是自己把控.想像自己写的是操作系统,从这个代码可以感受下内存的管理（内存管理绝不是如此简单的一个过程）.</p><h4 id="关键操作">关键操作</h4><p>为了区分空队列与满队列, 需要留一个空间. 相当于不允许首尾相连.</p><p>当头和尾相同时队列为空, 那么此时判空表达式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">head == tail<br></code></pre></td></tr></table></figure><p>当尾下一个位置为头时队列为满, 那么此时判空表达式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(tail + <span class="hljs-number">1</span>) % TOTAL_SPACE == head<br></code></pre></td></tr></table></figure><h3 id="三入队操作-1">三、入队操作</h3><h4 id="输入-2">输入</h4><p>一个整数</p><h4 id="输出-2">输出</h4><p>若队列满则打印 "Queue full.", 返回空值</p><p>若队列未满只返回空值</p><h4 id="具体代码-2">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Enqueue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The value of the new node.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> ((tail + <span class="hljs-number">1</span>) % TOTAL_SPACE == head) &#123;<br>System.out.println(<span class="hljs-string">&quot;Queue full.&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[tail % TOTAL_SPACE] = paraValue;<br>tail++;<br>&#125;<span class="hljs-comment">// Of enqueue</span><br></code></pre></td></tr></table></figure><h3 id="四出队操作-1">四、出队操作</h3><h4 id="输入-3">输入</h4><p>无</p><h4 id="输出-3">输出</h4><p>若队列不为空则输出一个数值</p><p>若队列为空先打印字符串 "No element in the queue." 再返回 -1</p><h4 id="具体代码-3">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Dequeue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The value at the head.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (head == tail) &#123;<br>System.out.println(<span class="hljs-string">&quot;No element in the queue.&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> data[head % TOTAL_SPACE];<br><br>head++;<br><br><span class="hljs-keyword">return</span> resultValue;<br>&#125;<span class="hljs-comment">// Of dequeue</span><br></code></pre></td></tr></table></figure><h3 id="五完整代码-1">五、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Circle char queue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleIntQueue</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The total space. One space can never be used.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TOTAL_SPACE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The index for calculating the head. The actual head is head % TOTAL_SPACE.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> head;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The index for calculating the tail.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> tail;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The constructor</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleIntQueue</span><span class="hljs-params">()</span> &#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[TOTAL_SPACE];<br>head = <span class="hljs-number">0</span>;<br>tail = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Enqueue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The value of the new node.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> ((tail + <span class="hljs-number">1</span>) % TOTAL_SPACE == head) &#123;<br>System.out.println(<span class="hljs-string">&quot;Queue full.&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[tail % TOTAL_SPACE] = paraValue;<br>tail++;<br>&#125;<span class="hljs-comment">// Of enqueue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Dequeue.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The value at the head.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (head == tail) &#123;<br>System.out.println(<span class="hljs-string">&quot;No element in the queue.&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">resultValue</span> <span class="hljs-operator">=</span> data[head % TOTAL_SPACE];<br><br>head++;<br><br><span class="hljs-keyword">return</span> resultValue;<br>&#125;<span class="hljs-comment">// Of dequeue</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (head == tail) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> head; i &lt; tail; i++) &#123;<br>resultString += data[i % TOTAL_SPACE] + <span class="hljs-string">&quot;, &quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">CircleIntQueue</span> <span class="hljs-variable">tempQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleIntQueue</span>();<br>System.out.println(<span class="hljs-string">&quot;Initialized, the list is: &quot;</span> + tempQueue.toString());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>tempQueue.enqueue(i + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;Enqueue, the queue is: &quot;</span> + tempQueue.toString());<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempValue</span> <span class="hljs-operator">=</span> tempQueue.dequeue();<br>System.out.println(<span class="hljs-string">&quot;Dequeue &quot;</span> + tempValue + <span class="hljs-string">&quot;, the queue is: &quot;</span> + tempQueue.toString());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>tempQueue.enqueue(i + <span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-string">&quot;Enqueue, the queue is: &quot;</span> + tempQueue.toString());<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>tempValue = tempQueue.dequeue();<br>System.out.println(<span class="hljs-string">&quot;Dequeue &quot;</span> + tempValue + <span class="hljs-string">&quot;, the queue is: &quot;</span> + tempQueue.toString());<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>tempQueue.enqueue(i + <span class="hljs-number">100</span>);<br>System.out.println(<span class="hljs-string">&quot;Enqueue, the queue is: &quot;</span> + tempQueue.toString());<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125; <span class="hljs-comment">// Of class CircleIntQueue</span><br><br></code></pre></td></tr></table></figure><h3 id="六运行截图-1">六、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022413101435.png" /></p><h2 id="总结">总结</h2><p>队列呢在现实生活中真的比栈要常见得多了, 先来先到的概念深入人心.而在计算机的世界中我只能想到操作系统进程调度的先来先服务和消息队列.</p><p>总之, 伟大的算法或者数据结构和现实世界是息息相关的.毕竟计算机无非就是为了更好模拟现实世界, 然后尽可能地提高算力.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day8</title>
    <link href="/posts/46cf52e0/"/>
    <url>/posts/46cf52e0/</url>
    
    <content type="html"><![CDATA[<h2 id="栈的应用括号匹配">栈的应用（括号匹配）</h2><h3 id="一总述">一、总述</h3><p>操作系统的核心数据结构.准确来说操作系统不过是把硬件提供的功能抽象化了.</p><p>这次的代码通过检测括号的匹配来感受栈的实际运用. 尽管如此,要想体验到操作系统内部栈机制还是有很大差距. 不同 CPU 有不同压栈机制,在特权级切换时对不同进程的栈也各不相同.</p><h3 id="二任务描述">二、任务描述</h3><p>检查一个字符串的括号是否匹配. 所谓匹配,是指每个左括号有相应的一个右括号与之对应,且左括号不可以出现在右括号右边. 可以修改测试字符串,检查不同情况下的运行. 这里的括号包括 "()" "[]" "{}" 这三种.</p><h3 id="三处理思路">三、处理思路</h3><p>从左至右依次对每个字符扫描, 但是只有遇到括号时才进行处理.对于其他字符就直接丢弃.</p><p>遇到左括号就入栈, 遇到右括号就出栈与之匹配</p><p>一旦括号匹配不上就直接输出结果</p><p>当然如果匹配完有剩余左括号也不行, 此时可以用一个特殊字符 '#'来作栈底用来判断是否还有剩余左括号.</p><h3 id="四具体内容">四、具体内容</h3><h4 id="输入">输入</h4><p>一个字符串表达式, 如下所示 <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">[<span class="hljs-number">2</span> + <span class="hljs-comment">(1 - 3)</span>] * <span class="hljs-number">4</span><br><br><span class="hljs-comment">( )</span>  )<br><br><span class="hljs-comment">()</span><span class="hljs-comment">()</span><span class="hljs-comment">(()</span>)<br><br><span class="hljs-comment">(&#123;&#125;[])</span><br></code></pre></td></tr></table></figure></p><h4 id="输出">输出</h4><p>返回一个布尔值, 匹配成功返回 true , 匹配失败返回 false.</p><h4 id="函数代码">函数代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the bracket matching?</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given expression.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Match or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bracketMatching</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize the stack through pushing a &#x27;#&#x27; at the bottom.</span><br><span class="hljs-type">CharStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharStack</span>();<br>tempStack.push(<span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-type">char</span> tempChar, tempPopedChar;<br><br><span class="hljs-comment">// Step 2. Process the string. For a string, length() is a method</span><br><span class="hljs-comment">// instead of a member variable.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br>tempChar = paraString.charAt(i);<br><br><span class="hljs-keyword">switch</span> (tempChar) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>tempStack.push(tempChar);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// Do nothing.</span><br>&#125;<span class="hljs-comment">// Of switch</span><br>&#125; <span class="hljs-comment">// Of for</span><br><br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of bracketMatching</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022411094529.png" /></p><h3 id="五完整代码">五、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.stack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Char stack. I do not use Stack because it is already defined in Java.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharStack</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_DEPTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> depth;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty char stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CharStack</span><span class="hljs-params">()</span> &#123;<br>depth = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[MAX_DEPTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; depth; i++) &#123;<br>resultString += data[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Push an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraChar The given char.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">char</span> paraChar)</span> &#123;<br><span class="hljs-keyword">if</span> (depth == MAX_DEPTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;Stack full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[depth] = paraChar;<br>depth++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of push</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pop an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The popped char.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Nothing to pop.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">resultChar</span> <span class="hljs-operator">=</span> data[depth - <span class="hljs-number">1</span>];<br>depth--;<br><br><span class="hljs-keyword">return</span> resultChar;<br>&#125;<span class="hljs-comment">// Of pop</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the bracket matching?</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraString The given expression.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Match or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">bracketMatching</span><span class="hljs-params">(String paraString)</span> &#123;<br><span class="hljs-comment">// Step 1. Initialize the stack through pushing a &#x27;#&#x27; at the bottom.</span><br><span class="hljs-type">CharStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharStack</span>();<br>tempStack.push(<span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-type">char</span> tempChar, tempPopedChar;<br><br><span class="hljs-comment">// Step 2. Process the string. For a string, length() is a method</span><br><span class="hljs-comment">// instead of a member variable.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraString.length(); i++) &#123;<br>tempChar = paraString.charAt(i);<br><br><span class="hljs-keyword">switch</span> (tempChar) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>tempStack.push(tempChar);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// Do nothing.</span><br>&#125;<span class="hljs-comment">// Of switch</span><br>&#125; <span class="hljs-comment">// Of for</span><br><br>tempPopedChar = tempStack.pop();<br><span class="hljs-keyword">if</span> (tempPopedChar != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of bracketMatching</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">CharStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharStack</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; ch &lt; <span class="hljs-string">&#x27;m&#x27;</span>; ch++) &#123;<br>tempStack.push(ch);<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">char</span> tempChar;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>tempChar = tempStack.pop();<br>System.out.println(<span class="hljs-string">&quot;Poped: &quot;</span> + tempChar);<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-type">boolean</span> tempMatch;<br><span class="hljs-type">String</span> <span class="hljs-variable">tempExpression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[2 + (1 - 3)] * 4&quot;</span>;<br>tempMatch = bracketMatching(tempExpression);<br>System.out.println(<span class="hljs-string">&quot;Is the expression &quot;</span> + tempExpression + <span class="hljs-string">&quot; bracket matching? &quot;</span> + tempMatch);<br><br>tempExpression = <span class="hljs-string">&quot;( )  )&quot;</span>;<br>tempMatch = bracketMatching(tempExpression);<br>System.out.println(<span class="hljs-string">&quot;Is the expression &quot;</span> + tempExpression + <span class="hljs-string">&quot; bracket matching? &quot;</span> + tempMatch);<br><br>tempExpression = <span class="hljs-string">&quot;()()(())&quot;</span>;<br>tempMatch = bracketMatching(tempExpression);<br>System.out.println(<span class="hljs-string">&quot;Is the expression &quot;</span> + tempExpression + <span class="hljs-string">&quot; bracket matching? &quot;</span> + tempMatch);<br><br>tempExpression = <span class="hljs-string">&quot;(&#123;&#125;[])&quot;</span>;<br>tempMatch = bracketMatching(tempExpression);<br>System.out.println(<span class="hljs-string">&quot;Is the expression &quot;</span> + tempExpression + <span class="hljs-string">&quot; bracket matching? &quot;</span> + tempMatch);<br><br>tempExpression = <span class="hljs-string">&quot;)(&quot;</span>;<br>tempMatch = bracketMatching(tempExpression);<br>System.out.println(<span class="hljs-string">&quot;Is the expression &quot;</span> + tempExpression + <span class="hljs-string">&quot; bracket matching? &quot;</span> + tempMatch);<br><br>&#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of CharStack</span><br></code></pre></td></tr></table></figure><h2 id="递归">递归</h2><h3 id="一总述-1">一、总述</h3><p>用两个例子来介绍递归, 一个是求整数和 sumToN ,另一个则是非常经典的斐波那契数列.</p><p>递归从大角度看就是得出结果的最后一步, 但这毕竟是函数不是一个确定的值,所以我们需要做的就是将大步骤化成有一个确定数值的小步骤.</p><p>这么看来递归就是一个出口的确切数值加上最后一步的表达式.</p><h3 id="二思考">二、思考</h3><p>对于 sumToN 来说, 出口值就是0, 表达式是 $ sumToN(paraN - 1) + paraN$.</p><p>对于斐波那契数列, 出口值为1, 表达式是 $ fibonacci(paraN - 1) +fibonacci(paraN - 2) $</p><p>当然在函数中还需要处理非法输入.</p><h3 id="三具体内容">三、具体内容</h3><h4 id="函数名">函数名</h4><p>sumToN(int paraN)</p><h4 id="输入-1">输入</h4><p>一个整数</p><h4 id="输出-1">输出</h4><p>1 至该输入的所有整数之和</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Sum to N. No loop, however a stack is used.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumToN</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> sumToN(paraN - <span class="hljs-number">1</span>) + paraN;<br>&#125;<span class="hljs-comment">// Of sumToN</span><br></code></pre></td></tr></table></figure><hr /><h4 id="函数名-1">函数名</h4><p>fibonacci(int paraN)</p><h4 id="输入-2">输入</h4><p>一个整数, 代表数列中第几位</p><h4 id="输出-2">输出</h4><p>数列中输入整数位的数值</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Fibonacci sequence.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Negative values are invalid. Index 0 corresponds to the first element 0.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (paraN == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> fibonacci(paraN - <span class="hljs-number">1</span>) + fibonacci(paraN - <span class="hljs-number">2</span>);<br>&#125;<span class="hljs-comment">// Of fibonacci</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022411103602.png" /></p><h4 id="改进算法">改进算法</h4><p>上面的解法无非是常规套路,在求斐波那契数列高位的时候就会出现非常耗时的情况,甚至会出现栈溢出的错误.这是因为在递归过程中它的次数是以指数级别增长.</p><p>为了体现递归的思想这里我采用尾递归的方式,实际上简化为了一般函数的调用过程.</p><h4 id="函数名-2">函数名</h4><p>fibonacci_new(int paraN, int paraPre, int paraCur)</p><h4 id="输入-3">输入</h4><p>三个整数分别为数列第几位, 数列前一个数的值, 数列当前数的值</p><h4 id="输出-3">输出</h4><p>数列中输入整数位的数值</p><h4 id="具体代码-2">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Fibonacci sequence.Tail recursion</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN   The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPre The previous value in fibonacci sequence.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraCur The current value in fibonacci sequence.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci_new</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN, <span class="hljs-type">int</span> paraPre, <span class="hljs-type">int</span> paraCur)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Negative values are invalid. Index 0 corresponds to the first element 0.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (paraN == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> paraCur;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> fibonacci_new(paraN - <span class="hljs-number">1</span>, paraCur, paraPre + paraCur);<br>&#125;<span class="hljs-comment">// Of fibonacci_new</span><br></code></pre></td></tr></table></figure><h4 id="对比图">对比图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022411110355.png" /></p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022411111235.png" /></p><h3 id="四完整代码">四、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Recursion. A method can (directly or indirectly) invoke itself. The system</span><br><span class="hljs-comment"> * automatically creates a stack for it.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recursion</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Sum to N. No loop, however a stack is used.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumToN</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> sumToN(paraN - <span class="hljs-number">1</span>) + paraN;<br>&#125;<span class="hljs-comment">// Of sumToN</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Fibonacci sequence.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Negative values are invalid. Index 0 corresponds to the first element 0.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (paraN == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> fibonacci(paraN - <span class="hljs-number">1</span>) + fibonacci(paraN - <span class="hljs-number">2</span>);<br>&#125;<span class="hljs-comment">// Of fibonacci</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Fibonacci sequence.Tail recursion</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN   The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPre The previous value in fibonacci sequence.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraCur The current value in fibonacci sequence.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci_new</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN, <span class="hljs-type">int</span> paraPre, <span class="hljs-type">int</span> paraCur)</span> &#123;<br><span class="hljs-keyword">if</span> (paraN &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// Negative values are invalid. Index 0 corresponds to the first element 0.</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (paraN == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// Basis.</span><br><span class="hljs-keyword">return</span> paraCur;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">return</span> fibonacci_new(paraN - <span class="hljs-number">1</span>, paraCur, paraPre + paraCur);<br>&#125;<span class="hljs-comment">// Of fibonacci_new</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>System.out.println(<span class="hljs-string">&quot;0 sum to &quot;</span> + tempValue + <span class="hljs-string">&quot; = &quot;</span> + sumToN(tempValue));<br>tempValue = -<span class="hljs-number">1</span>;<br>System.out.println(<span class="hljs-string">&quot;0 sum to &quot;</span> + tempValue + <span class="hljs-string">&quot; = &quot;</span> + sumToN(tempValue));<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;Fibonacci &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span> + fibonacci(i));<br><span class="hljs-comment">//System.out.println(&quot;Fibonacci_new &quot; + i + &quot;: &quot; + fibonacci_new(i, 0, 1));</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;Execute time is: &quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot; ms&quot;</span>);<br>&#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of class Recursion</span><br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>无论是括号匹配还是递归代码, 一定都是先有思路然后再进行雕琢.思考的过程不能少, 不能拿到需求就直接 main 和 print.</p><p>其次是斐波那契数列, 除了尾递归的方法还有用数组存储进行递推操作.要是数学功底好还可以用矩阵快速幂进行计算. 不过这些离递归思想太远,在这里就不细说了.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day7</title>
    <link href="/posts/d6704f71/"/>
    <url>/posts/d6704f71/</url>
    
    <content type="html"><![CDATA[<h2 id="链表">链表</h2><h3 id="一总述">一、总述</h3><p>链表是由多个相同的节点链接形成的, 在C语言中用结构体来表示,在Java中则用一个类来表示.</p><p>C语言中使用指针直接访问节点, 访问的同时实际对内存也有了读写的属性,不稍加注意就会出现错误. 而在Java中就不会出现这种情况.</p><p>链表与顺序表在插入、删除时的不同: 前者不移动元素, 只改变引用(指针).</p><h3 id="二链表初始化">二、链表初始化</h3><h4 id="描述">描述</h4><p>生成的是一个带有头节点的单链表</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty linked list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br></code></pre></td></tr></table></figure><h3 id="三查找元素">三、查找元素</h3><h4 id="描述-1">描述</h4><p>查找给定数值元素的位置. 找不到就返回 -1.</p><h4 id="输入">输入</h4><p>一个整数, 如下所示 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure></p><h4 id="输出">输出</h4><p>若链表中存在该输入整数则返回第一次出现时的链表中的序号,若不存在则返回 -1. 如下所示 <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">input <span class="hljs-number">3</span><br>head -&gt; <span class="hljs-number">1</span> -&gt; <span class="hljs-number">3</span> -&gt; <span class="hljs-number">4</span> -&gt; <span class="hljs-literal">null</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Locate the given value. If it appears in multiple positions, simply return</span><br><span class="hljs-comment"> * the first one.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The position. -1 for not found.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">locate</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header.next;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempCurrentPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode.data == paraValue) &#123;<br>tempPosition = tempCurrentPosition;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>tempCurrentPosition++;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> tempPosition;<br>&#125;<span class="hljs-comment">// Of locate</span><br></code></pre></td></tr></table></figure><h3 id="四插入元素">四、插入元素</h3><h4 id="描述-2">描述</h4><p>在给定位置增加元素. 如果位置不在已有位置范围之内, 就拒绝增加.</p><h4 id="输入-1">输入</h4><p>两个整数一个表示插入位置, 另一个表示需要插入的元素. <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>==&gt; paraPosition<br><span class="hljs-symbol">4 </span>==&gt; paraValue<br></code></pre></td></tr></table></figure></p><h4 id="输出-1">输出</h4><p>返回一个布尔值, 增加成功返回 true , 增加失败返回 false.</p><h4 id="具体代码-2">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Insert a value to a position. If the list is already full, do nothing.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue    The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition, <span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header;<br>Node tempNewNode;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraPosition; i++) &#123;<br><span class="hljs-keyword">if</span> (tempNode.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is illegal.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Construct a new node.</span><br>tempNewNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(paraValue);<br><br><span class="hljs-comment">// Now link them.</span><br>tempNewNode.next = tempNode.next;<br>tempNode.next = tempNewNode;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of insert</span><br></code></pre></td></tr></table></figure><h3 id="五删除元素">五、删除元素</h3><h4 id="描述-3">描述</h4><p>删除给定位置的元素. 要处理给定位置不合法的情况.该位置必须是已经有数据的.</p><h4 id="输入-2">输入</h4><p>一个整数表示删除位置</p><h4 id="输出-2">输出</h4><p>返回一个布尔值, 删除成功返回 true , 删除失败返回 false.</p><h4 id="具体代码-3">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Delete a value at a position.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition)</span> &#123;<br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Cannot delete element from an empty list.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraPosition; i++) &#123;<br><span class="hljs-keyword">if</span> (tempNode.next.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is illegal.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>tempNode.next = tempNode.next.next;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of delete</span><br></code></pre></td></tr></table></figure><h3 id="六完整代码">六、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.list;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Linked List</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An inner class.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The reference to the next node.</span><br><span class="hljs-comment"> */</span><br>Node next;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> * The constructor</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The data.</span><br><span class="hljs-comment"> ******************* </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br>data = paraValue;<br>next = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of the constructor</span><br>&#125;<span class="hljs-comment">// Of class Node</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The header node. The data is never used.</span><br><span class="hljs-comment"> */</span><br>Node header;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty linked list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">0</span>);<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header.next;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br>resultString += tempNode.data + <span class="hljs-string">&quot;, &quot;</span>;<br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Reset to empty. Free the space through garbage collection.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>header.next = <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-comment">// Of reset</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Locate the given value. If it appears in multiple positions, simply return</span><br><span class="hljs-comment"> * the first one.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The position. -1 for not found.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">locate</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header.next;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempCurrentPosition</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (tempNode != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (tempNode.data == paraValue) &#123;<br>tempPosition = tempCurrentPosition;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>tempCurrentPosition++;<br>&#125; <span class="hljs-comment">// Of while</span><br><br><span class="hljs-keyword">return</span> tempPosition;<br>&#125;<span class="hljs-comment">// Of locate</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Insert a value to a position. If the list is already full, do nothing.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue    The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition, <span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header;<br>Node tempNewNode;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraPosition; i++) &#123;<br><span class="hljs-keyword">if</span> (tempNode.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is illegal.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Construct a new node.</span><br>tempNewNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(paraValue);<br><br><span class="hljs-comment">// Now link them.</span><br>tempNewNode.next = tempNode.next;<br>tempNode.next = tempNewNode;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of insert</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Delete a value at a position.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition)</span> &#123;<br><span class="hljs-keyword">if</span> (header.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Cannot delete element from an empty list.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">Node</span> <span class="hljs-variable">tempNode</span> <span class="hljs-operator">=</span> header;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraPosition; i++) &#123;<br><span class="hljs-keyword">if</span> (tempNode.next.next == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is illegal.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>tempNode = tempNode.next;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>tempNode.next = tempNode.next.next;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of delete</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">LinkedList</span> <span class="hljs-variable">tempFirstList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>System.out.println(<span class="hljs-string">&quot;Initialized, the list is: &quot;</span> + tempFirstList.toString());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>tempFirstList.insert(<span class="hljs-number">0</span>, i);<br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;Inserted, the list is: &quot;</span> + tempFirstList.toString());<br><br>tempFirstList.insert(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>);<br><br>tempFirstList.delete(<span class="hljs-number">4</span>);<br><br>tempFirstList.delete(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;Deleted, the list is: &quot;</span> + tempFirstList.toString());<br><br>tempFirstList.delete(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;Deleted, the list is: &quot;</span> + tempFirstList.toString());<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>tempFirstList.delete(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;Looped delete, the list is: &quot;</span> + tempFirstList.toString());<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125;<span class="hljs-comment">// Of class LinkedList</span><br></code></pre></td></tr></table></figure><h3 id="七运行截图">七、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022410175022.png" /></p><h2 id="栈">栈</h2><h3 id="一总述-1">一、总述</h3><p>栈作为一种数据结构不仅仅出现在当前需求中.在计算机底层也少不了栈的使用. 通常编程中栈的增长方向是从下往上,在计算机底层中栈的增长是从上往下.</p><p>两者都有一个共同的特点那就是栈需要遵守的属性是后进先出,入栈（push）和出栈（pop）操作只能在栈顶执行.</p><h3 id="二入栈">二、入栈</h3><h4 id="描述-4">描述</h4><p>向栈中添加一个元素.</p><h4 id="输入-3">输入</h4><p>一个整数</p><h4 id="输出-3">输出</h4><p>返回一个布尔值, 入栈成功返回 true , 入栈失败返回 false.</p><h4 id="具体代码-4">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Push an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraChar The given char.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">char</span> paraChar)</span> &#123;<br><span class="hljs-keyword">if</span> (depth == MAX_DEPTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;Stack full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[depth] = paraChar;<br>depth++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of push</span><br></code></pre></td></tr></table></figure><h3 id="三出栈">三、出栈</h3><h4 id="描述-5">描述</h4><p>从栈顶去除一个元素.</p><h4 id="输入-4">输入</h4><p>无</p><h4 id="输出-4">输出</h4><p>返回一个char值为之前的栈顶元素, 若栈为空则返回 '\0'</p><h4 id="具体代码-5">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pop an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The popped char.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Nothing to pop.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">resultChar</span> <span class="hljs-operator">=</span> data[depth - <span class="hljs-number">1</span>];<br>depth--;<br><br><span class="hljs-keyword">return</span> resultChar;<br>&#125;<span class="hljs-comment">// Of pop</span><br></code></pre></td></tr></table></figure><h3 id="四完整代码">四、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.stack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Char stack. I do not use Stack because it is already defined in Java.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharStack</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_DEPTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual depth.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> depth;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">char</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty char stack.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CharStack</span><span class="hljs-params">()</span> &#123;<br>depth = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[MAX_DEPTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; depth; i++) &#123;<br>resultString += data[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Push an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraChar The given char.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">char</span> paraChar)</span> &#123;<br><span class="hljs-keyword">if</span> (depth == MAX_DEPTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;Stack full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>data[depth] = paraChar;<br>depth++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of push</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Pop an element.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The popped char.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Nothing to pop.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">resultChar</span> <span class="hljs-operator">=</span> data[depth - <span class="hljs-number">1</span>];<br>depth--;<br><br><span class="hljs-keyword">return</span> resultChar;<br>&#125;<span class="hljs-comment">// Of pop</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">CharStack</span> <span class="hljs-variable">tempStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharStack</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; ch &lt; <span class="hljs-string">&#x27;m&#x27;</span>; ch++) &#123;<br>tempStack.push(ch);<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for ch</span><br><br><span class="hljs-type">char</span> tempChar;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>tempChar = tempStack.pop();<br>System.out.println(<span class="hljs-string">&quot;Poped: &quot;</span> + tempChar);<br>System.out.println(<span class="hljs-string">&quot;The current stack is: &quot;</span> + tempStack);<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of main</span><br>&#125;<span class="hljs-comment">// Of CharStack</span><br><br></code></pre></td></tr></table></figure><h3 id="五运行截图">五、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022410182852.png" /></p><h2 id="总结">总结</h2><p>无论是链表还是栈, 都不过是对数据的特定存储和处理.不同的数据结构为的是解决不同的问题.</p><p>结合之前的内容无非就是增删改查. 根据之前学习C语言的经验,对于栈的函数应该还可以增加获取当前栈顶元素而不需要出栈,或者查找栈中元素.</p><p>仔细想想栈就是一个特殊一点的数组罢了.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day6</title>
    <link href="/posts/a1777fe7/"/>
    <url>/posts/a1777fe7/</url>
    
    <content type="html"><![CDATA[<h2 id="总述">总述</h2><p>在《数据结构》中, 使用“抽象数据类型”来描述不同的数据结构.在《面向对象程序设计》中, 用对象来存储数据及其上的操作. 我认为,它们的本质都是相同的，都是把具体的事物抽象化.但数据结构更注重事物之间的联系, 面向对象则更注重本身属性。</p><h3 id="一对象">一、对象</h3><p>数据及其上操作的总和.</p><p>例如, 我是一个对象, 具有身高、体重、年龄、跑步速度等数据;同时，我具有吃饭、睡觉、送快递等功能.</p><p>从计算机的发展来看.</p><p>第一阶段以操作 (函数) 为中心, 一个计算导弹轨迹的函数,根据不同输入获得不同输出. 这属于面向过程.</p><p>第二阶段以数据为中心, 即数据存放于数据库, 使用不同的算法来处理它.这属于面向数据.</p><p>第三阶段认为数据及其上的操作是统一不可分的, 这就到了面向对象.</p><h3 id="二类">二、类</h3><p>前面已经使用过 int i; 这类代码, int 就是类型, i 是一个具体的整数变量.同理, 对象就是属于某种类的变量. 也可以用集合的方式来理解: 类是集合,对象是其中的元素; int 是指所有整数的集合, i 是其中的一个元素.</p><h3 id="三包">三、包</h3><p>包并非程序设计必须的东西, 其作用仅仅是将类进行合理的组织. 但是,在计算机界, 往往这种可有可无的东西才是最重要的. 如文档、注释、编码规范.可有可无是针对程序的运行而言, 其核心是计算机;而重要是针对程序的易读性、可维护性而言, 其核心是程序员.</p><h3 id="四编码规范">四、编码规范</h3><p>常量用 final 修饰. 这里故意把 MAX_LENGTH 设置得比较少,方便调拭后面的越界检查代码.</p><p>用 new 生成新的对象.</p><p>有一个成员变量叫做 length. 程序里还有用 length表示一个整数数组的长度. 实际上, 同一个变量名可以被不同的类所使用.</p><p>toString 这个方法很特殊, 它覆盖了 Object 类的相应方法. 可以看到, 在println 里面使用 tempFirstList 时, 由于是用另一个字符串与其相加,系统会自动调用 tempFirstList.toString().</p><h2 id="顺序表">顺序表</h2><p>把逻辑上相邻的结点储存在物理位置上的相邻储存单元中,结点的逻辑关系由储存单元的邻接关系来体现.</p><p>通俗来讲, 顺序表就是把线性表中的所有元素按照其逻辑顺序,依次储存到从指定的储存位置开始的一块连续的储存空间中.</p><p>第一个元素的储存位置就是指定的储存位置, 第 i+1 个元素的储存位置在第 i个元素后面.</p><h2 id="顺序表一">顺序表（一）</h2><h3 id="示例要求">示例要求</h3><p>1.编写顺序表的两个构造函数. 一个参数为空, 另一个参数为 int数组并用其初始化顺序表.</p><p>2.重写顺序表的 toString 方法</p><h3 id="具体代码">具体代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.list;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SequentialList</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequentialList</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The maximal length of the list. It is a constant.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual length not exceeding MAX_LENGTH. Attention: length is not only</span><br><span class="hljs-comment"> * the member variable of Sequential list, but also the member variable of</span><br><span class="hljs-comment"> * Array. In fact, a name can be the member variable of different classes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data stored in an array.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty sequential list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SequentialList</span><span class="hljs-params">()</span> &#123;<br>length = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAX_LENGTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct a sequential list using an array.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraArray</span><br><span class="hljs-comment"> *            The given array. Its length should not exceed MAX_LENGTH. For</span><br><span class="hljs-comment"> *            simplicity now we do not check it.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SequentialList</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraArray)</span> &#123;<br><span class="hljs-built_in">this</span>.data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAX_LENGTH];<br><span class="hljs-built_in">this</span>.length = paraArray.length;<br><br><span class="hljs-comment">// Copy data.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraArray.length; i++) &#123;<br><span class="hljs-built_in">this</span>.data[i] = paraArray[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.length == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length - <span class="hljs-number">1</span>; i++) &#123;<br>resultString += data[i] + <span class="hljs-string">&quot;, &quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>resultString += data[<span class="hljs-built_in">this</span>.length - <span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Reset to empty.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.length = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// Of reset</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment"> *            Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span>[] tempArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">SequentialList</span> <span class="hljs-variable">tempFirstList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequentialList</span>(tempArray);<br>System.out.println(<span class="hljs-string">&quot;Initialized, the list is: &quot;</span> + tempFirstList.toString());<br>System.out.println(<span class="hljs-string">&quot;Again, the list is: &quot;</span> + tempFirstList);<br><br>tempFirstList.reset();<br>System.out.println(<span class="hljs-string">&quot;After reset, the list is: &quot;</span> + tempFirstList);<br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125;<span class="hljs-comment">// Of class SequentialList</span><br></code></pre></td></tr></table></figure><h3 id="运行截图">运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022410094834.png" /></p><h3 id="注意事项">注意事项</h3><p>尽量保证类中变量为私有, 提高其安全性.</p><p>当类中变量名可能出现重复时尽量使用 this 关键字进行指明.</p><p>在重写函数的时候需要在函数名上一行写上 <span class="citation"data-cites="Override">@Override</span> 用以注明.</p><h2 id="顺序表二">顺序表（二）</h2><h3 id="一示例要求">一、示例要求</h3><p>在顺序表（一）的基础上进行修改.</p><h3 id="二查找元素">二、查找元素</h3><h4 id="描述">描述</h4><p>查找给定数值元素的位置. 找不到就返回 -1.</p><h4 id="输入">输入</h4><p>一个整数, 如下所示 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure></p><h4 id="输出">输出</h4><p>若顺序表中存在该输入整数则返回第一次出现时的下标, 若不存在则返回-1</p><h4 id="方法代码">方法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Find the index of the given value. If it appears in multiple positions,</span><br><span class="hljs-comment"> * simply return the first one.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The position. -1 for not found.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><span class="hljs-keyword">if</span> (data[i] == paraValue) &#123;<br>tempPosition = i;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> tempPosition;<br>&#125;<span class="hljs-comment">// Of indexOf</span><br></code></pre></td></tr></table></figure><h3 id="三增加元素">三、增加元素</h3><h4 id="描述-1">描述</h4><p>在给定位置增加元素. 如果顺序表已满, 或位置不在已有位置范围之内,就拒绝增加. 该位置可以是在最后一个元素之后一个.</p><h4 id="输入-1">输入</h4><p>两个整数一个表示插入位置, 另一个表示需要插入的元素. <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>==&gt; paraPosition<br><span class="hljs-symbol">4 </span>==&gt; paraValue<br></code></pre></td></tr></table></figure></p><h4 id="输出-1">输出</h4><p>返回一个布尔值, 增加成功返回 true , 增加失败返回 false.</p><h4 id="方法代码-1">方法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Insert a value to a position. If the list is already full, do nothing.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue    The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition, <span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> (length == MAX_LENGTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;List full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> ((paraPosition &lt; <span class="hljs-number">0</span>) || (paraPosition &gt; length)) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is out of bounds.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// From tail to head. The last one is moved to a new position. Because length &lt;</span><br><span class="hljs-comment">// MAX_LENGTH, no exceeding occurs.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> length; i &gt; paraPosition; i--) &#123;<br>data[i] = data[i - <span class="hljs-number">1</span>];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>data[paraPosition] = paraValue;<br>length++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of insert</span><br></code></pre></td></tr></table></figure><h3 id="四删除元素">四、删除元素</h3><h4 id="描述-2">描述</h4><p>删除给定位置的元素. 要处理给定位置不合法的情况.该位置必须是已经有数据的.</p><h4 id="输入-2">输入</h4><p>一个整数表示删除位置</p><h4 id="输出-2">输出</h4><p>返回一个布尔值, 删除成功返回 true , 删除失败返回 false.</p><h4 id="方法代码-2">方法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Delete a value at a position.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition)</span> &#123;<br><span class="hljs-keyword">if</span> ((paraPosition &lt; <span class="hljs-number">0</span>) || (paraPosition &gt;= length)) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is out of bounds.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// From head to tail.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> paraPosition; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>data[i] = data[i + <span class="hljs-number">1</span>];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>length--;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of delete</span><br></code></pre></td></tr></table></figure><h3 id="五完整代码">五、完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datastructure.list;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SequentialList</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen Email:wshysxcc@outlook.com</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequentialList</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The maximal length of the list. It is a constant.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_LENGTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The actual length not exceeding MAX_LENGTH. Attention: length is not only the</span><br><span class="hljs-comment"> * member variable of Sequential list, but also the member variable of Array. In</span><br><span class="hljs-comment"> * fact, a name can be the member variable of different classes.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> length;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The data stored in an array.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct an empty sequential list.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SequentialList</span><span class="hljs-params">()</span> &#123;<br>length = <span class="hljs-number">0</span>;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAX_LENGTH];<br>&#125;<span class="hljs-comment">// Of the first constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Construct a sequential list using an array.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraArray The given array. Its length should not exceed MAX_LENGTH.</span><br><span class="hljs-comment"> *                  For simplicity now we do not check it.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SequentialList</span><span class="hljs-params">(<span class="hljs-type">int</span>[] paraArray)</span> &#123;<br><span class="hljs-built_in">this</span>.data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[MAX_LENGTH];<br><span class="hljs-built_in">this</span>.length = paraArray.length;<br><br><span class="hljs-comment">// Copy data.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraArray.length; i++) &#123;<br><span class="hljs-built_in">this</span>.data[i] = paraArray[i];<br>&#125; <span class="hljs-comment">// Of for i</span><br>&#125;<span class="hljs-comment">// Of the second constructor</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Overrides the method claimed in Object, the superclass of any class.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.length == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length - <span class="hljs-number">1</span>; i++) &#123;<br>resultString += data[i] + <span class="hljs-string">&quot;, &quot;</span>;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>resultString += data[<span class="hljs-built_in">this</span>.length - <span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">return</span> resultString;<br>&#125;<span class="hljs-comment">// Of toString</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Reset to empty.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.length = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// Of reset</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Find the index of the given value. If it appears in multiple positions,</span><br><span class="hljs-comment"> * simply return the first one.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The position. -1 for not found.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br><span class="hljs-keyword">if</span> (data[i] == paraValue) &#123;<br>tempPosition = i;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> tempPosition;<br>&#125;<span class="hljs-comment">// Of indexOf</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Insert a value to a position. If the list is already full, do nothing.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraValue    The given value.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition, <span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> (length == MAX_LENGTH) &#123;<br>System.out.println(<span class="hljs-string">&quot;List full.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> ((paraPosition &lt; <span class="hljs-number">0</span>) || (paraPosition &gt; length)) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is out of bounds.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// From tail to head. The last one is moved to a new position. Because length &lt;</span><br><span class="hljs-comment">// MAX_LENGTH, no exceeding occurs.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> length; i &gt; paraPosition; i--) &#123;<br>data[i] = data[i - <span class="hljs-number">1</span>];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>data[paraPosition] = paraValue;<br>length++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of insert</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Delete a value at a position.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraPosition The given position.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Success or not.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> paraPosition)</span> &#123;<br><span class="hljs-keyword">if</span> ((paraPosition &lt; <span class="hljs-number">0</span>) || (paraPosition &gt;= length)) &#123;<br>System.out.println(<span class="hljs-string">&quot;The position &quot;</span> + paraPosition + <span class="hljs-string">&quot; is out of bounds.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// From head to tail.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> paraPosition; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>data[i] = data[i + <span class="hljs-number">1</span>];<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>length--;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-comment">// Of delete</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span>[] tempArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">SequentialList</span> <span class="hljs-variable">tempFirstList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequentialList</span>(tempArray);<br>System.out.println(<span class="hljs-string">&quot;After initialization, the list is: &quot;</span> + tempFirstList.toString());<br>System.out.println(<span class="hljs-string">&quot;Again, the list is: &quot;</span> + tempFirstList);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempPosition</span> <span class="hljs-operator">=</span> tempFirstList.indexOf(tempValue);<br>System.out.println(<span class="hljs-string">&quot;The position of &quot;</span> + tempValue + <span class="hljs-string">&quot; is &quot;</span> + tempPosition);<br><br>tempValue = <span class="hljs-number">5</span>;<br>tempPosition = tempFirstList.indexOf(tempValue);<br>System.out.println(<span class="hljs-string">&quot;The position of &quot;</span> + tempValue + <span class="hljs-string">&quot; is &quot;</span> + tempPosition);<br><br>tempPosition = <span class="hljs-number">2</span>;<br>tempValue = <span class="hljs-number">5</span>;<br>tempFirstList.insert(tempPosition, tempValue);<br>System.out.println(<br><span class="hljs-string">&quot;After inserting &quot;</span> + tempValue + <span class="hljs-string">&quot; to position &quot;</span> + tempPosition + <span class="hljs-string">&quot;, the list is: &quot;</span> + tempFirstList);<br><br>tempPosition = <span class="hljs-number">8</span>;<br>tempValue = <span class="hljs-number">10</span>;<br>tempFirstList.insert(tempPosition, tempValue);<br>System.out.println(<br><span class="hljs-string">&quot;After inserting &quot;</span> + tempValue + <span class="hljs-string">&quot; to position &quot;</span> + tempPosition + <span class="hljs-string">&quot;, the list is: &quot;</span> + tempFirstList);<br><br>tempPosition = <span class="hljs-number">3</span>;<br>tempFirstList.delete(tempPosition);<br>System.out.println(<span class="hljs-string">&quot;After deleting data at position &quot;</span> + tempPosition + <span class="hljs-string">&quot;, the list is: &quot;</span> + tempFirstList);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>tempFirstList.insert(i, i);<br>System.out.println(<span class="hljs-string">&quot;After inserting &quot;</span> + i + <span class="hljs-string">&quot; to position &quot;</span> + i + <span class="hljs-string">&quot;, the list is: &quot;</span> + tempFirstList);<br>&#125; <span class="hljs-comment">// Of for i</span><br><br>tempFirstList.reset();<br>System.out.println(<span class="hljs-string">&quot;After reset, the list is: &quot;</span> + tempFirstList);<br><br>&#125;<span class="hljs-comment">// Of main</span><br><br>&#125;<span class="hljs-comment">// Of class SequentialList</span><br></code></pre></td></tr></table></figure><h3 id="六运行截图">六、运行截图</h3><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022410122316.png" /></p><h2 id="总结">总结</h2><p>函数 要求同样的输入参数获得同样的输出结果, 但 方法所依赖的数据既包括参数列表中给出的，也依赖于对象的成员变量.</p><p>程序员的世界无非就是增删改查.</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day5</title>
    <link href="/posts/387e2e5d/"/>
    <url>/posts/387e2e5d/</url>
    
    <content type="html"><![CDATA[<h2 id="while-语句">while 语句</h2><h3 id="一while-和-for">一、while 和 for</h3><p>while 语句本质上比 for 更基础, 因此可以替代后者. 但 for在很多时候更方便.</p><p>for 循环方便是因为控制循环的语句在开始就已经声明，而 while循环需要在循环内部更新数据或使用 if-else 语句进行判断后使用 break跳出当前循环体.</p><p>break 语句又出现了, 上次是在 switch 语句里. 都是表示跳出当前循环体.当然 break 对 for 循环也同样适用.</p><h3 id="二示例">二、示例</h3><h4 id="示例描述">示例描述</h4><p>给定一个上界，从1开始求和，取和小于上界的最大值.</p><h4 id="输入">输入</h4><p>一个正整数表示的上界</p><h4 id="输出">输出</h4><p>小于上界和的最大值</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the ninth code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen wshysxcc@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileStatement</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>whileStatementTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The sum not exceeding a given value.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">whileStatementTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// Approach 1.</span><br><span class="hljs-keyword">while</span> (tempSum &lt;= tempMax) &#123;<br>tempValue++;<br>tempSum += tempValue;<br>System.out.println(<span class="hljs-string">&quot;tempValue = &quot;</span> + tempValue + <span class="hljs-string">&quot;, tempSum = &quot;</span> + tempSum);<br>&#125; <span class="hljs-comment">// Of while</span><br>tempSum -= tempValue;<br><br>System.out.println(<span class="hljs-string">&quot;The sum not exceeding &quot;</span> + tempMax + <span class="hljs-string">&quot; is: &quot;</span> + tempSum);<br><br><span class="hljs-comment">// Approach 2.</span><br>System.out.println(<span class="hljs-string">&quot;\r\nAlternative approach.&quot;</span>);<br>tempValue = <span class="hljs-number">0</span>;<br>tempSum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>tempValue++;<br>tempSum += tempValue;<br>System.out.println(<span class="hljs-string">&quot;tempValue = &quot;</span> + tempValue + <span class="hljs-string">&quot;, tempSum = &quot;</span> + tempSum);<br><br><span class="hljs-keyword">if</span> (tempMax &lt; tempSum) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of while</span><br>tempSum -= tempValue;<br><br>System.out.println(<span class="hljs-string">&quot;The sum not exceeding &quot;</span> + tempMax + <span class="hljs-string">&quot; is: &quot;</span> + tempSum);<br>&#125;<span class="hljs-comment">// Of whileStatementTest</span><br>&#125;<span class="hljs-comment">// Of class WhileStatement</span><br><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202246112356.png" /></p><h2 id="综合任务-1">综合任务 1</h2><h3 id="一任务描述">一、任务描述</h3><p>找出成绩最好、最差的同学。但有挂科的同学不参加评比.</p><h3 id="二任务要求">二、任务要求</h3><h4 id="数据要求">数据要求</h4><p>进行学生成绩的随机生成, 区间为 [50, 100].</p><h4 id="数据存放">数据存放</h4><p>学生的成绩存放于一个矩阵，其中行表示学生，列表示科目。如：第 0行表示第 0 个学生的数学、语文、英语成绩。如下所示. <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">    数学 语文 英语 <span class="hljs-string">...</span><br>    0    1   2<br>0   79   83  91<br>1  <span class="hljs-string">...</span>   <span class="hljs-string">...</span> <span class="hljs-string">...</span><br>2  <span class="hljs-string">...</span>   <span class="hljs-string">...</span> <span class="hljs-string">...</span><br>3  <span class="hljs-string">...</span>   <span class="hljs-string">...</span> <span class="hljs-string">...</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure></p><h3 id="三实现">三、实现</h3><h4 id="输入-1">输入</h4><p>使用随机生成的在区间 [50, 100]的整数填充的矩阵</p><h4 id="输出-1">输出</h4><p>矩阵各行和的值最小和最大的行编号（从0开始）</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the tenth code, also the first task.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen wshysxcc@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task1</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>task1();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Method unit test.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// Step 1. Generate the data with n students and m courses.</span><br><span class="hljs-comment">// Set these values by yourself.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">lowerBound</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">upperBound</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">threshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-comment">// Here we have to use an object to generate random numbers.</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">tempRandom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span>[][] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>data[i][j] = lowerBound + tempRandom.nextInt(upperBound - lowerBound);<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;The data is:\r\n&quot;</span> + Arrays.deepToString(data));<br><br><span class="hljs-comment">// Step 2. Compute the total score of each student.</span><br><span class="hljs-type">int</span>[] totalScores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br><span class="hljs-keyword">if</span> (data[i][j] &lt; threshold) &#123;<br>totalScores[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>totalScores[i] += data[i][j];<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;The total scores are:\r\n&quot;</span> + Arrays.toString(totalScores));<br><br><span class="hljs-comment">// Step 3. Find the best and worst student.</span><br><span class="hljs-comment">// Typical initialization for index: invalid value.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempBestIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempWorstIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// Typical initialization for best and worst values.</span><br><span class="hljs-comment">// They must be replaced by valid values.</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempBestScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempWorstScore</span> <span class="hljs-operator">=</span> m * upperBound + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-comment">// Do not consider failed students.</span><br><span class="hljs-keyword">if</span> (totalScores[i] == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempBestScore &lt; totalScores[i]) &#123;<br>tempBestScore = totalScores[i];<br>tempBestIndex = i;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Attention: This if statement cannot be combined with the last one</span><br><span class="hljs-comment">// using &quot;else if&quot;, because a student can be both the best and the worst. </span><br><span class="hljs-keyword">if</span> (tempWorstScore &gt; totalScores[i]) &#123;<br>tempWorstScore = totalScores[i];<br>tempWorstIndex = i;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-comment">// Step 4. Output the student number and score.</span><br><span class="hljs-keyword">if</span> (tempBestIndex == -<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Cannot find best student. All students have failed.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;The best student is No.&quot;</span> + tempBestIndex + <span class="hljs-string">&quot; with scores: &quot;</span><br>+ Arrays.toString(data[tempBestIndex]));<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-keyword">if</span> (tempWorstIndex == -<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Cannot find worst student. All students have failed.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;The worst student is No.&quot;</span> + tempWorstIndex + <span class="hljs-string">&quot; with scores: &quot;</span><br>+ Arrays.toString(data[tempWorstIndex]));<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of task1</span><br><br>&#125;<span class="hljs-comment">// Of class Task1</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202249092720.png" /></p><h4 id="常见问题">常见问题</h4><p>实际代码中，for 和 if 是最常见的, switch 和 while 使用少得多.</p><p>使用了 continue,它是指继续跳过本次循环后面的代码，直接进入下一次循环. 而 break是跳出整个循环体.</p><p>if-else应该保持对同一个表达式或变量的值进行判断。当有多变量的时候尽量多写几个if-else保持代码可读性，毕竟人脑能考虑到的情况是有局限性的。</p><h2 id="总结">总结</h2><p>结合了之前所有的知识点。相比起枯燥乏味的示例，实际解决一个问题更加能够提升自己的能力，尤其是在代码出现问题时候进行的Debug操作。</p><p>最后要相信人脑的局限性，要像计算机一样思考才能写出更好的代码。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day4</title>
    <link href="/posts/4f791ecb/"/>
    <url>/posts/4f791ecb/</url>
    
    <content type="html"><![CDATA[<h2 id="矩阵元素相加">矩阵元素相加</h2><h3 id="一矩阵的赋值">一、矩阵的赋值</h3><p>矩阵在计算机中表述为一个二维数组，可以想象为一个一维数组，但一维数组中每个位置存放的是一个数组。</p><p>初始化矩阵有两种方法：</p><p>1.静态初始化</p><p>程序员指定每个数组元素的初始值，系统决定数组长度。如下所示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a[][] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<br></code></pre></td></tr></table></figure></p><p>2.动态初始化</p><p>程序员只指定数组长度，由系统为数组元素分配初始值。如下所示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> [][]array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br><span class="hljs-type">int</span> [][]array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure></p><h3 id="二二重循环">二、二重循环</h3><p>第一重循环遍历行，第二重循环遍历当前行的所有列。分别遍历两个矩阵并设置一个新的矩阵用于存放两个矩阵的值就可以实现矩阵的相加。这里需要注意的是，两个相加的矩阵行和列必须相等。</p><h3 id="三具体实现">三、具体实现</h3><h4 id="输入">输入</h4><p>两个相同大小的二维数组</p><h4 id="输出">输出</h4><p>两个输入数组相同行列数值之和</p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the seventh code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatrixAddition</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>matrixElementSumTest();<br><br>matrixAdditionTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Sum the elements of a matrix.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix The given matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum of all its elements.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">matrixElementSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] paraMatrix)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">resultSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraMatrix.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>resultSum += paraMatrix[i][j];<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultSum;<br>&#125;<span class="hljs-comment">// Of matrixElementSum</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for respective method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matrixElementSumTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[][] tempMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempMatrix.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>tempMatrix[i][j] = i * <span class="hljs-number">10</span> + j;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;The matrix is: \r\n&quot;</span> + Arrays.deepToString(tempMatrix));<br>System.out.println(<span class="hljs-string">&quot;The matrix element sum is: &quot;</span> + matrixElementSum(tempMatrix) + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<span class="hljs-comment">// Of matrixElementSumTest</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Add two matrices. Attention: NO error check is provided at this moment.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix1 The first matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraMatrix2 The second matrix. It should have the same size as</span><br><span class="hljs-comment"> *                    the first one&#x27;s.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The addition of these matrices.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] matrixAddition(<span class="hljs-type">int</span>[][] paraMatrix1, <span class="hljs-type">int</span>[][] paraMatrix2) &#123;<br><span class="hljs-type">int</span>[][] resultMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[paraMatrix1.length][paraMatrix1[<span class="hljs-number">0</span>].length];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paraMatrix1.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; paraMatrix1[<span class="hljs-number">0</span>].length; j++) &#123;<br>resultMatrix[i][j] = paraMatrix1[i][j] + paraMatrix2[i][j];<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultMatrix;<br>&#125;<span class="hljs-comment">// Of matrixAddition</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for respective method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matrixAdditionTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[][] tempMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempMatrix.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>tempMatrix[i][j] = i * <span class="hljs-number">10</span> + j;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br>System.out.println(<span class="hljs-string">&quot;The matrix is: \r\n&quot;</span> + Arrays.deepToString(tempMatrix));<br><span class="hljs-type">int</span>[][] tempNewMatrix = matrixAddition(tempMatrix, tempMatrix);<br>System.out.println(<span class="hljs-string">&quot;The new matrix is: \r\n&quot;</span> + Arrays.deepToString(tempNewMatrix));<br>&#125;<span class="hljs-comment">// Of matrixAdditionTest</span><br><br>&#125;<span class="hljs-comment">// Of class MatrixAddition</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202245162121.png" /></p><h2 id="矩阵相乘">矩阵相乘</h2><h3 id="一三重循环">一、三重循环</h3><p>三重循环是多数程序的极限。并不是说超过之后就会导致程序崩溃，而是这将导致运行时间按指数级别上升，一点时间变换都会产生明显的延迟。当算法需要使用更多重循环的时候就应该考虑是否有更优解。</p><h3 id="二非法输入检查">二、非法输入检查</h3><p>非法输入检查是程序正常运行的基本保障。如果检查所有的非法输入,会导致大量代码行, 这在商业代码中是必须的。如果需要测试代码，使用if-else不是一个明智的选择。这时可以考虑使用assert来定位和测试。</p><h3 id="三具体实现-1">三、具体实现</h3><h4 id="矩阵相乘公式">矩阵相乘公式</h4><p><span class="math display">\[resultMatrix(i,j) = \sum_{k=0}^n paraFirstMatrix(i,k) *paraSecondMatrix(k,j)\]</span></p><h4 id="输入-1">输入</h4><p>一个矩阵和一个与前个矩阵的转置大小相同的矩阵。</p><h4 id="输出-1">输出</h4><p>符合输入规范则输出两矩阵相乘所得矩阵</p><p>不符合输入规范则输出为null</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the eighth code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MatrixMultiplication</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>matrixMultiplicationTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Matrix multiplication. The columns of the first matrix should be equal to the</span><br><span class="hljs-comment"> * rows of the second one.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraFirstMatrix  The first matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraSecondMatrix The second matrix.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The result matrix.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] multiplication(<span class="hljs-type">int</span>[][] paraFirstMatrix, <span class="hljs-type">int</span>[][] paraSecondMatrix) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> paraFirstMatrix.length;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> paraFirstMatrix[<span class="hljs-number">0</span>].length;<br><span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> paraSecondMatrix[<span class="hljs-number">0</span>].length;<br><br><span class="hljs-comment">// Step 1. Dimension check.</span><br><span class="hljs-keyword">if</span> (paraSecondMatrix.length != n) &#123;<br>System.out.println(<span class="hljs-string">&quot;The two matrices cannot be multiplied.&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br><br><span class="hljs-comment">// Step 2. The loop.</span><br><span class="hljs-type">int</span>[][] resultMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][p];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; p; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>resultMatrix[i][j] += paraFirstMatrix[i][k] * paraSecondMatrix[k][j];<br>&#125; <span class="hljs-comment">// Of for k</span><br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultMatrix;<br>&#125;<span class="hljs-comment">// Of multiplication</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Unit test for respective method.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matrixMultiplicationTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[][] tempFirstMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempFirstMatrix.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempFirstMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>tempFirstMatrix[i][j] = i + j;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;The first matrix is: \r\n&quot;</span> + Arrays.deepToString(tempFirstMatrix));<br><br><span class="hljs-type">int</span>[][] tempSecondMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempSecondMatrix.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tempSecondMatrix[<span class="hljs-number">0</span>].length; j++) &#123;<br>tempSecondMatrix[i][j] = i * <span class="hljs-number">10</span> + j;<br>&#125; <span class="hljs-comment">// Of for j</span><br>&#125; <span class="hljs-comment">// Of for i</span><br>System.out.println(<span class="hljs-string">&quot;The second matrix is: \r\n&quot;</span> + Arrays.deepToString(tempSecondMatrix));<br><br><span class="hljs-type">int</span>[][] tempThirdMatrix = multiplication(tempFirstMatrix, tempSecondMatrix);<br>System.out.println(<span class="hljs-string">&quot;The third matrix is: \r\n&quot;</span> + Arrays.deepToString(tempThirdMatrix));<br><br>System.out.println(<span class="hljs-string">&quot;Trying to multiply the first matrix with itself.\r\n&quot;</span>);<br>tempThirdMatrix = multiplication(tempFirstMatrix, tempFirstMatrix);<br>System.out.println(<span class="hljs-string">&quot;The result matrix is: \r\n&quot;</span> + Arrays.deepToString(tempThirdMatrix));<br>&#125;<span class="hljs-comment">// Of matrixMultiplicationTest</span><br><br>&#125;<span class="hljs-comment">// Of class MatrixMultiplication</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202245164100.png" /></p><h2 id="总结">总结</h2><p>不过是对二维数组进行简单的操作。需要注意的是错误检测，这在我写代码的大多数时候都不会在意。尤其是刷算法题的时候，常常对数据结构判空忽略，直到题目没有AC时才恍然大悟。算是一个不太好的习惯吗，需要改进。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day3</title>
    <link href="/posts/d11d8b68/"/>
    <url>/posts/d11d8b68/</url>
    
    <content type="html"><![CDATA[<h2 id="基本switch-语句">基本switch 语句</h2><h3 id="一关键字的用法">一、关键字的用法</h3><h4 id="switch">1. switch</h4><p>同if-else一样是做为选择的switch，不同于if-else通过判断表达式的布尔值来执行之后的代码。switch是测量整数表达式（能够产生一个整数的表达式）的具体数值来做出“选择”并执行代码.</p><p>示例代码如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(整数表达式) &#123;<br>    代码<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="case">2. case</h4><p>在switch中可以存在很多case。代码的执行是从由整数表达式确定的数值处开始执行，直到遇到break语句跳出switch代码块.</p><p>示例代码如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(整数表达式) &#123;<br>    <span class="hljs-keyword">case</span> 整数:<br>    <span class="hljs-keyword">case</span> 整数:<br>    <span class="hljs-keyword">case</span> 整数:<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="break">3. break</h4><p>用于阻断case之后代码的执行，正常来说switch中至少是需要一个break的.</p><p>示例代码如下： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(整数表达式) &#123;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">1</span>:<br>        代码<span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">2</span>:<br>        代码<span class="hljs-number">2</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">3</span>:<br>        代码<span class="hljs-number">3</span><br>        <span class="hljs-keyword">break</span>;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="default">4. default</h4><p>整数的值是无穷无尽的，但是需要对这部分进行处理。default正如if-else中else的作用一致，表达除去case已有整数的整数集合.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(整数表达式) &#123;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">1</span>:<br>        代码<span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">2</span>:<br>        代码<span class="hljs-number">2</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 整数<span class="hljs-number">3</span>:<br>        代码<span class="hljs-number">3</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        代码<span class="hljs-number">4</span><br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：default执行条件是整数表达式不为整数1、整数2和整数3.</p><h3 id="二单元测试">二、单元测试</h3><p>编写一个函数，里面有很多测试用例。这个函数调用需要被测试的函数，通过对结果的判断来确认函数的正确性。这样可以保证单独使用一个方法,main 方法里面的代码越少越好.</p><h3 id="三示例">三、示例</h3><h4 id="题目描述">题目描述</h4><p>给出学生的成绩对其评级</p><h4 id="输入">输入</h4><p>学生成绩，用整数表示.正常区间在[0,100]</p><p>示例： <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">78<br></code></pre></td></tr></table></figure></p><h4 id="输出">输出</h4><p>根据成绩不同，输出从A-F的一个大写字母</p><p>100 &gt;= 成绩 &gt;= 90,输出'A'</p><p>90 &gt; 成绩 &gt;= 80,输出'B'</p><p>80 &gt; 成绩 &gt;= 70,输出'C'</p><p>70 &gt; 成绩 &gt;= 60,输出'D'</p><p>60 &gt; 成绩 &gt;= 0,输出'F'</p><p>其余情况输出'E'</p><p>示例： <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">input</span>: <span class="hljs-number">78</span> ==&gt; <span class="hljs-built_in">output</span>:<span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-built_in">input</span>: <span class="hljs-number">60</span> ==&gt; <span class="hljs-built_in">output</span>:<span class="hljs-string">&#x27;F&#x27;</span><br><span class="hljs-built_in">input</span>:<span class="hljs-number">110</span> ==&gt; <span class="hljs-built_in">output</span>:<span class="hljs-string">&#x27;E&#x27;</span><br></code></pre></td></tr></table></figure></p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the fifth code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Shihuai Wen wshysxcc@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchStatement</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>scoreToLevelTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Score to level.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraScore From 0 to 100.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The level from A to F.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">scoreToLevel</span><span class="hljs-params">(<span class="hljs-type">int</span> paraScore)</span> &#123;<br><span class="hljs-comment">// E stands for error, and F stands for fail.</span><br><span class="hljs-type">char</span> <span class="hljs-variable">resultLevel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;E&#x27;</span>;<br><br><span class="hljs-comment">// Divide by 10, the result ranges from 0 to 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempDigitalLevel</span> <span class="hljs-operator">=</span> paraScore / <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// The use of break is important.</span><br><span class="hljs-keyword">switch</span> (tempDigitalLevel) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>resultLevel = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>resultLevel = <span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>resultLevel = <span class="hljs-string">&#x27;C&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>resultLevel = <span class="hljs-string">&#x27;D&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>resultLevel = <span class="hljs-string">&#x27;F&#x27;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>resultLevel = <span class="hljs-string">&#x27;E&#x27;</span>;<br>&#125;<span class="hljs-comment">// Of switch</span><br><br><span class="hljs-keyword">return</span> resultLevel;<br>&#125;<span class="hljs-comment">// of scoreToLevel</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Method unit test.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scoreToLevelTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">91</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">82</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">75</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">66</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">52</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">8</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br><br>tempScore = <span class="hljs-number">120</span>;<br>System.out.println(<span class="hljs-string">&quot;Score &quot;</span> + tempScore + <span class="hljs-string">&quot; to level is: &quot;</span> + scoreToLevel(tempScore));<br>&#125;<span class="hljs-comment">// Of scoreToLevelTest</span><br><br>&#125;<span class="hljs-comment">// Of class SwitchStatement</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202244104717.png" /></p><h3 id="四总结">四、总结</h3><p>相比起if-else，switch虽然有很大的局限性，但在实际运用中可能会起到很大作用。例如在需要加入新功能的时候，大量的if-else可能会出现人为划分区间的重复，而采用switch进行选择精准执行代码。</p><h2 id="基本for-语句">基本for 语句</h2><h3 id="一循环语句">一、循环语句</h3><p>循环语句是程序的核心.在程序中存在很多重复的步骤，运行时需要重复执行。</p><p>除了用for循环之外还有while和do-while（这两部分将在后面的章节提及）</p><p>for循环的使用需要注意以下三个问题：</p><ol type="1"><li>控制变量的初始化</li><li>循环的条件</li><li>循环控制变量的更新</li></ol><p>同时这三个问题将以三个表达式的形式表现在for循环中。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(变量初始化表达式 ; 判断循环是否继续表达式 ; 循环变量更新表达式) &#123;<br>需要循环的代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二算法的时间复杂度">二、算法的时间复杂度</h3><p>算法的时间复杂度一般根据循环语句来计算。因为循环语句重复执行，主要的时间会在这个地方消耗。也就是循环的次数决定了整个算法的时间复杂度。若循环之中还有循环也要一并计算。</p><h3 id="三示例-1">三、示例</h3><h4 id="函数-addtonn">函数 addToN(N)</h4><p>求从1加到N的整数和。示意如下 <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>+ <span class="hljs-number">2</span> + <span class="hljs-number">3</span> + ... + N-<span class="hljs-number">1</span> + N<br></code></pre></td></tr></table></figure></p><h4 id="输入-1">输入</h4><p>一个整数用于表示上界</p><h4 id="输出-1">输出</h4><p>一个正整数表示从1加到输入正整数的整数和</p><hr /><h4 id="函数-addtonwithsteplengthnstep">函数addToNWithStepLength(N,Step)</h4><p>求从1加到N的整数和，N为上界，步进为Step，当最后一个数超过N则舍弃。示意如下<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">若步进为<span class="hljs-number">2</span>，则完整算式为<br><span class="hljs-number">1</span> + <span class="hljs-number">3</span> + <span class="hljs-number">5</span> + ... + <span class="hljs-built_in">N</span>-<span class="hljs-number">2</span> + <span class="hljs-built_in">N</span><br></code></pre></td></tr></table></figure></p><h4 id="输入-2">输入</h4><p>一个正整数用于表示上界，另一个正整数表示步进 <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">2</span> ==&gt; 上界为<span class="hljs-number">10</span>，步进为<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><h4 id="输出-2">输出</h4><p>从1加到输入正整数且带有步进的整数和</p><hr /><h4 id="完整代码">完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the sixth code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen shihuaiwen@outlook.com.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForStatement</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>forStatementTest();<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Method unit test.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forStatementTest</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempN</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>System.out.println(<span class="hljs-string">&quot;1 add to &quot;</span> + tempN + <span class="hljs-string">&quot; is: &quot;</span> + addToN(tempN));<br><br>tempN = <span class="hljs-number">0</span>;<br>System.out.println(<span class="hljs-string">&quot;1 add to &quot;</span> + tempN + <span class="hljs-string">&quot; is: &quot;</span> + addToN(tempN));<br><br><span class="hljs-type">int</span> <span class="hljs-variable">tempStepLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>tempN = <span class="hljs-number">10</span>;<br>System.out.println(<span class="hljs-string">&quot;1 add to &quot;</span> + tempN + <span class="hljs-string">&quot; with step length &quot;</span> + tempStepLength + <span class="hljs-string">&quot; is: &quot;</span><br>+ addToNWithStepLength(tempN, tempStepLength));<br><br>tempStepLength = <span class="hljs-number">2</span>;<br>System.out.println(<span class="hljs-string">&quot;1 add to &quot;</span> + tempN + <span class="hljs-string">&quot; with step length &quot;</span> + tempStepLength + <span class="hljs-string">&quot; is: &quot;</span><br>+ addToNWithStepLength(tempN, tempStepLength));<br>&#125;<span class="hljs-comment">// Of forStatementTest</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Add from 1 to N.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN The given upper bound.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addToN</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">resultSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= paraN; i++) &#123;<br>resultSum += i;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultSum;<br>&#125;<span class="hljs-comment">// Of addToN</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Add from 1 to N with a step length.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraN          The given upper bound.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraStepLength The given step length.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The sum.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addToNWithStepLength</span><span class="hljs-params">(<span class="hljs-type">int</span> paraN, <span class="hljs-type">int</span> paraStepLength)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">resultSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= paraN; i += paraStepLength) &#123;<br>resultSum += i;<br>&#125; <span class="hljs-comment">// Of for i</span><br><br><span class="hljs-keyword">return</span> resultSum;<br>&#125;<span class="hljs-comment">// Of addToNWithStepLength</span><br><br>&#125;<span class="hljs-comment">// Of class ForStatement</span><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202245095244.png" /></p><h3 id="四总结-1">四、总结</h3><p>计算机简单点描述就是一直做一件事，唯一不同的是在每次循环之后总伴随着变量的更新变化。</p><p>年年岁岁花相似，岁岁年年人不同。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day2</title>
    <link href="/posts/8d2c7533/"/>
    <url>/posts/8d2c7533/</url>
    
    <content type="html"><![CDATA[<h2 id="基本-if-语句">基本 if 语句</h2><h3 id="if-then-else">1.if then else</h3><p>if-else语句是控制程序流程的最基本的形式，其中else是可选的。基于此就会存在下列三种形式。</p><p>1.存在else的表达式 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式) &#123;<br>    代码<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    代码<br>&#125;<br></code></pre></td></tr></table></figure></p><p>2.不存在else的表达式 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(表达式) &#123;<br>    代码<br>&#125;<br></code></pre></td></tr></table></figure></p><p>注：在代码中常出现的elseif并不是什么新语句，而是else后又接上了一个if-else</p><h3 id="方法函数调用">2.方法（函数）调用</h3><p>函数的作用一是增加代码的复用性，二是将部分处理过程独立出来提高代码的可读性。</p><h3 id="方法函数头部规范的注释">3.方法（函数）头部规范的注释</h3><p>头部规范的注释是后期生成文档的基础。其原理是解析类似于以@param、<spanclass="citation"data-cites="author为开头的等注释来实现在文档中阐述函数参数">@author为开头的等注释来实现在文档中阐述函数参数</span>、作者等信息。</p><h3 id="示例">4.示例</h3><h4 id="题目描述">题目描述</h4><p>通过if-else语句判断一个数正负，并以此为依据求出其绝对值。然后自定义一个函数用来求一个数的绝对值。</p><h4 id="输入">输入</h4><p>一个数</p><p>示例： <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure> 或 <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-5</span><br></code></pre></td></tr></table></figure></p><h4 id="输出">输出</h4><p>输入数的绝对值</p><p>示例： <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">input</span>:<span class="hljs-number">4</span> ==&gt; output:<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure> 或 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">input</span>:-<span class="hljs-number">5</span> ==&gt; output:<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></p><h4 id="具体代码">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * The usage of the if statement.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen E-mail:wshysxcc@outlook.com.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2022年4月3日 下午9:30:00</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfStatement</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-type">int</span> tempNumber1, tempNumber2;<br><br><span class="hljs-comment">// Try a positive value</span><br>tempNumber1 = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">if</span> (tempNumber1 &gt;= <span class="hljs-number">0</span>) &#123;<br>tempNumber2 = tempNumber1;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempNumber2 = -tempNumber1;<br>&#125; <span class="hljs-comment">// Of if</span><br><br>System.out.pri <span class="hljs-title function_">ntln</span><span class="hljs-params">(<span class="hljs-string">&quot;The absolute value of &quot;</span> + tempNumber1 + <span class="hljs-string">&quot; is &quot;</span> + tempNumber2)</span>;<br><br><span class="hljs-comment">// Now we use a method/function for this purpose.</span><br>tempNumber1 = <span class="hljs-number">6</span>;<br>System.out.println(<span class="hljs-string">&quot;The absolute value of &quot;</span> + tempNumber1 + <span class="hljs-string">&quot; is &quot;</span> + abs(tempNumber1));<br><br>tempNumber2 = -<span class="hljs-number">8</span>;<br>System.out.println(<span class="hljs-string">&quot;The absolute value of &quot;</span> + tempNumber2 + <span class="hljs-string">&quot; is &quot;</span> + abs(tempNumber2));<br><br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> paraValue)</span> &#123;<br><span class="hljs-keyword">if</span> (paraValue &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> paraValue;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -paraValue;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of abs</span><br><br>&#125;<span class="hljs-comment">// Of class IfStatement</span><br></code></pre></td></tr></table></figure><h4 id="运行截图">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202243194723.png" /></p><h2 id="闰年的计算">闰年的计算</h2><h3 id="if-语句的嵌套">1.if 语句的嵌套</h3><p>在if的代码区域可以继续使用if-else形成递进，各个表达式之间是且的关系。简要代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (表达式) &#123;<br>    <span class="hljs-keyword">if</span> (表达式) &#123;<br>        代码<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        代码<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基本规律">2.基本规律</h3><p>普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）</p><p>世纪闰年：公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）</p><h3 id="布尔类型">3.布尔类型</h3><p>如同计算机底层结构非0即1一样，布尔类型要表达的正是这种思想，可以表达为正确或错误其中之一的状态。正确则为true，错误则为false。</p><h3 id="题解">4.题解</h3><h4 id="输入-1">输入</h4><p>一个用正整数表示的年份</p><p>示例： <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure></p><h4 id="输出-1">输出</h4><p>一个布尔值，true表示是闰年，false表示不是闰年。</p><h4 id="具体代码-1">具体代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The complex usage of the if statement.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen E-mail:wshysxcc@outlook.com.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2022年4月3日 下午9:50:00</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeapYear</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * The entrance of the program.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args Not used now.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">// Test isLeapYear</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tempYear</span> <span class="hljs-operator">=</span> <span class="hljs-number">2021</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYear(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2000</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYear(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2100</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYear(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2004</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYear(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br><span class="hljs-comment">// Test isLeapYearV2</span><br>System.out.println(<span class="hljs-string">&quot;Now use the second version.&quot;</span>);<br>tempYear = <span class="hljs-number">2021</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYearV2(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2000</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYearV2(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2100</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYearV2(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br><br>tempYear = <span class="hljs-number">2004</span>;<br><br>System.out.print(<span class="hljs-string">&quot;&quot;</span> + tempYear + <span class="hljs-string">&quot; is &quot;</span>);<br><span class="hljs-keyword">if</span> (!isLeapYearV2(tempYear)) &#123;<br>System.out.print(<span class="hljs-string">&quot;NOT &quot;</span>);<br>&#125; <span class="hljs-comment">// Of if</span><br>System.out.println(<span class="hljs-string">&quot;a leap year.&quot;</span>);<br>&#125;<span class="hljs-comment">// Of main</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the given year leap?</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraYear The given year.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeapYear</span><span class="hljs-params">(<span class="hljs-type">int</span> paraYear)</span> &#123;<br><span class="hljs-keyword">if</span> ((paraYear % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &amp;&amp; (paraYear % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (paraYear % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of isLeapYear</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> * Is the given year leap? Replace the complex condition with a number of if.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paraYear The given year.</span><br><span class="hljs-comment"> *********************</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeapYearV2</span><span class="hljs-params">(<span class="hljs-type">int</span> paraYear)</span> &#123;<br><span class="hljs-keyword">if</span> (paraYear % <span class="hljs-number">4</span> != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (paraYear % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (paraYear % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-comment">// Of if</span><br>&#125;<span class="hljs-comment">// Of isLeapYearV2</span><br><br>&#125;<span class="hljs-comment">// Of class LeapYear</span><br><br></code></pre></td></tr></table></figure><h4 id="运行截图-1">运行截图</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/202243194616.png" /></p><h2 id="总结">总结</h2><p>分支判断是编程的基础，正如人思考问题一样。如果情况如何，那么就该怎么做。但是如果存在if-else嵌入过深的时候就需要考虑自己的逻辑，可以会运用设计模式中的方法来解决问题。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-Day1</title>
    <link href="/posts/92c3ffd/"/>
    <url>/posts/92c3ffd/</url>
    
    <content type="html"><![CDATA[<h2 id="环境搭建和基础概念">环境搭建和基础概念</h2><h3 id="一package">一、package</h3><p>package被解释为包，目的是为了管理不同的类，以便能够更为方便地使用类中的各种函数方法，同时这也将达到函数复用的目的。package语句应该放在源文件的第一行，在每个源文件中只能有一个包定义语句。注：包这个概念广泛被用于多种编程语言。C#的namespace就和Java的package类似</p><h3 id="二import">二、import</h3><p>结合之前包的概念，import的作用就是将指定包导入到当前程序代码中进而使用。</p><h3 id="三println">三、println</h3><p>println() 是 java.io.PrintStream类的方法。作用是向控制台打印函数参数的内容和换行符。和printf不同，println不需要严格遵守格式规则。</p><h3 id="四编写helloworld">四、编写HelloWorld</h3><p>HelloWorld.java具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> basic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下图所示：</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202241215159.png" /></p><h3 id="总结">总结</h3><p>一门语言或者概念的提出都是为了解决实际的问题。正如面向对象的Java出现改变了面向过程编程的模式，更符合现实生活。包管理的出现增强了程序员之间分工与合作，再也不用面对宏定义满天飞，到处都是头文件的窘境。</p><h2 id="基本算术操作">基本算术操作</h2><h3 id="一加减乘除整除取余.">一、加、减、乘、除、整除、取余.</h3><h3 id="二熟悉-println-的中阶用法.">二、熟悉 println 的中阶用法.</h3><p>上述内容代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is the second code. Names and comments should follow my style strictly.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ShiHuai Wen wshysxcc@outlook.com. </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicOperations</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-type">int</span> tempFirstInt, tempSecondInt, tempResultInt;<br><span class="hljs-type">double</span> tempFirstDouble, tempSecondDouble, tempResultDouble;<br><br>tempFirstInt = <span class="hljs-number">13</span>;<br>tempSecondInt = <span class="hljs-number">23</span>;<br><br>tempFirstDouble = <span class="hljs-number">1.7</span>;<br>tempSecondDouble = <span class="hljs-number">7.8</span>;<br><br><span class="hljs-comment">//Addition</span><br>tempResultInt = tempFirstInt + tempSecondInt;<br>tempResultDouble = tempFirstDouble + tempSecondDouble;<br><br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstInt + <span class="hljs-string">&quot; + &quot;</span> + tempSecondInt + <span class="hljs-string">&quot; = &quot;</span> + tempResultInt);<br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstDouble + <span class="hljs-string">&quot; + &quot;</span> + tempSecondDouble + <span class="hljs-string">&quot; = &quot;</span> + tempResultDouble);<br><br><span class="hljs-comment">//Subtraction</span><br>tempResultInt = tempFirstInt - tempSecondInt;<br>tempResultDouble = tempFirstDouble - tempSecondDouble;<br><br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstInt + <span class="hljs-string">&quot; - &quot;</span> + tempSecondInt + <span class="hljs-string">&quot; = &quot;</span> + tempResultInt);<br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstDouble + <span class="hljs-string">&quot; - &quot;</span> + tempSecondDouble + <span class="hljs-string">&quot; = &quot;</span> + tempResultDouble);<br><br><span class="hljs-comment">//Multiplication</span><br>tempResultInt = tempFirstInt * tempSecondInt;<br>tempResultDouble = tempFirstDouble * tempSecondDouble;<br><br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstInt + <span class="hljs-string">&quot; * &quot;</span> + tempSecondInt + <span class="hljs-string">&quot; = &quot;</span> + tempResultInt);<br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstDouble + <span class="hljs-string">&quot; * &quot;</span> + tempSecondDouble + <span class="hljs-string">&quot; = &quot;</span> + tempResultDouble);<br><br><span class="hljs-comment">//Division</span><br>tempResultInt = tempFirstInt / tempSecondInt;<br>tempResultDouble = tempFirstDouble / tempSecondDouble;<br><br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstInt + <span class="hljs-string">&quot; / &quot;</span> + tempSecondInt + <span class="hljs-string">&quot; = &quot;</span> + tempResultInt);<br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstDouble + <span class="hljs-string">&quot; / &quot;</span> + tempSecondDouble + <span class="hljs-string">&quot; = &quot;</span> + tempResultDouble);<br><br><span class="hljs-comment">//Modulus</span><br>tempResultInt = tempFirstInt % tempSecondInt;<br><br>System.out.println(<span class="hljs-string">&quot;&quot;</span> + tempFirstInt + <span class="hljs-string">&quot; % &quot;</span> + tempSecondInt + <span class="hljs-string">&quot; = &quot;</span> + tempResultInt);<br>&#125;<span class="hljs-comment">//Of main</span><br>&#125;<span class="hljs-comment">//Of class BasicOperations</span><br></code></pre></td></tr></table></figure><p>运行结果如下图所示： <imgsrc="https://img.omnitrix.top/MDImage/img/202241220921.png" /></p><h3 id="总结-1">总结</h3><p>相比起C语言的printf()，Java的println()在开发中能够发挥出巨大的便捷性。越高级的语言越是应该强调这一个标准。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-19求链式线性表的倒数第K项</title>
    <link href="/posts/4f8e7de9/"/>
    <url>/posts/4f8e7de9/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/826">https://pintia.cn/problem-sets/15/problems/826</a></p><p>给定一系列正整数，请设计一个尽可能高效的算法，查找倒数第K个位置上的数字。</p><h3 id="输入格式">输入格式:</h3><p>输入首先给出一个正整数K，随后是若干非负整数，最后以一个负整数表示结尾（该负数不算在序列内，不要处理）。</p><h3 id="输出格式">输出格式:</h3><p>输出倒数第K个位置上的数据。如果这个位置不存在，输出错误信息NULL。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><p>双指针，要是数组的话就直接取值了。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-type">int</span> k,cnt=<span class="hljs-number">0</span>;<br>    LinkList L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    LNode *s=L,*r=L,*p;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-type">int</span> f=k;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;temp);<br>        <span class="hljs-keyword">if</span>( temp&lt;<span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            p=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>            p-&gt;data = temp;<br>            r-&gt;next = p;<br>            r = p;<br>            k--;<br>            cnt++;<br>            <span class="hljs-keyword">if</span>( k&lt;<span class="hljs-number">1</span>)&#123;<br>                s = s-&gt;next;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>( f&gt;cnt)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s-&gt;data);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-18银行业务队列简单模拟</title>
    <link href="/posts/b9201a08/"/>
    <url>/posts/b9201a08/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/825">https://pintia.cn/problem-sets/15/problems/825</a></p><p>设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍——即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。</p><h3 id="输入格式">输入格式:</h3><p>输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">4</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><p>设置两个队列然后按照指定规则出队列</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> data[<span class="hljs-number">1001</span>];<br>    <span class="hljs-type">int</span> front,rear;<br>&#125; Queue;<br><br><span class="hljs-type">int</span> out[<span class="hljs-number">1000</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    Queue QA,QB;<br>    <span class="hljs-type">int</span> people;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;people);<br>    QA.front = QA.rear = <span class="hljs-number">0</span>;<br>    QB.front = QB.rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(people)&#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>            QA.data[QA.rear++] = n;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            QB.data[QB.rear++] = n;<br>        &#125;<br>        people--;<br>    &#125;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(QA.rear &gt; QA.front || QB.rear &gt; QB.front) &#123;<br>        <span class="hljs-keyword">if</span> (QA.rear &gt; QA.front) &#123;<br>            out[index++] = QA.data[QA.front++];<br>            <span class="hljs-keyword">if</span> (QA.rear &gt; QA.front)&#123;<br>                out[index++] = QA.data[QA.front++];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (QB.rear &gt; QB.front) &#123;<br>            out[index++] = QB.data[QB.front++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,out[i]);<br>        <span class="hljs-keyword">if</span>(i != index - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-17汉诺塔的非递归实现</title>
    <link href="/posts/a25865f/"/>
    <url>/posts/a25865f/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/821">https://pintia.cn/problem-sets/15/problems/821</a></p><p>借助堆栈以非递归（循环）方式求解汉诺塔的问题（n, a, b,c），即将N个盘子从起始柱（标记为“a”）通过借助柱（标记为“b”）移动到目标柱（标记为“c”），并保证每个移动符合汉诺塔问题的要求。</p><h3 id="输入格式">输入格式:</h3><p>输入为一个正整数N，即起始柱上的盘数。</p><h3 id="输出格式">输出格式:</h3><p>每个操作（移动）占一行，按柱1 -&gt; 柱2的格式输出。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">a</span> -&gt;</span> c<br><span class="hljs-function"><span class="hljs-title">a</span> -&gt;</span> b<br><span class="hljs-function"><span class="hljs-title">c</span> -&gt;</span> b<br><span class="hljs-function"><span class="hljs-title">a</span> -&gt;</span> c<br><span class="hljs-function"><span class="hljs-title">b</span> -&gt;</span> a<br><span class="hljs-function"><span class="hljs-title">b</span> -&gt;</span> c<br><span class="hljs-function"><span class="hljs-title">a</span> -&gt;</span> c<br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><p>非递归方式换个思路就是将递归栈换为手工栈来处理。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hannoi</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">char</span> x,<span class="hljs-type">char</span> y,<span class="hljs-type">char</span> z)</span> &#123;<br>    <span class="hljs-type">int</span> N[<span class="hljs-number">100</span>],p = <span class="hljs-number">1</span>; <br><span class="hljs-type">char</span> X[<span class="hljs-number">100</span>],Y[<span class="hljs-number">100</span>],Z[<span class="hljs-number">100</span>];<br>N[<span class="hljs-number">1</span>]=n;X[<span class="hljs-number">1</span>]=x;Y[<span class="hljs-number">1</span>]=y;Z[<span class="hljs-number">1</span>]=z;<br>    <span class="hljs-keyword">do</span> &#123;<br>        n = N[p]; x = X[p] ; y = Y[p] ; z = Z[p];<br>        --p;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c -&gt; %c\n&quot;</span>,x,z);<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//这里是个手动入栈顺序</span><br>            ++p; N[p]=n<span class="hljs-number">-1</span>; X[p]=y;Y[p]=x;Z[p]=z;<br>            ++p; N[p]=<span class="hljs-number">1</span>; X[p]=x;Y[p]=y;Z[p]=z;<br>    ++p; N[p]=n<span class="hljs-number">-1</span>; X[p]=x;Y[p]=z;Z[p]=y;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span>(p &gt; <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>hannoi(n,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-16一元多项式求导</title>
    <link href="/posts/33ba48a3/"/>
    <url>/posts/33ba48a3/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/820">https://pintia.cn/problem-sets/15/problems/820</a></p><p>设计函数求一元多项式的导数。</p><h3 id="输入格式">输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> -<span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> -<span class="hljs-number">2</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">12 </span><span class="hljs-number">3</span> -<span class="hljs-number">10</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><p>之前也做过这样的题，那么有两种方法来解决这个问题。一种是链表的形式，一种是数组。</p><p>但是那样存储是因为需要合并，而这个不需要合并。直接输入输出就完事了！</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123; <br><span class="hljs-type">int</span> xishu,zhishu;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;xishu,&amp;zhishu) != EOF) &#123;<br><span class="hljs-keyword">if</span> (zhishu) &#123;<br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,xishu*zhishu,zhishu<span class="hljs-number">-1</span>);<br>            flag=<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!flag) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-13统计工龄</title>
    <link href="/posts/1f72c803/"/>
    <url>/posts/1f72c803/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/721">https://pintia.cn/problem-sets/15/problems/721</a></p><p>给定公司N名员工的工龄，要求按工龄增序输出每个工龄段有多少员工。</p><h3 id="输入格式">输入格式:</h3><p>输入首先给出正整数<spanclass="math inline">\({N（≤10^5）}\)</span>，即员工总人数；随后给出N个整数，即每个员工的工龄，范围在[0,50]。</p><h3 id="输出格式">输出格式:</h3><p>按工龄的递增顺序输出每个工龄的员工个数，格式为：“工龄:人数”。每项占一行。如果人数为0则不输出该项。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>:<span class="hljs-number">3</span><br><span class="hljs-attribute">5</span>:<span class="hljs-number">2</span><br><span class="hljs-attribute">7</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">10</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><p>很明显，这里要么是Hash表，要么就是数组。C语言的Hash表我不会写那就只好用数组了。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> age[<span class="hljs-number">51</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;number);<br>    <span class="hljs-keyword">while</span>(number &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">0</span> &amp;&amp; a &lt;= <span class="hljs-number">50</span>) &#123;<br>            age[a]++;<br>        &#125;<br>        number--;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt;= <span class="hljs-number">50</span> ; i++) &#123;<br>        <span class="hljs-keyword">if</span>(age[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d\n&quot;</span>,i,age[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-12排序</title>
    <link href="/posts/790666d0/"/>
    <url>/posts/790666d0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/720">https://pintia.cn/problem-sets/15/problems/720</a></p><p>给定<spanclass="math inline">\({N}\)</span>个（长整型范围内的）整数，要求输出从小到大排序后的结果。</p><p>本题旨在测试各种不同的排序算法在各种数据情况下的表现。各组测试数据特点如下：</p><ul><li>数据1：只有1个元素；</li><li>数据2：11个不相同的整数，测试基本正确性；</li><li>数据3：<span class="math inline">\({10^3}\)</span>个随机整数；</li><li>数据4：<span class="math inline">\({10^4}\)</span>个随机整数；</li><li>数据5：<span class="math inline">\({10^5}\)</span>个随机整数；</li><li>数据6：<span class="math inline">\({10^5}\)</span>个顺序整数；</li><li>数据7：<span class="math inline">\({10^5}\)</span>个逆序整数；</li><li>数据8：<spanclass="math inline">\({10^5}\)</span>个基本有序的整数；</li><li>数据9：<spanclass="math inline">\({10^5}\)</span>个随机正整数，每个数字不超过1000。</li></ul><h3 id="输入格式">输入格式:</h3><p>输入第一行给出正整数<spanclass="math inline">\({N（≤10^5）}\)</span>，随后一行给出<spanclass="math inline">\({N}\)</span>个（长整型范围内的）整数，其间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>在一行中输出从小到大排序后的结果，数字间以1个空格分隔，行末不得有多余空格。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11</span><br><span class="hljs-attribute">4</span> <span class="hljs-number">981</span> <span class="hljs-number">10</span> -<span class="hljs-number">17</span> <span class="hljs-number">0</span> -<span class="hljs-number">20</span> <span class="hljs-number">29</span> <span class="hljs-number">50</span> <span class="hljs-number">8</span> <span class="hljs-number">43</span> -<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-20 -17 -5<span class="hljs-number"> 0 </span>4<span class="hljs-number"> 8 </span>10<span class="hljs-number"> 29 </span>43<span class="hljs-number"> 50 </span>981<br></code></pre></td></tr></table></figure><h2 id="吐槽">吐槽</h2><p>这不就是考察的几大经典排序算法吗？</p><h3 id="主函数">主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//冒泡算法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-comment">//插入排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-comment">//选择排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SelectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-comment">//快速排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>;<br><span class="hljs-comment">//希尔排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span>;<br><span class="hljs-comment">//归并排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> b[])</span>;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">100001</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">100001</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> i;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br><br>    <span class="hljs-comment">//这里添加各种排序算法</span><br>    <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i==n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序">冒泡排序</h3><h4 id="具体代码">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n<span class="hljs-number">-1</span>-i; j++) &#123;<br>            <span class="hljs-keyword">if</span>(a[j] &gt; a[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-type">int</span> temp = a[j];<br>                a[j] = a[j+<span class="hljs-number">1</span>];<br>                a[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022315160641.png" /></p><h3 id="插入排序">插入排序</h3><h4 id="具体代码-1">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">InsertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> temp = a[i];<br>        <span class="hljs-type">int</span> j;<br>        <span class="hljs-keyword">for</span>(j = i<span class="hljs-number">-1</span> ; j&gt;=<span class="hljs-number">0</span> &amp;&amp; temp &lt; a[j]; j--) &#123;<br>            a[j+<span class="hljs-number">1</span>] = a[j];<br>        &#125;<br>        a[j+<span class="hljs-number">1</span>] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-1">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022315164348.png" /></p><h3 id="选择排序">选择排序</h3><h4 id="具体代码-2">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">SelectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> minIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        minIndex = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span>(a[j] &lt; a[minIndex]) &#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> temp = a[i];<br>a[i] = a[minIndex];<br>a[minIndex] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-2">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022315165659.png" /></p><h3 id="快速排序">快速排序</h3><h4 id="具体代码-3">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> temp = a[i];<br><br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span>(a[j] &gt;= temp &amp;&amp; i &lt; j) &#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &lt; j) &#123;<br>            a[i++] = a[j];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(a[i] &lt;= temp &amp;&amp; i &lt; j) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &lt; j) &#123;<br>            a[j--] = a[i];<br>        &#125;<br>    &#125;<br>    a[i] = temp;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>        k = partition(a,i,j);<br>        QuickSort(a,i,k<span class="hljs-number">-1</span>);<br>        QuickSort(a,k+<span class="hljs-number">1</span>,j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-3">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022316082302.png" /></p><h3 id="希尔排序">希尔排序</h3><h4 id="提醒">提醒</h4><p>希尔排序就是特殊的插入排序，只是之间的间隔增大了。插入排序的间隔为1，而希尔排序是delta</p><h4 id="具体代码-4">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-type">int</span> gap;<br>    <span class="hljs-keyword">for</span>(gap = n/<span class="hljs-number">2</span> ; gap &gt; <span class="hljs-number">0</span> ; gap /= <span class="hljs-number">2</span> )&#123;<br>        <span class="hljs-keyword">for</span>(i = gap; i &lt; n; i++) &#123;<br>            temp = a[i];<br>            <span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; a[j] ; j -= gap) &#123;<br>                a[j+gap] = a[j];<br>            &#125;<br>            a[j+gap]=temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-4">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022316091257.png" /></p><h3 id="归并排序">归并排序</h3><h4 id="具体代码-5">具体代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> s1,<span class="hljs-type">int</span> e1,<span class="hljs-type">int</span> s2,<span class="hljs-type">int</span> e2,<span class="hljs-type">int</span> b[])</span> &#123;<br>    <span class="hljs-type">int</span> k=s1;<br><span class="hljs-type">int</span> i=s1;<br><br>    <span class="hljs-keyword">while</span>(s1 &lt;= e1 &amp;&amp; s2 &lt;= e2) &#123;<br>        <span class="hljs-keyword">if</span> (a[s1] &lt;= a[s2]) &#123;<br>            b[k++] = a[s1++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            b[k++] = a[s2++];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(s1 &lt;= e1) b[k++] = a[s1++];<br><span class="hljs-keyword">while</span>(s2 &lt;= e2) b[k++] = a[s2++];<br>    k--;<br>    <span class="hljs-keyword">while</span>(k &gt;= i) &#123;<br>        a[k] = b[k];<br>        k--;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> b[])</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>        k = (i+j)/<span class="hljs-number">2</span>;<br>        MergeSort(a,i,k,b);<br>        MergeSort(a,k+<span class="hljs-number">1</span>,j,b);<br>        Merge(a,i,k,k+<span class="hljs-number">1</span>,j,b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-5">测试结果</h4><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022316093035.png" /></p>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-5堆中的路径</title>
    <link href="/posts/2f5b7009/"/>
    <url>/posts/2f5b7009/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/713">https://pintia.cn/problem-sets/15/problems/713</a></p><p>将一系列给定数字插入一个初始为空的小顶堆H[]。随后对任意给定的下标i，打印从H[i]到根结点的路径。</p><h3 id="输入格式">输入格式:</h3><p>每组测试第1行包含2个正整数N和M(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000,10000]内的N个要被插入一个初始为空的小顶堆的整数。最后一行给出M个下标。</p><h3 id="输出格式">输出格式:</h3><p>对输入中给出的每个下标i，在一行中输出从H[i]到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">46 </span><span class="hljs-number">23</span> <span class="hljs-number">26</span> <span class="hljs-number">24</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">24 </span><span class="hljs-number">23</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">46 </span><span class="hljs-number">23</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">26 </span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><h3 id="小顶堆">小顶堆</h3><p>这道题首先应该创建一个小顶堆，有点像之前看过的那个视频。<ahref="https://www.bilibili.com/video/BV1Eb41147dK">BiliBili视频地址</a></p><p>和视频中不同的是，这里需要的是插入而不是存储之后再堆化。</p><p>那么首先就来新建一个小顶堆，因为是完全二叉树，所以每次插入数据都是在数组的末尾。</p><p>插入之后进行变换，也就是和父节点进行比对，然后看是否交换顺序，直到根节点。</p><p>因为是完全二叉树就能够通过下标找到子结点和父结点，再加上题目是从下标1开始算的。那么求父结点方法就是下标/2,求子结点的方法就是下标* 2和 下标 * 2 + 1</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[] , <span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-type">int</span> temp = arr[i];<br>arr[i] = arr[j];<br>arr[j] = temp; <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> heap[], <span class="hljs-type">int</span> i)</span> &#123;<br><span class="hljs-type">int</span> p = i / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span>(p &gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (heap[i] &lt; heap[p]) &#123;<br>swap(heap,i,p);<br>i = p;<br>p = p / <span class="hljs-number">2</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> N,M;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;N,&amp;M);<br><span class="hljs-type">int</span>* heap = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (N+<span class="hljs-number">1</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;heap[i]);<br>heapify(heap,i);<br>&#125;<br><span class="hljs-type">int</span>* way = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * M);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;way[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br><span class="hljs-keyword">while</span> (way[i] &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,heap[way[i]]);<br><span class="hljs-keyword">if</span>(way[i] != <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>way[i] /= <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-4是否同一棵二叉搜索树</title>
    <link href="/posts/54102e26/"/>
    <url>/posts/54102e26/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/712">https://pintia.cn/problem-sets/15/problems/712</a></p><p>给定一个插入序列就可以唯一确定一棵二叉搜索树。然而，一棵给定的二叉搜索树却可以由多种不同的插入序列得到。例如分别按照序列{2,1, 3}和{2, 3,1}插入初始为空的二叉搜索树，都得到一样的结果。于是对于输入的各种插入序列，你需要判断它们是否能生成一样的二叉搜索树。</p><h3 id="输入格式">输入格式:</h3><p>输入包含若干组测试数据。每组数据的第1行给出两个正整数N(≤10)和L，分别是每个序列插入元素的个数和需要检查的序列个数。第2行给出N个以空格分隔的正整数，作为初始插入序列。随后L行，每行给出N个插入的元素，属于L个需要检查的序列。</p><p>简单起见，我们保证每个插入序列都是1到N的一个排列。当读到N为0时，标志输入结束，这组数据不要处理。</p><h3 id="输出格式">输出格式:</h3><p>对每一组需要检查的序列，如果其生成的二叉搜索树跟对应的初始序列生成的一样，输出“Yes”，否则输出“No”。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Yes</span><br><span class="hljs-keyword">No</span><br><span class="hljs-keyword">No</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><h3 id="三种方法">三种方法</h3><p>最先想到的肯定是建立两棵树，然后两棵树进行对比。要是真的这么简单就好了，BF那还不天下第一。</p><p>或许只需要建一颗树呢？然后用序列到树中查找对比。貌似又要简单了一些。</p><p>结合二叉搜索树的性质，把序列拆开然后递归判断（序列中第一个数就是根结点）</p><p>最后采用的还是先建一颗树，然后比对</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">Tree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br><span class="hljs-type">int</span> v;<br>Tree Left, Right;<br><span class="hljs-type">int</span> flag;<br>&#125;;<br><br>Tree <span class="hljs-title function_">MakeTree</span><span class="hljs-params">( <span class="hljs-type">int</span> N )</span>;<br>Tree <span class="hljs-title function_">Insert</span><span class="hljs-params">( Tree T, <span class="hljs-type">int</span> V )</span>;<br>Tree <span class="hljs-title function_">NewNode</span><span class="hljs-params">( <span class="hljs-type">int</span> V )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span> <span class="hljs-params">( Tree T, <span class="hljs-type">int</span> V )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Judge</span><span class="hljs-params">( Tree T, <span class="hljs-type">int</span> N )</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">ResetT</span> <span class="hljs-params">( Tree T )</span>;<span class="hljs-comment">// 清除T中各结点的flag标记</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> N, L, i;<br>Tree T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br><span class="hljs-keyword">while</span> (N) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;L);<br>T = MakeTree(N);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; L; i++) &#123;<br><span class="hljs-keyword">if</span> (Judge(T, N)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>&#125;<br>ResetT(T); <span class="hljs-comment">/*清除T中的标记flag*/</span><br>&#125;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>Tree <span class="hljs-title function_">MakeTree</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> &#123; <br>Tree T;<br><span class="hljs-type">int</span> i, V;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;V);<br>T = NewNode(V);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;V);<br>T = Insert(T, V);<br>&#125;<br><span class="hljs-keyword">return</span> T;<br>&#125;<br><br>Tree <span class="hljs-title function_">Insert</span><span class="hljs-params">( Tree T, <span class="hljs-type">int</span> V )</span> &#123;<br><span class="hljs-keyword">if</span> ( !T ) &#123;<br>T = NewNode(V);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> ( V &gt; T-&gt;v ) &#123;<br>T-&gt;Right = Insert( T-&gt;Right, V );<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>T-&gt;Left = Insert( T-&gt;Left, V );<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> T;<br>&#125;<br><br>Tree <span class="hljs-title function_">NewNode</span><span class="hljs-params">( <span class="hljs-type">int</span> V )</span> &#123; <br>Tree T = (Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>T-&gt;v = V;<br>T-&gt;Left = T-&gt;Right = <span class="hljs-literal">NULL</span>;<br>T-&gt;flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> T;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span> <span class="hljs-params">( Tree T, <span class="hljs-type">int</span> V )</span> &#123;<br><span class="hljs-keyword">if</span> ( T-&gt;flag ) &#123;<br><span class="hljs-keyword">if</span> ( V &lt; T-&gt;v ) &#123;<br><span class="hljs-keyword">return</span> check(T-&gt;Left, V);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( V &gt; T-&gt;v ) &#123;<br><span class="hljs-keyword">return</span> check(T-&gt;Right, V);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> ( V == T-&gt;v ) &#123;<br>T-&gt;flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Judge</span><span class="hljs-params">( Tree T, <span class="hljs-type">int</span> N )</span> &#123;<br><span class="hljs-type">int</span> i, V, flag = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// flag: 0代表目前还一致，1代表已经不一致</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;V);<br><span class="hljs-keyword">if</span> ( V != T-&gt;v ) &#123;<br>flag = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>T-&gt;flag = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;V);<br><span class="hljs-keyword">if</span> ((!flag) &amp;&amp; (!check(T, V))) &#123;<br>flag = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ResetT</span> <span class="hljs-params">( Tree T )</span><br>&#123;<br><span class="hljs-keyword">if</span> (T-&gt;Left) &#123;<br>ResetT(T-&gt;Left);<br>&#125;<br><span class="hljs-keyword">if</span> (T-&gt;Right) &#123;<br>ResetT(T-&gt;Right);<br>&#125;<br>T-&gt;flag = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-3树的同构</title>
    <link href="/posts/3cd2b93e/"/>
    <url>/posts/3cd2b93e/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/711">https://pintia.cn/problem-sets/15/problems/711</a></p><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/2022311090159.png" /></p><p>现给定两棵树，请你判断它们是否是同构的。</p><h3 id="输入格式">输入格式</h3><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数N(≤10)，即该树的结点数（此时假设结点从0到N−1编号）；随后N行，第i行对应编号第i个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h3 id="输出格式">输出格式</h3><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h3 id="输入样例1对应图1">输入样例1（对应图1）：</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">8</span><br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">5</span> -<br><span class="hljs-attribute">D</span> - -<br><span class="hljs-attribute">E</span> <span class="hljs-number">6</span> -<br><span class="hljs-attribute">G</span> <span class="hljs-number">7</span> -<br><span class="hljs-attribute">F</span> - -<br><span class="hljs-attribute">H</span> - -<br><span class="hljs-attribute">8</span><br><span class="hljs-attribute">G</span> - <span class="hljs-number">4</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">F</span> - -<br><span class="hljs-attribute">A</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">H</span> - -<br><span class="hljs-attribute">C</span> <span class="hljs-number">0</span> -<br><span class="hljs-attribute">D</span> - -<br><span class="hljs-attribute">E</span> <span class="hljs-number">2</span> -<br></code></pre></td></tr></table></figure><h3 id="输出样例1">输出样例1:</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span><br></code></pre></td></tr></table></figure><h3 id="输入样例2对应图2">输入样例2（对应图2）：</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">8</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">F</span> - -<br><span class="hljs-attribute">A</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">6</span> -<br><span class="hljs-attribute">H</span> - -<br><span class="hljs-attribute">D</span> - -<br><span class="hljs-attribute">G</span> <span class="hljs-number">4</span> -<br><span class="hljs-attribute">E</span> <span class="hljs-number">1</span> -<br><span class="hljs-attribute">8</span><br><span class="hljs-attribute">D</span> <span class="hljs-number">6</span> -<br><span class="hljs-attribute">B</span> <span class="hljs-number">5</span> -<br><span class="hljs-attribute">E</span> - -<br><span class="hljs-attribute">H</span> - -<br><span class="hljs-attribute">C</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">G</span> - <span class="hljs-number">3</span><br><span class="hljs-attribute">F</span> - -<br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="输出样例2">输出样例2:</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">No</span><br></code></pre></td></tr></table></figure><h2 id="思考">思考</h2><h3 id="递归思想">递归思想</h3><p>首先是存储方式，按照以上的输入格式想到的应该是利用数组来存储。</p><p>那又该如何比较呢？下面分为多个情况来讨论</p><ul><li><p>如果两树都为空树那么自然同构</p></li><li><p>两树中有一个为空，另一个为非空那么就不同构</p></li><li><p>根数据不同则不同构</p></li><li><p>两树左子树为空看右子树是否同构</p></li><li><p>两树左子树不为空且数据一致则递归左子树</p></li><li><p>两树左子树结构不同（一空一不空或都不空）但数据不同。此时判断第一颗树的左（右）子树是否和另一颗树右（左）子树同构</p></li></ul><p>既然是递归那么就需要一个出口那么就专门在数组中留一个位置用作标记。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxTree 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ElementType char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Tree int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Null -1</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    ElementType e;<br>    Tree left;<br>    Tree right;<br>&#125;T1[MaxTree],T2[MaxTree];<br><br>Tree <span class="hljs-title function_">BuildTree</span><span class="hljs-params">( <span class="hljs-keyword">struct</span> TreeNode T[])</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Isomorphic</span><span class="hljs-params">(Tree R1,Tree R2)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    Tree R1,R2;<br><br>    R1 = BuildTree(T1);<br>    R2 = BuildTree(T2);<br>    <span class="hljs-keyword">if</span>( Isomorphic(R1,R2)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br>Tree <span class="hljs-title function_">BuildTree</span> <span class="hljs-params">( <span class="hljs-keyword">struct</span> TreeNode T[])</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> check[MaxTree];<br>    <span class="hljs-type">char</span> cl,cr;<br>    Tree root = Null;   <span class="hljs-comment">//若n为0，返回Null</span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">if</span>( n )&#123;<br>        <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            check[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;\n%c %c %c&quot;</span>,&amp;T[i].e , &amp;cl , &amp;cr);<br>            <span class="hljs-keyword">if</span> ( cl != <span class="hljs-string">&#x27;-&#x27;</span> ) &#123;<br>                T[i].left = cl - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                check[T[i].left] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( cl == <span class="hljs-string">&#x27;-&#x27;</span> )&#123;<br>                T[i].left = Null;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( cr != <span class="hljs-string">&#x27;-&#x27;</span> ) &#123;<br>                T[i].right = cr - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                check[T[i].right] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( cr == <span class="hljs-string">&#x27;-&#x27;</span> ) &#123;<br>                T[i].right = Null;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>( !check[i] )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        root = i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Isomorphic</span><span class="hljs-params">(Tree R1,Tree R2)</span> &#123;<br>    <span class="hljs-keyword">if</span>((R1 == Null) &amp;&amp; (R2 == Null)) <span class="hljs-comment">//如果为空树则是同构的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(((R1 == Null) &amp;&amp; (R2 != Null)) || ((R1 != Null) &amp;&amp; (R2 == Null))) <span class="hljs-comment">//如果一个为空一个不为空则不是同构的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span>((T1[R1].e)!=(T2[R2].e)) <span class="hljs-comment">//如果数据不同则不是同构的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//如果左儿子都为空判断右儿子是否同构</span><br>    <span class="hljs-keyword">if</span>((T1[R1].left == Null) &amp;&amp; (T2[R2].left == Null))<br>        <span class="hljs-keyword">return</span> Isomorphic(T1[R1].right,T2[R2].right);<br><br>    <span class="hljs-comment">//如果两棵树左儿子都不为空并且数据还是一样的，对左儿子进行递归</span><br>    <span class="hljs-keyword">if</span> ( ((T1[R1].left != Null) &amp;&amp; (T2[R2].left != Null)) &amp;&amp; ((T1[T1[R1].left].e) == (T2[T2[R2].left].e)) )<br>        <span class="hljs-keyword">return</span> ( Isomorphic( T1[R1].left, T2[R2].left ) &amp;&amp; Isomorphic( T1[R1].right, T2[R2].right ) );<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">如果两棵树左儿子（一个空一个不空或者都不空）并且数据不一样，</span><br><span class="hljs-comment">那么判断第一棵树的左（右）儿子是否跟第二棵树的右（左）儿子同构 </span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> ( Isomorphic( T1[R1].left, T2[R2].right) &amp;&amp; Isomorphic( T1[R1].right, T2[R2].left ) );<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-2一元多项式的乘法与加法运算</title>
    <link href="/posts/7030bb/"/>
    <url>/posts/7030bb/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/710">https://pintia.cn/problem-sets/15/problems/710</a></p><p>设计函数分别求两个一元多项式的乘积与和。</p><h3 id="输入格式">输入格式</h3><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式">输出格式</h3><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出<code>0 0</code>。</p><h3 id="输入样式">输入样式</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> -<span class="hljs-number">5</span> <span class="hljs-number">2</span>  <span class="hljs-number">6</span> <span class="hljs-number">1</span>  -<span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">20</span>  -<span class="hljs-number">7</span> <span class="hljs-number">4</span>  <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="输出样式">输出样式</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">15</span> <span class="hljs-number">24</span> -<span class="hljs-number">25</span> <span class="hljs-number">22</span> <span class="hljs-number">30</span> <span class="hljs-number">21</span> -<span class="hljs-number">10</span> <span class="hljs-number">20</span> -<span class="hljs-number">21</span> <span class="hljs-number">8</span> <span class="hljs-number">35</span> <span class="hljs-number">6</span> -<span class="hljs-number">33</span> <span class="hljs-number">5</span> <span class="hljs-number">14</span> <span class="hljs-number">4</span> -<span class="hljs-number">15</span> <span class="hljs-number">3</span> <span class="hljs-number">18</span> <span class="hljs-number">2</span> -<span class="hljs-number">6</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">5</span> <span class="hljs-number">20</span> -<span class="hljs-number">4</span> <span class="hljs-number">4</span> -<span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">1</span> -<span class="hljs-number">2</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="法一-链表">法一 链表</h2><h3 id="思考">思考</h3><p>这是在数据结构书上出现过的一道题目，只不过书上没有说多项式的乘积。想来实现原理也应该大同小异。</p><p>关键就是链表，用链表来存储每个不同指数的项。看来我也好久没有写过代码，这点都想不到了。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br><span class="hljs-type">int</span> xishu;<br><span class="hljs-type">int</span> zhishu;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125; List;<br><br>List* <span class="hljs-title function_">merge</span><span class="hljs-params">(List* l1,List* l2)</span>&#123; <br><span class="hljs-keyword">if</span>(!l1-&gt;next &amp;&amp; !l2-&gt;next) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!l1-&gt;next) &#123;<br><span class="hljs-keyword">return</span> l2;<br>&#125;<br><span class="hljs-keyword">if</span> (!l2-&gt;next) &#123;<br><span class="hljs-keyword">return</span> l1;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">head</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span> =</span> head;<br>l1 = l1-&gt;next;<br>l2 = l2-&gt;next;<br><span class="hljs-keyword">while</span>(l1 &amp;&amp; l2) &#123;<br><span class="hljs-keyword">if</span> (l1-&gt;zhishu == l2-&gt;zhishu) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">node</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>node-&gt;next = <span class="hljs-literal">NULL</span>;<br>node-&gt;zhishu = l1-&gt;zhishu;<br>node-&gt;xishu = l1-&gt;xishu + l2-&gt;xishu;<br><span class="hljs-keyword">if</span> (node-&gt;xishu == <span class="hljs-number">0</span>) &#123;<br>l1 = l1-&gt;next;<br>            l2 = l2-&gt;next;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>next-&gt;next = node;<br>            l1 = l1-&gt;next;<br>            l2 = l2-&gt;next;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l1-&gt;zhishu &gt; l2-&gt;zhishu) &#123;<br>next-&gt;next = l1;<br>l1 = l1-&gt;next;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>next-&gt;next = l2;<br>l2 = l2-&gt;next;<br>&#125;<br>next = next-&gt;next;<br>&#125;<br><span class="hljs-keyword">if</span> (!l1) &#123;<br>next-&gt;next = l2;<br>&#125;<br><span class="hljs-keyword">if</span> (!l2) &#123;<br>next-&gt;next = l1;<br>&#125;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br>List* <span class="hljs-title function_">chengji</span><span class="hljs-params">(List* l1,List* l2)</span> &#123;<br><span class="hljs-keyword">if</span>(!l1-&gt;next || !l2-&gt;next) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>List* head = (List*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>List* l1_loop = l1-&gt;next;<br><span class="hljs-keyword">while</span>(l1_loop) &#123;<br>List* temp = (List*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>List* next = temp;<br>        List* l2_loop = l2-&gt;next;<br><span class="hljs-keyword">while</span>(l2_loop) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">node</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>node-&gt;next = <span class="hljs-literal">NULL</span>;<br>node-&gt;zhishu = l1_loop-&gt;zhishu + l2_loop-&gt;zhishu;<br>node-&gt;xishu = l1_loop-&gt;xishu * l2_loop-&gt;xishu;<br>next-&gt;next = node;<br>            next = next-&gt;next;<br>l2_loop = l2_loop-&gt;next;<br>&#125;<br>head = merge(head,temp);<br>l1_loop = l1_loop-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(List* l1,List* l2)</span> &#123;<br>List* cj = chengji(l1,l2);<br><span class="hljs-keyword">if</span>(!cj) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span>(cj-&gt;next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cj-&gt;next-&gt;xishu);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cj-&gt;next-&gt;zhishu);<br><span class="hljs-keyword">if</span>(cj-&gt;next-&gt;next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>cj = cj-&gt;next; <br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>List* sum = merge(l1,l2);<br><span class="hljs-keyword">if</span>(!sum-&gt;next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span>(sum-&gt;next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum-&gt;next-&gt;xishu);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum-&gt;next-&gt;zhishu);<br><span class="hljs-keyword">if</span>(sum-&gt;next-&gt;next) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>sum = sum-&gt;next;<br>&#125;<br>&#125;<br>&#125; <br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> xishu;<br><span class="hljs-type">int</span> zhishu;<br>    <span class="hljs-type">int</span> row1_num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;row1_num);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">row1_head</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span> =</span> row1_head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; row1_num ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;xishu);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;zhishu);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">node</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>        node-&gt;xishu = xishu;<br>        node-&gt;zhishu= zhishu;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>        next-&gt;next = node;<br>        next = node;<br>    &#125;<br>    <span class="hljs-type">int</span> row2_num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;row2_num);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">row2_head</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>    next = row2_head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; row2_num ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;xishu);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;zhishu);<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">node</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>        node-&gt;xishu = xishu;<br>        node-&gt;zhishu= zhishu;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>        next-&gt;next = node;<br>        next = node;<br>    &#125;<br>    show(row1_head,row2_head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不写注释是吧，还就那个不写。</p><h2 id="法二-数组">法二 数组</h2><h3 id="思考-1">思考</h3><p>既然说了最大指数绝对值不超过1000，省去指数的存储用数组的下标来表示。</p><p>考虑到乘法，莫不是要1000000这么大？</p><p>比较精妙的地方就是用一个count来计数，表示合并之后是否为零多项式。</p><p>当count不为0表示不是零多项式。</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> list1[<span class="hljs-number">1001</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> list2[<span class="hljs-number">1001</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> xishu;<br><span class="hljs-type">int</span> zhishu;<br>    <span class="hljs-type">int</span> row1_num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;row1_num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; row1_num ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;xishu);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;zhishu);<br>list1[zhishu] = xishu;<br>    &#125;<br>    <span class="hljs-type">int</span> row2_num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;row2_num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; row2_num ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;xishu);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;zhishu);<br>list2[zhishu] = xishu;<br>    &#125;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> c[<span class="hljs-number">1000001</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt;= <span class="hljs-number">1000</span> ; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ; j &lt;= <span class="hljs-number">1000</span> ; j++) &#123;<br>    <span class="hljs-type">int</span> xishu = list1[i] * list2[j];<br>    <span class="hljs-type">int</span> zhishu = i + j;<br>    <br>    <span class="hljs-keyword">if</span> (xishu != <span class="hljs-number">0</span>) &#123;<br>    c[zhishu] += xishu;<br>    count++;<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000000</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br><span class="hljs-keyword">if</span> ( c[i] != <span class="hljs-number">0</span> ) &#123;<br><span class="hljs-keyword">if</span>( flag == <span class="hljs-number">0</span> ) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,c[i],i);<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>    <br>    flag = <span class="hljs-number">1</span>;<br>    count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1001</span> ; i++) &#123;<br>        list1[i] += list2[i];<br>    <span class="hljs-keyword">if</span>(list1[i] != <span class="hljs-number">0</span>) &#123;<br>    count++;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br><span class="hljs-keyword">if</span> ( list1[i] != <span class="hljs-number">0</span> ) &#123;<br><span class="hljs-keyword">if</span>( flag == <span class="hljs-number">0</span> ) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,list1[i],i);<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-1最大子列和问题</title>
    <link href="/posts/a0c69f6f/"/>
    <url>/posts/a0c69f6f/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/709">https://pintia.cn/problem-sets/15/problems/709</a></p><p>给定<span class="math inline">\({K}\)</span>个整数组成的序列{ <spanclass="math inline">\(N_{1}\)</span> , <spanclass="math inline">\(N_{2}\)</span> , ..., <spanclass="math inline">\(N_{K}\)</span> }，"连续子列"被定义为{ <spanclass="math inline">\(N_{i}\)</span> , <spanclass="math inline">\(N_{i+1}\)</span> , ..., <spanclass="math inline">\(N_{j}\)</span> }。</p><p>其中 <span class="math inline">\(1≤ i ≤ j ≤ K\)</span>。"最大子列和"则被定义为所有连续子列元素的和中最大者。</p><p>例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13}有最大的和20。</p><p>现要求你编写程序，计算给定整数序列的最大子列和。本题旨在测试各种不同的算法在各种数据情况下的表现。</p><p>各组测试数据特点如下：</p><ul><li>数据1：与样例等价，测试基本正确性；</li><li>数据2：<span class="math inline">\(10^{2}\)</span>个随机整数；</li><li>数据3：<span class="math inline">\(10^{3}\)</span>个随机整数；</li><li>数据4：<span class="math inline">\(10^{4}\)</span>个随机整数；</li><li>数据5：<span class="math inline">\(10^{5}\)</span>个随机整数；</li></ul><h3 id="输入格式">输入格式:</h3><p>输入第1行给出正整数<span class="math inline">\(K(≤100000)\)</span>；第2行给出<spanclass="math inline">\(K\)</span>个整数，其间以空格分隔。</p><h3 id="输出格式">输出格式:</h3><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。</p><h3 id="输入样例">输入样例:</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">6<br><span class="hljs-string">-2</span> 11 <span class="hljs-string">-4</span> 13 <span class="hljs-string">-5</span> <span class="hljs-string">-2</span><br></code></pre></td></tr></table></figure><h3 id="输出样例">输出样例:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">20<br></code></pre></td></tr></table></figure><h2 id="法一-动态规划">法一 动态规划</h2><h3 id="思考">思考</h3><p>考虑整个n长度的数组，序号是从0到n-1的。对于任意的子序列都肯定会有一个结尾的序号。这样就可以想象一个数组，记录的值就是以当前序号为结尾的子序列的最大子列和。</p><p>已知前一个的值，怎么求后面的值？就是考虑之后的那个数组值加到之前的序列是比本身大还是小。如果小就把之前的值舍弃，否则就加入。</p><p>那么动态规划转移方程就是:</p><p><span class="math display">\[ f(i) = max \{ f(i-1) + nums[i] ,nums[i] \} \]</span></p><p>然后考虑全为负数的情况。很容易就想到，当序列中只要存在一个正数那么最大子列和都应该大于0而不是小于0，所以当最大子列和为负时所有值为复数。</p><p>那如果只存在0和负数呢？同理可得，最大子列和为0。也就不在考虑范围内。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>    <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>, maxAns = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        pre = fmax(pre + nums[i], nums[i]);<br>        maxAns = fmax(maxAns, pre);<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxAns &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : maxAns;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> numsSize;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;numsSize);<br>    <span class="hljs-type">int</span>* nums = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * numsSize); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; numsSize ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nums[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,maxSubArray(nums,numsSize));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="法二-分治">法二 分治</h2><h3 id="思考-1">思考</h3><p>(以下想法来自<ahref="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/">LeetCode</a>)</p><p>先试想定义一个操作<code>get(a, l ,r)</code>表示查询a序列<spanclass="math inline">\([l,r]\)</span>区间内的最大子段和。那么这道题就是求<code>get(nums, 0 , nums.size() - 1)</code>。</p><p>如何分治实现这个操作呢？对于一个区间<spanclass="math inline">\([l,r]\)</span>，我们取<spanclass="math inline">\({\lfloor m = \frac {l+r} {2} \rfloor}\)</span>，对区间<span class="math inline">\({[l,m]}\)</span>和<spanclass="math inline">\([m+1,r]\)</span>分治求解。当递归逐层深入知道区间长度为1的时候，递归开始回升。</p><p>这个时候我们考虑如何通过 <span class="math inline">\([l,m]\)</span>区间的信息和 <span class="math inline">\([m+1,r]\)</span>区间的信息合并成区间 <span class="math inline">\([l,r]\)</span>的信息。最关键的两个问题是：</p><ul><li>我们要维护区间的哪些信息呢？</li><li>我们如何合并这些信息呢？</li></ul><p>对于一个区间 <spanclass="math inline">\([l,r]\)</span>，我们可以维护四个量：</p><ul><li><span class="math inline">\({lSum}\)</span> 表示 <spanclass="math inline">\([l,r]\)</span> 内以 <spanclass="math inline">\({l}\)</span> 为左端点的最大子列和</li><li><span class="math inline">\({rSum}\)</span> 表示 <spanclass="math inline">\([l,r]\)</span> 内以 <spanclass="math inline">\({r}\)</span> 为右端点的最大子列和</li><li><span class="math inline">\({mSum}\)</span> 表示 <spanclass="math inline">\([l,r]\)</span> 内的最大子列和</li><li><span class="math inline">\({iSum}\)</span> 表示 <spanclass="math inline">\([l,r]\)</span> 的区间和</li></ul><p>对于长度为1的区间，四个值的量都与<spanclass="math inline">\({nums[i]}\)</span>相等</p><p>对于长度大于1的区间：</p><ul><li><p>首先最好维护的就是<spanclass="math inline">\({iSum}\)</span>，区间<spanclass="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({iSum}\)</span>就等于左子区间的<spanclass="math inline">\({iSum}\)</span>加上右子区间的<spanclass="math inline">\({iSum}\)</span>。</p></li><li><p>对于<span class="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({lSum}\)</span>，存在两种情况，它要么等于左子区间的<spanclass="math inline">\({lSum}\)</span>，要么等于左子区间的<spanclass="math inline">\({iSum}\)</span>加上右区间的<spanclass="math inline">\({lSum}\)</span>，二者取大。</p></li><li><p>对于<span class="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({rSum}\)</span>，同理，它要么等于右子区间的<spanclass="math inline">\({rSum}\)</span>，要么等于右子区间的<spanclass="math inline">\({iSum}\)</span>加上左子区间的<spanclass="math inline">\({rSum}\)</span>，二者取大。</p></li><li><p>当计算好上面的三个量之后，就很好计算<spanclass="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({mSum}\)</span>了。我们可以考虑<spanclass="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({mSum}\)</span>对应的区间是否跨越m——它可能不跨越m，也就是说<spanclass="math inline">\({[l,r]}\)</span>的<spanclass="math inline">\({mSum}\)</span>可能是左子区间的<spanclass="math inline">\({mSum}\)</span>和右子区间的<spanclass="math inline">\({mSum}\)</span>中的一个；它也可能跨越m，可能是左子区间的<spanclass="math inline">\({rSum}\)</span>和右子区间的<spanclass="math inline">\({lSum}\)</span>求和。三者取大。</p></li></ul><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Status</span> &#123;</span><br>    <span class="hljs-type">int</span> lSum, rSum, mSum, iSum;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> Status <span class="hljs-title function_">pushUp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Status l, <span class="hljs-keyword">struct</span> Status r)</span> &#123;<br>    <span class="hljs-type">int</span> iSum = l.iSum + r.iSum;<br>    <span class="hljs-type">int</span> lSum = fmax(l.lSum, l.iSum + r.lSum);<br>    <span class="hljs-type">int</span> rSum = fmax(r.rSum, r.iSum + l.rSum);<br>    <span class="hljs-type">int</span> mSum = fmax(fmax(l.mSum, r.mSum), l.rSum + r.lSum);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> Status)&#123;lSum, rSum, mSum, iSum&#125;;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> Status <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> Status)&#123;a[l], a[l], a[l], a[l]&#125;;<br>    &#125;<br>    <span class="hljs-type">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Status</span> <span class="hljs-title">lSub</span> =</span> get(a, l, m);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Status</span> <span class="hljs-title">rSub</span> =</span> get(a, m + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">return</span> pushUp(lSub, rSub);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-type">int</span> max = get(nums, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>).mSum;<br>    <span class="hljs-keyword">return</span> max &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : max;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> numsSize;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;numsSize);<br>    <span class="hljs-type">int</span>* nums = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * numsSize); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; numsSize ; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nums[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,maxSubArray(nums,numsSize));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-12二叉搜索树的操作集</title>
    <link href="/posts/d18fe677/"/>
    <url>/posts/d18fe677/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现给定二叉搜索树的5种常用操作。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/927">https://pintia.cn/problem-sets/15/problems/927</a></p><p>BinTree结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="插入结点">插入结点</h2><h3 id="要求">要求</h3><p>函数Insert将X插入二叉搜索树BST并返回结果树的根结点指针。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">BinTree <span class="hljs-title function_">Insert</span><span class="hljs-params">( BinTree BST, ElementType X )</span> &#123;<br>    BinTree node = (BinTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> TNode));<br>    node-&gt;Data = X;<br>    node-&gt;Left = <span class="hljs-literal">NULL</span>;<br>    node-&gt;Right = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (!BST) &#123;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (X &gt; BST-&gt;Data) &#123;<br>        BST-&gt;Right = Insert(BST-&gt;Right,X);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &lt; BST-&gt;Data) &#123;<br>        BST-&gt;Left = Insert(BST-&gt;Left,X);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> BST;<br>    &#125;<br>    <span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除结点">删除结点</h2><h3 id="要求-1">要求</h3><p>函数Delete将X从二叉搜索树BST中删除，并返回结果树的根结点指针；如果X不在树中，则打印一行NotFound并返回原树的根结点指针。</p><p>找到最小或者最大的结点直接替换掉删除的结点，然后查找到这个用于替换的结点在树中进行删除。因为它必为叶子结点,或单孩子结点。</p><p>算法导论上的结论就有些晦涩难懂了。</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C">BinTree <span class="hljs-title function_">Delete</span><span class="hljs-params">( BinTree BST, ElementType X )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BST)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Found\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (X &gt; BST-&gt;Data) &#123;<br>        BST-&gt;Right = Delete(BST-&gt;Right,X);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &lt; BST-&gt;Data) &#123;<br>        BST-&gt;Left = Delete(BST-&gt;Left,X);<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//删除操作</span><br>        Position Node;<br>        <span class="hljs-keyword">if</span> (BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;<br>            Node = FindMin(BST-&gt;Right);<br>            BST-&gt;Data = Node-&gt;Data;<br>            BST-&gt;Right = Delete(BST-&gt;Right, BST-&gt;Data);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Node = BST;<br>            <span class="hljs-keyword">if</span> (BST-&gt;Left == <span class="hljs-literal">NULL</span>)<br>                BST = BST-&gt;Right;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (BST-&gt;Right == <span class="hljs-literal">NULL</span>)<br>                BST = BST-&gt;Left;<br>            <span class="hljs-built_in">free</span>(Node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找结点">查找结点</h2><h3 id="要求-2">要求</h3><p>函数Find在二叉搜索树BST中找到X，返回该结点的指针；如果找不到则返回空指针。</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">Find</span><span class="hljs-params">( BinTree BST, ElementType X )</span> &#123;<br>    <span class="hljs-keyword">while</span> (BST) &#123;<br>        <span class="hljs-keyword">if</span> (X == BST-&gt;Data) &#123;<br>            <span class="hljs-keyword">return</span> BST;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (X &lt; BST-&gt;Data) &#123;<br>            BST=BST-&gt;Left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            BST=BST-&gt;Right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找最小结点">查找最小结点</h2><h3 id="要求-3">要求</h3><p>函数FindMin返回二叉搜索树BST中最小元结点的指针。</p><p>在树最左边的叶节点就是最小结点。</p><h3 id="具体代码-3">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">FindMin</span><span class="hljs-params">( BinTree BST )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BST) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (BST-&gt;Left) &#123;<br>        BST=BST-&gt;Left;<br>    &#125;<br>    <span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找最大结点">查找最大结点</h2><h3 id="要求-4">要求</h3><p>函数FindMax返回二叉搜索树BST中最大元结点的指针。</p><p>在树最右边的叶节点就是最大结点。</p><h3 id="具体代码-4">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">FindMax</span><span class="hljs-params">( BinTree BST )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BST) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (BST-&gt;Right) &#123;<br>        BST=BST-&gt;Right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-11先序输出叶结点</title>
    <link href="/posts/3294d605/"/>
    <url>/posts/3294d605/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>按照先序遍历的顺序输出给定二叉树的叶结点。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/925">https://pintia.cn/problem-sets/15/problems/925</a></p><p>BinTree结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="打印结点">打印结点</h2><h3 id="思考">思考</h3><p>不就是先序遍历，然后只输出左右子树都为NULL的结点吗？</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-10二分查找</title>
    <link href="/posts/9867a1c3/"/>
    <url>/posts/9867a1c3/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现二分查找算法</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/923">https://pintia.cn/problem-sets/15/problems/923</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Position;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">List</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    ElementType Data[MAXSIZE];<br>    Position Last; <span class="hljs-comment">/* 保存线性表中最后一个元素的位置 */</span><br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="思考">思考</h2><p>看结构应该是数组，毕竟Position都是int类型。然后又是线性表，就挨着呗！</p><p>二分查找只能用于有序的排列，一次去掉一半。</p><p>怎么保证去一半？关键就是用两个值来圈定一个范围，然后取中间的值进行比较。</p><p>那这个范围是什么东西？？？这其中就牵涉到了while退出的条件，到底是&lt;=还是 &lt;。这就需要看自己定义的是开区间还是闭区间。</p><p>[2,2] = 1 [2,2) = 0</p><p>这里还有关键的一点，为什么一次判断之后更新的范围在边界要加一或者减一。这也和之前提到的开闭区间有关，如果是开区间那么则不用变化。</p><h2 id="查找">查找</h2><h3 id="要求">要求</h3><p>L是用户传入的一个线性表，其中ElementType元素可以通过&gt;、==、&lt;进行比较，并且题目保证传入的数据是递增有序的。函数BinarySearch要查找X在Data中的位置，即数组下标（注意：元素从下标1开始存储）。找到则返回下标，否则返回一个特殊的失败标记NotFound。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">BinarySearch</span><span class="hljs-params">( List L, ElementType X )</span> &#123;<br>    <span class="hljs-type">int</span> high = L-&gt;Last;<br>    <span class="hljs-type">int</span> low  = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid;<br>    <span class="hljs-keyword">while</span>(high &gt;= low) &#123;<br>        <span class="hljs-comment">// 若查找数组很长，就可能会发生越界的情况，那么就应该改为</span><br>        <span class="hljs-comment">// mid = low + (high - low) / 2;</span><br>        mid = (high + low) / <span class="hljs-number">2</span>; <br>        <span class="hljs-keyword">if</span> (L-&gt;Data[mid] == X) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (L-&gt;Data[mid] &gt; X) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> NotFound;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展">拓展</h2><h3 id="条件">条件</h3><p>如果数组中存在相同的元素，当我们需要返回指定位置（最先出现那个数）。那么之前的方式就失效了。</p><h3 id="改进代码">改进代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">New_BinarySearch</span><span class="hljs-params">( List L, ElementType X )</span> &#123;<br>    <span class="hljs-type">int</span> high = L-&gt;Last;<br>    <span class="hljs-type">int</span> low  = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid;<br>    <span class="hljs-keyword">while</span>(high &gt;= low) &#123;<br>        <span class="hljs-comment">// 若查找数组很长，就可能会发生越界的情况，那么就应该改为</span><br>        <span class="hljs-comment">// mid = low + (high - low) / 2;</span><br>        mid = (high + low) / <span class="hljs-number">2</span>; <br>        <span class="hljs-keyword">if</span> (L-&gt;Data[mid] == X) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (L-&gt;Data[mid] &gt; X) &#123;<br>            high = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            low = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (low &gt; L-&gt;Last || L-&gt;Data[low] != X) &#123;<br>        <span class="hljs-keyword">return</span> NotFound;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="神奇之处">神奇之处</h3><p>while循环退出的条件是low == right + 1</p>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-9二叉树的遍历</title>
    <link href="/posts/a1603f81/"/>
    <url>/posts/a1603f81/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>求给定二叉树的4种遍历(前、中、后、层次)</p><p>要求4个函数分别按照访问顺序打印出结点的内容，格式为一个空格跟着一个字符。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/732">https://pintia.cn/problem-sets/15/problems/732</a></p><p>BinTree结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="前序遍历">前序遍历</h2><h3 id="思考">思考</h3><p>前序遍历是指先遍历根结点，然后再遍历左右子树，利用递归就完事，为NULL就不遍历了</p><p>遍历子树的过程就是重复上面的步骤</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BT) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>    PreorderTraversal(BT-&gt;Left);<br>    PreorderTraversal(BT-&gt;Right);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中序遍历">中序遍历</h2><h3 id="思考-1">思考</h3><p>中序遍历是指先遍历左子树，然后再遍历根结点，最后是右子树，利用递归就完事，为NULL就不遍历了</p><p>遍历子树的过程就是重复上面的步骤</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BT) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    InorderTraversal(BT-&gt;Left);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>    InorderTraversal(BT-&gt;Right);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后序遍历">后序遍历</h2><h3 id="思考-2">思考</h3><p>后序遍历是指先遍历左右子树，然后再遍历根结点，利用递归就完事，为NULL就不遍历了</p><p>遍历子树的过程就是重复上面的步骤</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BT) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    PostorderTraversal(BT-&gt;Left);<br>    PostorderTraversal(BT-&gt;Right);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="层序遍历">层序遍历</h2><h3 id="思考-3">思考</h3><p>层序遍历指的是一层一层遍历树，从以往所学的知识来看需要建立一个队列。</p><p>出队一个元素就输出他的左右子树，然后把左右子树入队直到队列为空。</p><p>那么第一步就是写一个简易的队列。带有两个名为front和rear的指针的数组。</p><h3 id="具体代码-3">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span> &#123;<br>    BinTree node_queue[<span class="hljs-number">100</span>];<br>    BinTree node;<br>    <span class="hljs-type">int</span> rear ,front = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!BT) &#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    node_queue[front] = BT;<br>    rear++;<br>    <br>    <span class="hljs-keyword">while</span>(front != rear) &#123;<br>        node = node_queue[front];<br>        front++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,node-&gt;Data);<br>        <span class="hljs-keyword">if</span>(node-&gt;Left) &#123;<br>            node_queue[rear++] = node-&gt;Left;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(node-&gt;Right) &#123;<br>            node_queue[rear++] = node-&gt;Right;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-8求二叉树高度</title>
    <link href="/posts/611eb79c/"/>
    <url>/posts/611eb79c/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>求给定二叉树的高度</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/731">https://pintia.cn/problem-sets/15/problems/731</a></p><p>BinTree结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="思考">思考</h2><p>递归思想</p><p>对整棵树而言，就是根和左右子树。那么此时二叉树的高度为左右子树最高的那棵树加1就为整棵树的高度</p><p>以此类推（这一步可能会有点难以理解）</p><p>怎么说呢？递归到倒数第二阶段不就是一个结点了嘛！然后这个高度为1，怎么得到的呢？</p><p>这是通过对于两个空左右子树返回高度为0然后加上自身的1得到的，所有出口就是对空树返回0</p><h2 id="具体代码">具体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">GetHeight</span><span class="hljs-params">( BinTree BT )</span> &#123;<br>    <span class="hljs-keyword">if</span> (!BT) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> h_left = GetHeight(BT-&gt;Left);<br>    <span class="hljs-type">int</span> h_right = GetHeight(BT-&gt;Right);<br>    <span class="hljs-keyword">return</span> (h_left &gt; h_right ? h_left  : h_right) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-7在一个数组中实现两个堆栈</title>
    <link href="/posts/fefe197e/"/>
    <url>/posts/fefe197e/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现带头结点的链式表操作集，也就是对带头结点的链表进行增删改查。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/730">https://pintia.cn/problem-sets/15/problems/730</a></p><p>Stack结构定义 其中Tag是堆栈编号，取1或2；MaxSize堆栈数组的规模<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Position;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> &#123;</span><br>    ElementType *Data;<br>    Position Top1, Top2;<br>    <span class="hljs-type">int</span> MaxSize;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> *<span class="hljs-title">Stack</span>;</span><br></code></pre></td></tr></table></figure></p><h2 id="思考">思考</h2><h3 id="位置安排">位置安排</h3><p>两个栈如何来安排位置？</p><p>比较容易想到的也就是教科书上所描述的那种方式，栈顶放在中间。</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202234092357.png" /></p><h3 id="栈顶元素">栈顶元素</h3><p>那么栈顶是否存放元素呢？</p><p>如果栈顶存放元素，栈的起始位置应该为-1以及MaxSize（数组刚好越界为1的地方）。不存放的话也和这个差别不大。秉持勤俭节约的美德，还是放元素吧！</p><h3 id="判满判空">判满判空</h3><p>对于两个栈分别判满这个简单，就看栈顶加一或者减一是否和另一个栈栈顶重合。</p><p>判空那就更简单了，直接看栈顶位置，要是是越界的就是空的。</p><h2 id="创建堆栈">创建堆栈</h2><h3 id="要求">要求</h3><p>观察结构体发现需要两次malloc，一次是具体存放数据的数组，另一次是管理堆栈的数据结构</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">Stack <span class="hljs-title function_">CreateStack</span><span class="hljs-params">( <span class="hljs-type">int</span> MaxSize )</span> &#123;<br>    ElementType* Data = (ElementType *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElementType) * MaxSize);<br>    Stack S = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>    S-&gt;Data = Data;<br>    S-&gt;Top1 = <span class="hljs-number">-1</span>;<br>    S-&gt;Top2 = MaxSize;<br>    S-&gt;MaxSize = MaxSize;<br>    <span class="hljs-keyword">return</span> S;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="入栈">入栈</h2><h3 id="要求-1">要求</h3><p>如果堆栈已满，Push函数必须输出“Stack Full”并且返回false。</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">Push</span><span class="hljs-params">( Stack S, ElementType X, <span class="hljs-type">int</span> Tag )</span> &#123;<br>    <span class="hljs-keyword">if</span> (Tag == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;Top1 + <span class="hljs-number">1</span> == S-&gt;Top2) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack Full\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        S-&gt;Top1++;<br>        S-&gt;Data[S-&gt;Top1] = X;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(S-&gt;Top2 - <span class="hljs-number">1</span> == S-&gt;Top1) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack Full\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        S-&gt;Top2--;<br>        S-&gt;Data[S-&gt;Top2] = X;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="出栈">出栈</h2><h3 id="要求-2">要求</h3><p>如果某堆栈是空的，则Pop函数必须输出“Stack TagEmpty”（其中Tag是该堆栈的编号），并且返回ERROR。</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">ElementType <span class="hljs-title function_">Pop</span><span class="hljs-params">( Stack S, <span class="hljs-type">int</span> Tag )</span> &#123;<br>    ElementType number;<br>    <span class="hljs-keyword">if</span> (Tag == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (S-&gt;Top1 == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack %d Empty\n&quot;</span>,Tag);<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        number = S-&gt;Data[S-&gt;Top1];<br>        S-&gt;Top1--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (S-&gt;Top2 == S-&gt;MaxSize) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stack %d Empty\n&quot;</span>,Tag);<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        number = S-&gt;Data[S-&gt;Top2];<br>        S-&gt;Top2++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> number;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-6带头结点的链式表操作集</title>
    <link href="/posts/1143a932/"/>
    <url>/posts/1143a932/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现带头结点的链式表操作集，也就是对带头结点的链表进行增删改查。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/729">https://pintia.cn/problem-sets/15/problems/729</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">PtrToLNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    ElementType Data;<br>    PtrToLNode Next;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToLNode Position;<br><span class="hljs-keyword">typedef</span> PtrToLNode List;<br></code></pre></td></tr></table></figure></p><h2 id="创建空表">创建空表</h2><h3 id="要求">要求</h3><p>创建并返回一个空的线性表，就是弄一个头结点</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">MakeEmpty</span><span class="hljs-params">()</span> &#123;<br>    List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    L-&gt;Data = <span class="hljs-number">0</span>;<br>    L-&gt;Next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询元素">查询元素</h2><h3 id="要求-1">要求</h3><p>返回线性表中X的位置。若找不到则返回ERROR</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">Find</span><span class="hljs-params">( List L, ElementType X )</span> &#123;<br>    <span class="hljs-keyword">while</span>(L-&gt;Next) &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;Next-&gt;Data == X) &#123;<br>            <span class="hljs-keyword">return</span> L-&gt;Next;<br>        &#125;<br>        L = L-&gt;Next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入元素">插入元素</h2><h3 id="要求-2">要求</h3><p>将X插入在位置P指向的结点之前，返回true。如果参数P指向非法位置，则打印“WrongPosition for Insertion”，返回false</p><p>还是那句话，不要移动先判断</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span> &#123;<br>    List node = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    node-&gt;Data = X;<br>    node-&gt;Next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(L) &#123;<br>        <span class="hljs-keyword">if</span> (L-&gt;Next == P) &#123;<br>            node-&gt;Next = L-&gt;Next;<br>            L-&gt;Next = node;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        L = L-&gt;Next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Position for Insertion\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除元素">删除元素</h2><h3 id="要求-3">要求</h3><p>将位置P的元素删除并返回true。若参数P指向非法位置，则打印“WrongPosition for Deletion”并返回false。</p><h3 id="具体代码-3">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">( List L, Position P )</span> &#123;<br>    <span class="hljs-keyword">while</span>(L-&gt;Next) &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;Next == P) &#123;<br>            L-&gt;Next = L-&gt;Next-&gt;Next;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        L = L-&gt;Next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Position for Deletion\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-5链式表操作集</title>
    <link href="/posts/d34d0e5c/"/>
    <url>/posts/d34d0e5c/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现链表的操作集，也就是对链表进行增删改查。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/728">https://pintia.cn/problem-sets/15/problems/728</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">PtrToLNode</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br><br>    ElementType Data;<br><br>    PtrToLNode Next;<br><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> PtrToLNode Position;<br><br><span class="hljs-keyword">typedef</span> PtrToLNode List;<br></code></pre></td></tr></table></figure></p><h2 id="查询元素">查询元素</h2><h3 id="要求">要求</h3><p>返回线性表中首次出现X的位置。若找不到则返回ERROR</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">Find</span><span class="hljs-params">( List L, ElementType X )</span> &#123;<br>    Position p = L;<br>    <span class="hljs-keyword">while</span>(p) &#123;<br>        <span class="hljs-keyword">if</span>(p-&gt;Data == X) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;Next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入元素">插入元素</h2><h3 id="要求-1">要求</h3><p>将X插入在位置P指向的结点之前，返回链表的表头。如果参数P指向非法位置，则打印“WrongPosition for Insertion”，返回ERROR</p><p>先找到P结点就需要先循环，但是又要有一个插入操作，同时就需要保留P结点之前的一个结点</p><p>非法位置指的是没有P结点就是这样</p><p>之后就是常规的插入操作了</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span> &#123;<br>    Position prev = <span class="hljs-literal">NULL</span>;<br>    Position next = L;<br><br>    PtrToLNode node = (PtrToLNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    node-&gt;Data = X;<br>    node-&gt;Next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (next == P) &#123;<br>        node-&gt;Next = next;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span>(!next) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        prev = next;<br>        next = next-&gt;Next;<br>        <span class="hljs-keyword">if</span>(next == P) &#123;<br>            node-&gt;Next = next;<br>            <span class="hljs-keyword">if</span>(!prev) &#123;<br>                <span class="hljs-keyword">return</span> node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev-&gt;Next = node;<br>                <span class="hljs-keyword">return</span> L;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span>(next);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Position for Insertion\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思考">思考</h3><p>在上述代码中存在着一系列问题。虽然能通过Test，但是有着太多的判断和处理</p><p>空链表插入，单结点尾部插入。。。。。。</p><p>当我把函数划分为多个部分的时候已经违背了简洁的初衷，而不是把问题简单化来处理</p><p>仔细思考，插入的关键不就是有无之前结点存在嘛！就两种情况，然后面对需要对比的判断不需要先移动，这样就避免了Segmentfault。</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span> &#123;<br>    List head = L;<br>    PtrToLNode node = (PtrToLNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    node-&gt;Data = X;<br>    node-&gt;Next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//无前结点的情况</span><br>    <span class="hljs-keyword">if</span> (L == P) &#123;<br>        node-&gt;Next = L;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">//有前结点的情况</span><br>    <span class="hljs-keyword">while</span>(L) &#123;<br>        <span class="hljs-keyword">if</span>(L-&gt;Next == P) &#123;<br>            node-&gt;Next = L-&gt;Next;<br>            L-&gt;Next = node;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        L = L-&gt;Next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Position for Insertion\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除元素">删除元素</h2><h3 id="要求-2">要求</h3><p>将位置P的元素删除并返回链表的表头。若参数P指向非法位置，则打印“WrongPosition for Deletion”并返回ERROR。</p><p>就是循环找到之后删除，同样也需要保留两个结点。同上解决方案，不实际移动，仅比较。</p><h3 id="具体代码-3">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Delete</span><span class="hljs-params">( List L, Position P )</span> &#123;<br>    List head = L;<br><br>    <span class="hljs-keyword">if</span>(P == L) &#123;<br>        <span class="hljs-keyword">return</span> L-&gt;Next;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(L) &#123;<br>        <span class="hljs-keyword">if</span> (L-&gt;Next == P) &#123;<br>            L-&gt;Next = P-&gt;Next;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        L = L-&gt;Next;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong Position for Deletion\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-4链式表的按序号查找</title>
    <link href="/posts/90a2aaf1/"/>
    <url>/posts/90a2aaf1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>找到并返回链式表的第K个元素</p><p>L是给定单链表，函数FindKth要返回链式表的第K个元素。如果该元素不存在，则返回ERROR。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/727">https://pintia.cn/problem-sets/15/problems/727</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">PtrToLNode</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br><br>    ElementType Data;<br><br>    PtrToLNode Next;<br><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> PtrToLNode List;<br></code></pre></td></tr></table></figure></p><h2 id="思考">思考</h2><p>这第K个元素到底是从1开始数还是从0开始数呢？</p><p>姑且按它从1开始数吧(结果还真是从1开始数的)</p><p>又是个没有头结点的单链表</p><h2 id="具体代码">具体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C">ElementType <span class="hljs-title function_">FindKth</span><span class="hljs-params">( List L, <span class="hljs-type">int</span> K )</span> &#123;<br>    <span class="hljs-keyword">while</span>(L != <span class="hljs-literal">NULL</span>) &#123;<br>        K--;<br>        <span class="hljs-keyword">if</span> (K == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> L-&gt;Data;<br>        &#125;<br>        L = L-&gt;Next;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-3求链式表的表长</title>
    <link href="/posts/408493b1/"/>
    <url>/posts/408493b1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>求链表的表长</p><p>这不是就是循环加计数吗？</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/726">https://pintia.cn/problem-sets/15/problems/726</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">PtrToLNode</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br><br>    ElementType Data;<br><br>    PtrToLNode Next;<br><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> PtrToLNode List;<br></code></pre></td></tr></table></figure></p><h2 id="具体代码">具体代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">( List L )</span> &#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(L != <span class="hljs-literal">NULL</span>) &#123;<br>        length++;<br>        L = L-&gt;Next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-2顺序表操作集</title>
    <link href="/posts/584eb966/"/>
    <url>/posts/584eb966/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>实现顺序表的操作集，也就是对顺序表进行增删改查。</p><p>回忆一下什么叫做顺序表？是线性表的一种，但是是顺序存储的方式，和数组非常接近。</p><p>在处理的时候可以看作数组来处理。需要注意的是这里面所有元素都是"紧挨"着的。</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/725">https://pintia.cn/problem-sets/15/problems/725</a></p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Position;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">List</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    ElementType Data[MAXSIZE];<br>    Position Last; <span class="hljs-comment">/* 保存线性表中最后一个元素的位置 */</span><br>&#125;;<br></code></pre></td></tr></table></figure></p><h2 id="创建一个新表">创建一个新表</h2><h3 id="要求">要求</h3><p>创建并返回一个空的线性表。</p><p>显然需要使用到malloc函数来创建一个新空间。</p><p>LNode其实就是整个顺序表了，虽然不知道他为什么要这么来命名。第一次写代码的时候就因为这个弄错了。</p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">MakeEmpty</span><span class="hljs-params">()</span> &#123;<br>    List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    L-&gt;Last = <span class="hljs-number">-1</span>; <span class="hljs-comment">//数组是从0开始数的，这里要保证为空就设置为-1</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询元素">查询元素</h2><h3 id="要求-1">要求</h3><p>返回线性表中X的位置。若找不到则返回ERROR。</p><p>没办法的啊，顺序表就只有上BF了，又不是排序完的数组可以用二分。</p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C">Position <span class="hljs-title function_">Find</span><span class="hljs-params">( List L, ElementType X )</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt;= L-&gt;Last ; i++) &#123;<br>        <span class="hljs-keyword">if</span> (L-&gt;Data[i] == X) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入元素">插入元素</h2><h3 id="要求-2">要求</h3><p>将X插入在位置P并返回true。若空间已满，则打印“FULL”并返回false；如果参数P指向非法位置，则打印“ILLEGALPOSITION”并返回false。</p><p>首先对判满的判断那就是Last和MAXSIZE的比较，也就是Last + 1 ==MAXSIZE就满了。</p><p>其次对非法位置的判断，大于 Last + 1 或者 小于 0 的都属于非法位置</p><p>最后再来实现插入操作</p><ul><li><p>从插入位置开始，所有元素向后移动一位</p></li><li><p>插入位置替换为新元素</p></li></ul><p>！！！这道题最打脑壳的就是你必须要先判满再判非法位置，否则过不了测试</p><h3 id="具体代码-2">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span> &#123;<br>    <span class="hljs-keyword">if</span> (L-&gt;Last + <span class="hljs-number">1</span> == MAXSIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FULL&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (P &gt; L-&gt;Last + <span class="hljs-number">1</span> || P &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ILLEGAL POSITION&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = L-&gt;Last ; i &gt;= P ; i--) &#123; <span class="hljs-comment">//这里需要注意的是插入操作从后往前覆盖</span><br>        L-&gt;Data[i+<span class="hljs-number">1</span>] = L-&gt;Data[i];<br>    &#125;<br><br>    L-&gt;Data[P] = X;<br>    L-&gt;Last++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除元素">删除元素</h2><h3 id="要求-3">要求</h3><p>将位置P的元素删除并返回true。若参数P指向非法位置，则打印“POSITION PEMPTY”（其中P是参数值）并返回false。</p><p>判非法位置就是 P &gt; Last || P &lt; 0</p><p>删除操作就是把后面的向前覆盖，然后修改Last的值就可以让最后一个元素不需要处理。</p><h3 id="具体代码-3">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">( List L, Position P )</span> &#123;<br>    <span class="hljs-keyword">if</span> (P &gt; L-&gt;Last || P &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;POSITION %d EMPTY&quot;</span>,P);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = P ; i &lt;= L-&gt;Last ; i++) &#123; <span class="hljs-comment">//这里需要注意的是删除操作从前往后覆盖</span><br>        L-&gt;Data[i] = L-&gt;Data[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    L-&gt;Last--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-1单链表逆转</title>
    <link href="/posts/8cc49791/"/>
    <url>/posts/8cc49791/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>将给定的单链表进行反转</p><p>题目地址为:<ahref="https://pintia.cn/problem-sets/15/problems/724">https://pintia.cn/problem-sets/15/problems/724</a></p><h2 id="解法一">解法一</h2><h3 id="解法描述">解法描述</h3><p>新建一个空链表，采用头插法就可以将链表反转</p><p>这里需要注意的是，新建链表有个头结点，但是需要反转的链表没有头结点</p><p>所以最后需要返回的应该是新建链表的下一个结点</p><p>List结构定义 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br><br>    ElementType Data; <span class="hljs-comment">/* 存储结点数据 */</span><br><br>    PtrToNode   Next; <span class="hljs-comment">/* 指向下一个结点的指针 */</span><br><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> PtrToNode List; <span class="hljs-comment">/* 定义单链表类型 */</span><br></code></pre></td></tr></table></figure></p><h3 id="具体代码">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Reverse</span><span class="hljs-params">( List L )</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">head</span> =</span> (<span class="hljs-keyword">struct</span> Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>    head-&gt;Next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">current</span> =</span> L;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">temp</span> =</span> current-&gt;Next;<br>        current-&gt;Next = head-&gt;Next;<br>        head-&gt;Next = current;<br>        current = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head-&gt;Next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思考">思考</h3><p>这样写法就非常奇怪，而且在循环中又会引入其他的变量。是否可以不要这个头结点？转而使用判断语句。</p><p>因为只需要处理头结点的问题，也就是只需要判断一次就可以完成。</p><p>一定要注意循环中链表的移动和位置变换的关系（在之前的代码中current是位于head之后，但是这里就是在head之前，就需要把head赋值为current）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Reverse</span><span class="hljs-params">( List L )</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">head</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">current</span> =</span> L;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">temp</span> =</span> current-&gt;Next;<br>        <span class="hljs-keyword">if</span> (!head) &#123;<br>            head = current;<br>            head-&gt;Next = <span class="hljs-literal">NULL</span>;<br>            current = temp;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        current-&gt;Next = head;<br>        head = current;<br>        current = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解法二">解法二</h2><h3 id="解法描述-1">解法描述</h3><p>所谓反转链表无非是两两结点之间箭头的变换</p><p>对比前后的图像就能够很轻易地得出解决方案</p><p><imgsrc="https://img.omnitrix.top/MDImage/img/202231105141.png" /></p><h3 id="具体代码-1">具体代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C">List <span class="hljs-title function_">Reverse</span><span class="hljs-params">( List L )</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">prev</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">current</span> =</span> L;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">temp</span> =</span> current-&gt;Next;<br>        current-&gt;Next = prev;<br>        prev = current;<br>        current = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PTA</category>
      
      <category>数据结构与算法题目集（中文）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux在x86下的启动</title>
    <link href="/posts/ff264380/"/>
    <url>/posts/ff264380/</url>
    
    <content type="html"><![CDATA[<h2 id="一boot部分的困惑">一、Boot部分的困惑</h2><p>这一部分确实困扰了我有一段时间。不太清楚这一部分需要完成的内容。然后通过阅读Linux比较新的源码来获取灵感。同时这也使我陷入了一个更大的更多的困惑之中。之后我通过不断读源码和翻手册才大致弄去清楚。</p><ul><li><p>首先是x86架构下Linux的启动。在Linux最最最早期的版本中是有自己的bootloader的，就是最开始的512字节，然后和GNU有了"py"交易，就用上了Grub，后来索性就不要这部分，但是还是保存在了内核代码中，这部分代码看起来就像是"屎山"。</p></li><li><p>跳过这段代码之后就是广为人知的初始化环境、填充启动协议要求的参数以及跳转保护模式，这样看起来没什么问题对吧。但是我当时脑子一抽，Grub启动内核不是直接进保护模式了吗？怎么还在运行实模式的代码？</p></li><li><p>看一下grub.cfg发现Linux用的是linux加载内核，我是multiboot加载的(这是Grub2的加载方式，Grub不一样)。我就猜测可能是Grub做了特别的事情吧！</p></li><li><p>在我还是迷迷糊糊的时候，看见了Linux启动协议的最后两段，32位启动协议和64位启动协议。然后就恍然大悟。</p></li></ul><h2 id="二向后兼容的linux启动">二、向后兼容的Linux启动</h2><ul><li><p>Linux内核提供了三种启动协议(16位、32位、64位)，为的就是兼容那些还不是UEFI的机器。同样的，Grub对此也提供了相应的启动方式(只有16位和32位哈！Grub最多在32位下运行)。</p></li><li><p>下载Grub源码就可以看见linux16和linux这两条命令，那么对应的就是两种启动方式。</p></li><li><p>首先Grub加载setup和kernel到指定位置，如果是32位就直接填充zeropage(手册上抄的名词)接着运行即可，但是如果是16位就要Grub就要从保护模式转为实模式也就是32位转为16位，接着把权限交给setup的部分，接着初始化环境、填充启动协议要求的参数以及跳转保护模式。</p></li><li><p>！内核的解压是内核本身完成的，也就是跳转保护模式后执行的函数。在setup部分没有加载内核的函数，所以加载文件到指定内存还是要靠bootloader。</p></li></ul><h2 id="三至此疑惑解决">三、至此，疑惑解决</h2><p>读源码看协议本就是一件枯燥乏味的事情，但结果却是能够足以令人兴奋的。宛若看见计算机世界的神迹！</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>x86</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用Xbox One 连接树莓派4B</title>
    <link href="/posts/65412bb1/"/>
    <url>/posts/65412bb1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本来之前是打算用树莓派做嵌入式比赛的板子，但是发现没有发挥完全的用途。于是就看见了手边无用的XboxOne，所以就想拿手柄连接树莓派，然后之后还可以打打游戏或者改装成小车什么的。</p><h2 id="环境准备">环境准备</h2><ol type="1"><li><p>查看树莓派内核版本 <imgsrc="https://img.omnitrix.top/MDImage/img/树莓派内核版本.webp" /></p></li><li><p>查看/usr/src下有没有对应的内核头（一定要一模一样），这个对编译驱动模块很重要<imgsrc="https://img.omnitrix.top/MDImage/img/20201206213933.webp" /></p></li><li><p>如果没有找到对应的内核头，就要去<ahref="https://github.com/raspberrypi/linux">树莓派的github</a>上下载<imgsrc="https://img.omnitrix.top/MDImage/img/20201206214524.webp" /></p></li></ol><h2 id="编译内核和驱动">编译内核和驱动</h2><ol type="1"><li><p>编译内核的问题就自己去百度，大概又是一个多小时的问题，如果有就利用ln软链接指令到编译内核需要的位置</p></li><li><p>直接用蓝牙连接树莓派虽然可以连接上，但是不能读取到数据。所以感谢Github上的一个驱动<ahref="https://github.com/atar-axis/xpadneo">xpadneoatar-axis/xpadneo</a>。网站上面有完整的安装过程，其他人博客也说到了这个，但是没有说明内核版本的问题，差一点都不行。</p></li></ol><h2 id="再次检查">再次检查</h2><ol type="1"><li><p>安装完成之后用lsmod查看是否加载了这个驱动 <imgsrc="https://img.omnitrix.top/MDImage/img/20201206215210.webp" /></p></li><li><p>这样就可以连上XboxOne了</p></li></ol><h2 id="相关代码">相关代码</h2><p>手柄连接蓝牙代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>sudo bluetoothctl<br><br>[bluetooth]<span class="hljs-comment"># scan on</span><br><br>[bluetooth]<span class="hljs-comment"># pair MAC</span><br><br>[bluetooth]<span class="hljs-comment"># trust MAC</span><br><br>[bluetooth]<span class="hljs-comment"># connect MAC</span><br></code></pre></td></tr></table></figure><p>手柄测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br>BLACK    = (   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>)<br>WHITE    = ( <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextPrint</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.reset()<br>        self.font = pygame.font.Font(<span class="hljs-literal">None</span>, <span class="hljs-number">20</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">self, screen, textString</span>):<br>        textBitmap = self.font.render(textString, <span class="hljs-literal">True</span>, BLACK)<br>        screen.blit(textBitmap, [self.x, self.y])<br>        self.y += self.line_height<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">10</span><br>        self.y = <span class="hljs-number">10</span><br>        self.line_height = <span class="hljs-number">15</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">indent</span>(<span class="hljs-params">self</span>):<br>        self.x += <span class="hljs-number">10</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">unindent</span>(<span class="hljs-params">self</span>):<br>        self.x -= <span class="hljs-number">10</span><br>    <br><br>pygame.init()<br><br>size = [<span class="hljs-number">500</span>, <span class="hljs-number">700</span>]<br>screen = pygame.display.set_mode(size)<br><br>pygame.display.set_caption(<span class="hljs-string">&quot;My Game&quot;</span>)<br><br>done = <span class="hljs-literal">False</span><br><br><br>clock = pygame.time.Clock()<br><br>pygame.joystick.init()<br>    <br><br>textPrint = TextPrint()<br><br><span class="hljs-keyword">while</span> done==<span class="hljs-literal">False</span>:<br><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get(): <br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            done=<span class="hljs-literal">True</span><br>        <br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.JOYBUTTONDOWN:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Joystick button pressed.&quot;</span>)<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.JOYBUTTONUP:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Joystick button released.&quot;</span>)<br>            <br> <br><br>    screen.fill(WHITE)<br>    textPrint.reset()<br><br><br>    joystick_count = pygame.joystick.get_count()<br><br>    textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Number of joysticks: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(joystick_count) )<br>    textPrint.indent()<br>    <br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(joystick_count):<br>        joystick = pygame.joystick.Joystick(i)<br>        joystick.init()<br>    <br>        textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Joystick &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i) )<br>        textPrint.indent()<br>    <br><br>        name = joystick.get_name()<br>        textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Joystick name: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name) )<br>        <br>        axes = joystick.get_numaxes()<br>        textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Number of axes: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(axes) )<br>        textPrint.indent()<br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( axes ):<br>            axis = joystick.get_axis( i )<br>            textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Axis &#123;&#125; value: &#123;:&gt;6.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, axis) )<br>        textPrint.unindent()<br>            <br>        buttons = joystick.get_numbuttons()<br>        textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Number of buttons: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(buttons) )<br>        textPrint.indent()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( buttons ):<br>            button = joystick.get_button( i )<br>            textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Button &#123;:&gt;2&#125; value: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i,button) )<br>        textPrint.unindent()<br>            <br><br>        hats = joystick.get_numhats()<br>        textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Number of hats: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(hats) )<br>        textPrint.indent()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( hats ):<br>            hat = joystick.get_hat( i )<br>            textPrint.<span class="hljs-built_in">print</span>(screen, <span class="hljs-string">&quot;Hat &#123;&#125; value: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, <span class="hljs-built_in">str</span>(hat)) )<br>        textPrint.unindent()<br>        <br>        textPrint.unindent()<br><br>    <br>    pygame.display.flip()<br><br><br>    clock.tick(<span class="hljs-number">20</span>)<br>    <br>pygame.quit ()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>奇技淫巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>embedded</tag>
      
      <tag>树莓派</tag>
      
      <tag>Xbox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爱拥抱的糖果</title>
    <link href="/posts/cc32acdd/"/>
    <url>/posts/cc32acdd/</url>
    
    <content type="html"><![CDATA[<p>广场的正中央，有一个糖果姑娘。她的面前有一块牌子，上面写的是，可不可以拥抱我一下。</p><p>来来往往的食物很多，但是没有食物去抱她一下。糖果姑娘就那么一直站着，面带微笑。没有谁知道她为什么要这样做，在这个食物的世界里，真的是无奇不有。</p><p>然后，一个棉花糖过去了，他问了问糖果为什么要这样做。糖果笑着对棉花糖说，你抱我一下就知道了。</p><p>棉花糖抱了抱糖果，笑着松开了。没有说话，悄悄地走开了。</p><p>然后来了一块饼干，也是好奇，也问了糖果一样的问题，得到了同样的答案，也同样地拥抱了糖果一下，也笑着离开了。</p><p>渐渐地，越来越多地食物都去拥抱了糖果一下。</p><p>没有人知道为什么。</p><p>只有古老的书中记载，糖果有一颗冰冷心，需要拥抱才可以温暖。</p><p>而拥抱她的食物，为什么会笑呢？</p><p>因为糖果是甜的呀！</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>彩虹桥那边的精灵</title>
    <link href="/posts/857018e9/"/>
    <url>/posts/857018e9/</url>
    
    <content type="html"><![CDATA[<p>豆沙包永远也不会知道的事情，可能就是彩虹桥的那边根本就没有什么魔法吧！但是他还是带着红豆姑娘去了彩虹的另一端。即使红豆姑娘不再期望能够看见！</p><p>“请问这里是彩虹的另一端吗？”豆沙包看着眼前的这个有点黑的食物。</p><p>“另一端？对啊，你抬头看，头上不是彩虹吗？”</p><p>这个黑黑的食物叫做黑森林蛋糕，这里的人都把她亲切地叫做蛋糕小姐。</p><p>豆沙包向她问了一下关于恢复红豆姑娘视力的精灵，蛋糕小姐摇了摇头，然后看了一眼红豆姑娘，害羞地把自己手里的花藏在身后。然后匆匆忙忙地离开了。</p><p>豆沙包继续往前走，背上的红豆姑娘睡得香香的。</p><p>在离村子有点远的山上，蛋糕小姐奔向了一片草坪，“叉子先生，你看我今天给你带的花！”</p><p>远远的草坪上面，站着的是餐具王国的叉子。他只是看着蛋糕小姐，没有说话，这样已经好多好多天了。蛋糕小姐每天都给叉子带来不一样的花，其实蛋糕小姐也是知道的。叉子先生是接到了餐具王国的任务，要来抓蛋糕小姐带去地球，可是叉子先生怎么都下不去手。</p><p>蛋糕小姐每天都带着不一样的花来山上找叉子先生，叉子先生也很乐意接过花，对蛋糕小姐一笑，然后蛋糕小姐就坐在叉子先生的旁边，给他讲以前蛋糕王国的故事。</p><p>原来啊！黑森林蛋糕是蛋糕王国里面，照顾花花草草的园艺师。但是呢？食物王国和餐具王国的战争开始了，蛋糕王国首当其冲，（谁叫他们偏受地球人的喜爱呢！）</p><p>蛋糕王国的蛋糕都被抓了，执行这次任务的就是叉子先生，他知道黑森林蛋糕逃跑了，他也知道那满园的花也是她种的。餐具国王要求叉子先生把黑森林蛋糕找回来，叉子先生也知道，自己如果找不回蛋糕，那么自己也回不去了。也就没有了那么多的荣耀！</p><p>可是啊！叉子先生舍不得带蛋糕小姐回去，他可能，也不喜欢餐具王国那个冰冰冷冷的地方。</p><p>“那个！蛋糕小姐，你能带我去你住的逛逛吗？”</p><p>“嗯？”蛋糕一下没反应过来，这么多天了，叉子都还没有说过话。“好的！”蛋糕小姐用力地点了点头。</p><p>当蛋糕带着叉子进了村子里面地时候，村子整个炸开了锅！</p><p>“大家快准备战斗，餐具来了！“说着话的是村子里面的包子！</p><p>“不是的，不是的，叉子先生是好人，他只是来看看，没有坏意的“，蛋糕小姐挡在叉子先生前面，连忙摆手！</p><p>叉子先生也不说话，拉着蛋糕小姐的手穿过人群！“你怎么不像照顾那些花一样，照顾一下你的手呢？“</p><p>蛋糕小姐一听，不好意思地笑了。“没关系的！“</p><p>正巧，他们遇到了找寻无果的豆沙包，叉子听了豆沙包的故事，似乎有点眉目。</p><p>这个星球上，只有巧克力是精灵，也只有他们能够使用魔法！但是呀，星球上面只有一个巧克力了，可是他已经成为了白巧克力，守护在冰淇淋公主的身边！也就是说，明明知道怎么让红豆姑娘恢复眼睛，但是已经没有了机会！</p><p>“让我来吧！“黑森林小姐站了出来，她说，”我身体里面有黑巧克力，相信他们可以帮助你们！“</p><p>“可是这样你会死的呀！“叉子摸了摸蛋糕的脑袋，”你是不是个傻子啊！我不会要你离开我的！“</p><p>蛋糕小姐笑了，“其实，当我逃出蛋糕王国的时候，就知道我已经受了诅咒，没有多长的时间了！他们说，彩虹的一端有一个童话，我呢！就想来看一看，这个童话到底是什么！看来现在我找到了，也就没有遗憾了“。蛋糕望着叉子，”这个童话，原来就是你啊！“</p><p>叉子愣住了，他不知道应该怎么办！是要杀了蛋糕小姐吗？虽然自己做了那么多事，偏偏这件事情让自己难受。</p><p>就在这个时候，蛋糕小姐穿过叉子，分成了两半。黑巧克力原来是蛋糕小姐的心，她飘到了红豆姑娘眼前，融了进去。</p><p>红豆姑娘睁开了眼睛，眼角滑落了一滴蜂蜜。没想到的是，蜂蜜落到了蛋糕小姐的身体上面，就像胶水一样，把蛋糕小姐恢复如初！叉子先生亲亲地抱起了蛋糕小姐，缓缓地吻了一下！</p><p>“你干嘛吻我呀！“。</p><p>“因为你是甜甜的“。</p><p>原来，这个世界最厉害的魔法，就是自己啊！</p><p>我，最喜欢的，也就是你呀！</p><p>（</p><p>小太阳很忙</p><p>小云朵想吃糖</p><p>长颈鹿嫌脖子不够长</p><p>喜欢的你</p><p>太难忘</p><p>）</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红豆姑娘</title>
    <link href="/posts/91748a4b/"/>
    <url>/posts/91748a4b/</url>
    
    <content type="html"><![CDATA[<p>在彩虹的一端，有一个小村子。</p><p>红豆姑娘是村子里面最漂亮的，尽管她身材娇小，可是好像村子里面的食物都挺喜欢她的。</p><p>这里的食物过着无忧无虑的生活，丝毫不知道彩虹的另一端战火纷飞。今天是个特别的日子，是馒头们的成年礼。</p><p>所谓的成年礼就是一堆馒头跳进蜂蜜湖泊，然后再出来就算成年了。这要是再地球这个地方，倒是一个很奇异的吃法。</p><p>这个村子的馒头都是方方正正的，貌似在地球人的眼中，馒头都是这样的。但是，很奇怪的是。这个村子有个馒头是圆的？不是包子，包子是在遥远的一个地方，他们是夜的精灵，白天一到他们就会消失。</p><p>当然，这些馒头不知道有包子。他们只是觉得这个圆馒头很奇怪而已。</p><p>成人礼，所有馒头都跳进去了，圆馒头却犹豫了，他不知道自己是不是真正的馒头，所以迟迟不肯跳下去。</p><p>“快救人啊！红豆姑娘掉下去了！”老馒头村子叫了一声，但是馒头都在蜂蜜湖泊里面，听不见。圆馒头看见了，就扑通一声跳下去了。红豆姑娘虽然被救了上来，但是却看不见东西了！</p><p>老馒头村子叹了一口气，说，这湖泊有魔法，只能是馒头才能进去。圆馒头高兴了一会儿，原来自己是馒头呀！</p><p>可是他看看失明的红豆姑娘，也就不觉得高兴了。</p><p>“村长，魔法有办法破解吗？”</p><p>“相传在彩虹的另一端，有精灵，他们应该可以破解这个魔法！”</p><p>“那好，我带红豆去！”</p><p>“外面的世界，可是很危险的啊！”村长有些严肃了。</p><p>圆馒头想了想，红豆姑娘对自己挺好的，会帮自己缝衣服，会陪自己看星星，会在所有人都远离他的时候靠近他！自己已经跳进蜂蜜湖泊了，自己也是个大人了。圆馒头决定出发，去彩虹的另一端。</p><p>“红豆姑娘，你愿意陪我一起去彩虹另一端吗？”圆馒头这样问道。</p><p>红豆姑娘听着这个熟悉的声音。她想到了和圆馒头在一起的时光。他会用身体为自己挡雨，会摘小花送给自己。想到这，红豆姑娘笑了。“当然好啦！不过在此之前，我有个愿望！”</p><p>“嗯？”</p><p>“我可以住进你心里吗？”</p><p>夕阳西下，圆馒头的身影渐行渐远，红豆姑娘在圆馒头的背上。</p><p>“你已经住进我心里啦！”</p><p>“那这样我就不叫馒头喏！”</p><p>对啊！他叫豆沙包！我知道的！</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巧克力骑士.续</title>
    <link href="/posts/237a7963/"/>
    <url>/posts/237a7963/</url>
    
    <content type="html"><![CDATA[<p>白巧克力得到了可可粉的同时，也得到了无穷无尽的魔法。或许，拯救食物世界就是靠他了。</p><p>听闻冰淇淋王国的故事后，黑巧克力想去看一看那个勇敢的冰淇淋公主。于是他就往冰淇淋王国的方向走去，越来越冷，越来越冷。一路上还会遇见一些整装待发的餐具大军，毫无疑问，都被黑巧克力击败了。</p><p>终于，黑巧克力来到了那条冰淇淋公主化身的河前，他被这条河吸引住了，但是不知道为什么，他也说不出原因来。他就那样静静地坐着，任凭冰淇淋王国地风吹过来。</p><p>黑巧克力睡着了，他做了一个梦，梦到了那个冰淇淋公主。那会地公主还没有变成冰淇淋河。黑巧克力和她说了好多好多的话，冰淇淋公主也很开心的笑了！也不知道过了多久！</p><p>然后，黑巧克力起身了，他想去找那个女祭司，他想让冰淇淋公主变回来。山上的暴风雪在魔法师眼中也不过是世界的一点点小风景。女祭司泡好了茶，像是知道黑巧克力会来。</p><p>“你可以把冰淇淋公主变回来吗？” 黑巧克力问道。</p><p>“你不是魔法师吗？怎么？你不能破解我的魔法吗？”</p><p>“那是诅咒，是对冰淇淋公主的诅咒”，黑巧克力确信自己的猜测。</p><p>女祭司提出了一个条件，她要黑巧克力身上的可可粉。黑巧克力犹豫了，这个可可粉是棉花糖长老要自己守护的东西啊！“怎么？不舍得？”</p><p>“不是，是我失去了可可粉，就没有魔法，就不能保护食物世界的人，同时也没有完成棉花糖长老给我的任务！”</p><p>女祭司喝完了茶，示意黑巧克力离开。“你忘了冰淇淋公主的事情了吗？”女祭司苦笑，黑巧克力哪会明白啊！</p><p>“等等，我把可可粉给你！”</p><p>“不反悔？”</p><p>“不反悔！”</p><p>黑巧克力闭上了眼睛，再睁开眼后，自己回到了冰淇淋王国，而那条河消失了，眼前的是冰淇淋公主呀！</p><p>“你好！请问你是黑巧克力吗？我刚刚做了一个梦，梦见了一个和你长得一样的人，只不过他是黑色的，而你是白色的！”黑巧克力打量了一下自己，笑了，他对冰淇淋公主说，</p><p>“公主，我是白巧克力！白巧克力骑士！”</p><p>“那你认识黑巧克力吗？”</p><p>黑巧克力回头看了看雪山，说道，“认识啊！他可能保护食物世界去了，而且，永远都不会回来！所以，他让我来守护你，我最尊敬的公主殿下！”</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巧克力骑士</title>
    <link href="/posts/3935cd06/"/>
    <url>/posts/3935cd06/</url>
    
    <content type="html"><![CDATA[<p>相传在古拉古拉森林里面住着一群小精灵，因为没有食物进过森林，所以也没有见过它们。传闻食物世界出现危险的时候，它们就会走出森林去帮助这个世界的其他食物。</p><p>此时，古拉古拉森林的最深处，棉花糖长老迈着年老的步伐，取出了一块宝石，交到了白巧克力的手上。</p><p>“这是最后的机会了，其他的白巧克力骑士出去已经没了音讯。”棉花糖长老重重地叹了一口气。</p><p>自冰淇淋王国的事情发生之后，食物就开始同餐具战斗，白巧克力骑士出去了一批又一批，这最后的白巧克力，也是古拉古拉森林最后的力量了。而这次，最后的这个白巧克力需要拿着先知给的宝石，去打开牛奶糖山山顶的洞穴，拿出里面的东西。</p><p>白巧克力上路了，面对他的是没有见过的世界和危险。</p><p>到底哪里才是去牛奶山的路啊！白巧克力这样想着，不一会儿就到了榴莲王国，白巧克力实在是受不了这样的味道，正打算绕路而行，却被榴莲王国的人当成入侵者抓了起来。</p><p>一番解释之后，榴莲国王相信了白巧克力，并且告诉他，餐具王国的队伍已经兵临城下。</p><p>榴莲国王想要白巧克力替他们征战，可是白巧克力知道，凭自己现在的实力是肯定抵挡不住那些餐具。他可以做的就是去找到那个洞穴。万万没想到，牛奶山就在餐具军队的后面，要想过去的话，必须要打败餐具大军，白巧克力知道后有点沮丧吧！但无论如何，至少也要拼一下啊！</p><p>就这样，白巧克力穿上了铠甲，化身为榴莲王国的白巧克力骑士，为保护榴莲王国而战。</p><p>然而，事实却没有按照白巧克力骑士的想法发展，餐具太厉害了。食物根本不可能是他们的对手。难道，就这样放弃吗？前也是阵亡，后也是阵亡。白巧克力犹豫了，他知道自己的能力有限，而且也完不成棉花糖长老给他的任务了。</p><p>可是，万万没有想到，城中的榴莲们纷纷跑了出来，冲向餐具，同之前一样，这些都是毫无意义的牺牲啊！</p><p>时间渐渐变长，战场上面弥漫的都是榴莲的气味。原来，这是榴莲国王最后能帮白巧克力骑士的了。他想通过这样的混乱，让白巧克力顺利走到牛奶山。</p><p>每个人，都在为自己的家园而战呀！</p><p>牛奶山上果然又一个洞穴，白巧克力拿出来那块宝石，打开了洞穴的大门。里面只有一个器皿，里面装着黑乎乎的东西。白巧克力伸手去拿，便和那黑乎乎的东西融合在了一起。那个黑乎乎的东西叫可可粉，白巧克力骑士就变成了黑巧克力骑士。或许，叫他黑巧克力魔法师更合适吧！</p><p>牛奶山上刮起了一阵狂风，向榴莲王国吹去，餐具被击败了。</p><p>烟尘散去，随处可见食物残骸，没有人知道为什么会有这阵大风，因为那个白巧克力早就消失在了去牛奶山的路上。</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>惊蛰</title>
    <link href="/posts/fb58a464/"/>
    <url>/posts/fb58a464/</url>
    
    <content type="html"><![CDATA[<p>春为三季，惊蛰在中。</p><p>如雷沉沉，似雨纷纷。</p><p>同是万物苏醒的日子，你来时唤我一声。</p><p>从此心田七分，慢慢地开了花。</p><p>而那剩余三分，本就属于你啊。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冰淇淋公主</title>
    <link href="/posts/18f60759/"/>
    <url>/posts/18f60759/</url>
    
    <content type="html"><![CDATA[<p>在遥远的异星球，那里有很多很多的国家。然而在那里居住的并不是人类，而是各种各样的食物和餐具。</p><p>异星球最北的地方超级冷。冰淇淋王国便坐落在那。王国里居住着很多很多的冰淇淋，他们有着各种各样的颜色和千奇百怪的口味。国王是薄荷味的棒冰，他有一个草莓味的冰淇淋女儿。也就是公主啦！</p><p>公主一天到晚板着个脸，很少有冰淇淋见过她笑。可能是因为天气实在太冷了，笑起来很费劲，而公主很懒，所以就懒得笑吧。所以草莓冰淇淋又被王国的人叫做草莓冰公主。</p><p>直到有一天，冰淇淋王国来了一只军队。领队的是餐刀和餐叉，他们后面跟着许多的筷子。队伍中间，是一个用藤蔓编成的笼子，笼子里面关押着许多水果王国的西瓜。</p><p>刀叉要求把这些西瓜放在冰淇淋王国。薄荷棒冰国王十分犹豫，这些不都是烫手山芋吗？可是自己的军队完全不是餐具的对手，所以他只好答应下来，把西瓜关进了冰牢房。</p><p>公主听说自己国家来了一批有意思的罪犯，一个个长得圆头圆脑，身穿绿衣。公主长这么大还没见过这样的食物。她特别好奇，就去到冰牢看看。</p><p>冰牢很冷，但是对冰淇淋来说却是很舒适。</p><p>公主大摇大摆地走进冰牢，发现一个守卫都没有。</p><p>可能是因为西瓜太懒了，都懒得逃跑。薄荷棒冰国王也就没有派守卫来监视西瓜们。</p><p>冰淇淋公主站在牢房外，歪着头打量着地上的五六个圆东西。好奇的她伸出手去戳那个离她最近的西瓜。</p><p>“你是谁？”西瓜也没有站起来，只是翻了个身，看着外面的冰淇淋。</p><p>“我是冰淇淋王国的公主。”公主骄傲地说道。虽然她被吓了一跳，但是她感觉里面的西瓜没有恶意。</p><p>“美丽的公主，你好。我是西瓜王国的王子，请问你能放我们出去吗？”此时冰牢最里面的西瓜站了起来。</p><p>那西瓜貌似是最胖的，公主这样想到，难道胖就可以做王子吗？</p><p>公主摇了摇头，认为自己好傻，然后回答了西瓜王子。</p><p>“没有父王允许，不可以的啊。”公主歪着脑袋看着这些奇怪的外来者。</p><p>西瓜王子就告诉公主，他们是在西瓜王国外被餐具王国的人抓住，餐具要把他们做成冰镇西瓜，最后送往一个叫做地球的地方。</p><p>地球？</p><p>公主都没有听说过这样的地方，但是看西瓜这么真诚。公主还是把这件事情告诉了国王。</p><p>国王一听，还是无奈地摇了摇头。他没有责备公主，似乎他早就知道事情的前因后果。在公主万般要求下，国王说出了这样一个真相。</p><p>食物界已经被餐具统治多年，大家都是有怨言而说不出。更何况自己的国家每年还要向餐具王国进贡大量自己的子民，然后让他们送给地球。不然的话，整个王国都会被餐具侵占。</p><p>地球上到底有什么呢？公主这样想着。</p><p>但是，眼前的餐具才是自己的敌人啊。就算不为了那个胖嘟嘟的西瓜，自己也该为冰淇淋王国做点什么。</p><p>既然国王没有办法，为什么自己不去问问冰淇淋山上的女祭司呢？</p><p>于是公主就带上水，前往冰淇淋山。</p><p>可是冰淇淋山路途遥远，自己又没有出过远门。该怎么办呢？于是她想到了冰牢里的西瓜王子。</p><p>就这样，公主悄悄带走了西瓜王子。两人前往冰淇淋山。</p><p>两人走到山腰，暴风雪就来了。公主怕自己被吹走，就紧紧地抱住西瓜。看来胖还是有胖的好处嘛。</p><p>而在冰淇淋王国，餐具大军早已兵临城下。薄荷棒冰国王发现少了一个西瓜。而餐具就以此为借口，要国王三天内交出剩下的那个西瓜，不然就攻打冰淇淋王国。</p><p>冰淇淋山上有个小屋，里面住着女祭司。公主到的时候，西瓜王子已经快接近生命终点，变成冰镇西瓜了。</p><p>公主先问了女祭司有没有击败餐具的方法，女祭司摇了摇头。然后公主又问女祭司有没有办法救救西瓜。</p><p>女祭司告诉公主，要救西瓜只有一个办法。就是点燃火，因为西瓜的心已经被这冰天雪地给冻住了。当然，如果是冰淇淋点燃火，那么她也将不复存在。</p><p>看着奄奄一息的西瓜王子，公主狠下心来，告诉女祭司，如果西瓜醒了，一定要他保护好自己，不要再被抓了。</p><p>女祭司笑了笑，没有说话。</p><p>火燃起来了，公主也开始慢慢融化，当公主化为一滩奶油和水的混合物时，西瓜睁开了眼睛。他看着地上的东西，明白了一切。</p><p>“去吧，去救你的国家吧！”女祭司举出法杖，那奶油和水的混合物化为滔天巨浪，载着西瓜王子涌向冰淇淋王国。</p><p>“胖西瓜，你一定要回到自己的国家啊。记得以后，要减肥！嘻嘻嘻！”</p><p>这是冰淇淋公主的声音。</p><p>西瓜王子听了以后，开心地笑了，就像冰淇淋公主那样，笑了。</p><p>餐具大军被这巨浪袭过，在寒风中顿时化为一塑塑冰雕。而那巨浪，成了一条河，环绕着冰淇淋王国。</p><p>特别的是，这是草莓味的，带有温度的一条河。</p><p>其实他们都不知道，这条河的名字叫做草莓冰淇淋公主。</p>]]></content>
    
    
    <categories>
      
      <category>故事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>童话故事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不知道是什么的</title>
    <link href="/posts/f75c8ba5/"/>
    <url>/posts/f75c8ba5/</url>
    
    <content type="html"><![CDATA[<h2 id="所以你的选择是">所以你的选择是？</h2><h2 id="成长">成长</h2><p>你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。</p><p>其实啊，我翻遍了《舞舞舞》都找不到这句话，就好像很久之前看过的杂志上，说的什么什么出自于什么电影。所以我去看了龙猫，看了千与千寻。也不知道那些人是怎么总结出来的，这些也就成为了我信仰的众多鸡汤之一。</p><p>有的时候，觉得喜欢就是一瞬间的事情。像什么灵魂只能独行，豌豆姑娘，或者其他东西等等。这种感觉怎么说呢？就好像我与山海相望，而山海终不见我。跋山涉水总是出乎意料的难，就好像我再也没有拾起角落里的字帖，打开装满工具的盒子，铺上不多不少的切割板。所以有的时候，觉得厌恶也还是一瞬间的事情，或许谈不上厌恶，只是山海遥远，形单影只又怎敢上路。思来想去总想找个合适的理由，融合了人类许多缺点这个借口倒是挺符合于我。</p><p>故事总是惊人得出奇，离别也不是意料之外。倒是我自己，把那些珍藏的一一摆放出来，或许谈不上珍藏，那些更像是陪伴自己的朋友。它们会继续陪伴，无论和谁。而我也会继续生活，无论在哪。或许以后，我还会再买一版字帖，练一练好久没做过的纸模，换一张巨大的切割板。也可能会养一只猫......</p><p>什么见过的，遗忘的，未知的，憧憬的，恐惧的统统都冲我而来。命运使然罢了，我这样安慰着自己。</p><p>于是松鼠把所有东西都藏了起来，包括自己。</p><h2 id="二十四节气">二十四节气</h2><p>世界总是存在着规律，朝升暮落，冷暖交替。始于漫漫长冬，等来万物苏醒，避走烈日，下一场雨。这些话一点都不押韵，听起来也会觉得有那么一些奇怪。感觉自己又好像对自己的未来了如指掌。</p><p>春为三季，惊蛰在中。好像遗忘了，丢失的，也会随着时间，慢慢地回来。</p><h2 id="如鲠在喉">如鲠在喉</h2><p>不夜侯叫茶，满月叫未缺。脑子里面总是记一些奇奇怪怪的东西。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
